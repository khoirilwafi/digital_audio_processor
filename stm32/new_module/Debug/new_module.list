
new_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  0800d998  0800d998  0001d998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e290  0800e290  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e290  0800e290  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e290  0800e290  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e294  0800e294  0001e294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000179c  200001f8  0800e490  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001994  0800e490  00021994  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014534  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5b  00000000  00000000  00034755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb2e  00000000  00000000  000394b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161db  00000000  00000000  00054fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d240  00000000  00000000  0006b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001083f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  0010844c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f8 	.word	0x200001f8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d97c 	.word	0x0800d97c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001fc 	.word	0x200001fc
 8000224:	0800d97c 	.word	0x0800d97c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_f2iz>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011b0:	d30f      	bcc.n	80011d2 <__aeabi_f2iz+0x2a>
 80011b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ba:	d90d      	bls.n	80011d8 <__aeabi_f2iz+0x30>
 80011bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011c8:	fa23 f002 	lsr.w	r0, r3, r2
 80011cc:	bf18      	it	ne
 80011ce:	4240      	negne	r0, r0
 80011d0:	4770      	bx	lr
 80011d2:	f04f 0000 	mov.w	r0, #0
 80011d6:	4770      	bx	lr
 80011d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011dc:	d101      	bne.n	80011e2 <__aeabi_f2iz+0x3a>
 80011de:	0242      	lsls	r2, r0, #9
 80011e0:	d105      	bne.n	80011ee <__aeabi_f2iz+0x46>
 80011e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011e6:	bf08      	it	eq
 80011e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011ec:	4770      	bx	lr
 80011ee:	f04f 0000 	mov.w	r0, #0
 80011f2:	4770      	bx	lr

080011f4 <__aeabi_f2uiz>:
 80011f4:	0042      	lsls	r2, r0, #1
 80011f6:	d20e      	bcs.n	8001216 <__aeabi_f2uiz+0x22>
 80011f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011fc:	d30b      	bcc.n	8001216 <__aeabi_f2uiz+0x22>
 80011fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001202:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001206:	d409      	bmi.n	800121c <__aeabi_f2uiz+0x28>
 8001208:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800120c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001210:	fa23 f002 	lsr.w	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	f04f 0000 	mov.w	r0, #0
 800121a:	4770      	bx	lr
 800121c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001220:	d101      	bne.n	8001226 <__aeabi_f2uiz+0x32>
 8001222:	0242      	lsls	r2, r0, #9
 8001224:	d102      	bne.n	800122c <__aeabi_f2uiz+0x38>
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	4770      	bx	lr
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <interface_begin>:
const uint16_t      alamat_limiter[4] = {185,220,255,290};
const uint16_t alamat_crossover[2][4] = {{64,79,109,94},{124,139,169,154}};
const uint16_t alamat_paramerik[2][4] = {{4,9,14,19},{24,29,34,39}};

void interface_begin(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	lcd_begin(&hi2c2);
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <interface_begin+0x1c>)
 800123a:	f007 fb51 	bl	80088e0 <lcd_begin>
	dsp_begin(&hspi2);
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <interface_begin+0x20>)
 8001240:	f006 ff72 	bl	8008128 <dsp_begin>
	flash_begin(&hspi1);
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <interface_begin+0x24>)
 8001246:	f007 f995 	bl	8008574 <flash_begin>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000324 	.word	0x20000324
 8001254:	200002c4 	.word	0x200002c4
 8001258:	20000460 	.word	0x20000460

0800125c <led_mute>:

void led_mute(uint8_t channel, bool status)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	if(status == true)
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d039      	beq.n	80012e6 <led_mute+0x8a>
	{
		switch(channel)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d870      	bhi.n	800135a <led_mute+0xfe>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <led_mute+0x24>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	08001299 	.word	0x08001299
 8001284:	080012a7 	.word	0x080012a7
 8001288:	080012b3 	.word	0x080012b3
 800128c:	080012bf 	.word	0x080012bf
 8001290:	080012cb 	.word	0x080012cb
 8001294:	080012d9 	.word	0x080012d9
		{
			case 0 : HAL_GPIO_WritePin(IN1_MUTE_GPIO_Port, IN1_MUTE_Pin,   GPIO_PIN_RESET); break;
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <led_mute+0x108>)
 80012a0:	f003 ffa5 	bl	80051ee <HAL_GPIO_WritePin>
 80012a4:	e059      	b.n	800135a <led_mute+0xfe>
			case 1 : HAL_GPIO_WritePin(IN2_MUTE_GPIO_Port, IN2_MUTE_Pin,   GPIO_PIN_RESET); break;
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	482f      	ldr	r0, [pc, #188]	; (8001368 <led_mute+0x10c>)
 80012ac:	f003 ff9f 	bl	80051ee <HAL_GPIO_WritePin>
 80012b0:	e053      	b.n	800135a <led_mute+0xfe>
			case 2 : HAL_GPIO_WritePin(OUT1_MUTE_GPIO_Port, OUT1_MUTE_Pin, GPIO_PIN_RESET); break;
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	482d      	ldr	r0, [pc, #180]	; (800136c <led_mute+0x110>)
 80012b8:	f003 ff99 	bl	80051ee <HAL_GPIO_WritePin>
 80012bc:	e04d      	b.n	800135a <led_mute+0xfe>
			case 3 : HAL_GPIO_WritePin(OUT2_MUTE_GPIO_Port, OUT2_MUTE_Pin, GPIO_PIN_RESET); break;
 80012be:	2200      	movs	r2, #0
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	4828      	ldr	r0, [pc, #160]	; (8001364 <led_mute+0x108>)
 80012c4:	f003 ff93 	bl	80051ee <HAL_GPIO_WritePin>
 80012c8:	e047      	b.n	800135a <led_mute+0xfe>
			case 4 : HAL_GPIO_WritePin(OUT3_MUTE_GPIO_Port, OUT3_MUTE_Pin, GPIO_PIN_RESET); break;
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <led_mute+0x110>)
 80012d2:	f003 ff8c 	bl	80051ee <HAL_GPIO_WritePin>
 80012d6:	e040      	b.n	800135a <led_mute+0xfe>
			case 5 : HAL_GPIO_WritePin(OUT4_MUTE_GPIO_Port, OUT4_MUTE_Pin, GPIO_PIN_RESET); break;
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <led_mute+0x110>)
 80012e0:	f003 ff85 	bl	80051ee <HAL_GPIO_WritePin>
 80012e4:	e039      	b.n	800135a <led_mute+0xfe>
		}
	}
	else
	{
		switch(channel)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d836      	bhi.n	800135a <led_mute+0xfe>
 80012ec:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <led_mute+0x98>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	0800130d 	.word	0x0800130d
 80012f8:	0800131b 	.word	0x0800131b
 80012fc:	08001327 	.word	0x08001327
 8001300:	08001333 	.word	0x08001333
 8001304:	0800133f 	.word	0x0800133f
 8001308:	0800134d 	.word	0x0800134d
		{
			case 0 : HAL_GPIO_WritePin(IN1_MUTE_GPIO_Port, IN1_MUTE_Pin,   GPIO_PIN_SET); break;
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <led_mute+0x108>)
 8001314:	f003 ff6b 	bl	80051ee <HAL_GPIO_WritePin>
 8001318:	e01f      	b.n	800135a <led_mute+0xfe>
			case 1 : HAL_GPIO_WritePin(IN2_MUTE_GPIO_Port, IN2_MUTE_Pin,   GPIO_PIN_SET); break;
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <led_mute+0x10c>)
 8001320:	f003 ff65 	bl	80051ee <HAL_GPIO_WritePin>
 8001324:	e019      	b.n	800135a <led_mute+0xfe>
			case 2 : HAL_GPIO_WritePin(OUT1_MUTE_GPIO_Port, OUT1_MUTE_Pin, GPIO_PIN_SET); break;
 8001326:	2201      	movs	r2, #1
 8001328:	2108      	movs	r1, #8
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <led_mute+0x110>)
 800132c:	f003 ff5f 	bl	80051ee <HAL_GPIO_WritePin>
 8001330:	e013      	b.n	800135a <led_mute+0xfe>
			case 3 : HAL_GPIO_WritePin(OUT2_MUTE_GPIO_Port, OUT2_MUTE_Pin, GPIO_PIN_SET); break;
 8001332:	2201      	movs	r2, #1
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <led_mute+0x108>)
 8001338:	f003 ff59 	bl	80051ee <HAL_GPIO_WritePin>
 800133c:	e00d      	b.n	800135a <led_mute+0xfe>
			case 4 : HAL_GPIO_WritePin(OUT3_MUTE_GPIO_Port, OUT3_MUTE_Pin, GPIO_PIN_SET); break;
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <led_mute+0x110>)
 8001346:	f003 ff52 	bl	80051ee <HAL_GPIO_WritePin>
 800134a:	e006      	b.n	800135a <led_mute+0xfe>
			case 5 : HAL_GPIO_WritePin(OUT4_MUTE_GPIO_Port, OUT4_MUTE_Pin, GPIO_PIN_SET); break;
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <led_mute+0x110>)
 8001354:	f003 ff4b 	bl	80051ee <HAL_GPIO_WritePin>
 8001358:	bf00      	nop
		}
	}
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40011400 	.word	0x40011400
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800

08001370 <led_sel>:

void led_sel(uint8_t channel)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_SEL_GPIO_Port, IN1_SEL_Pin,   GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001380:	482d      	ldr	r0, [pc, #180]	; (8001438 <led_sel+0xc8>)
 8001382:	f003 ff34 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_SEL_GPIO_Port, IN2_SEL_Pin,   GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <led_sel+0xcc>)
 800138c:	f003 ff2f 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT1_SEL_GPIO_Port, OUT1_SEL_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2104      	movs	r1, #4
 8001394:	482a      	ldr	r0, [pc, #168]	; (8001440 <led_sel+0xd0>)
 8001396:	f003 ff2a 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT2_SEL_GPIO_Port, OUT2_SEL_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2120      	movs	r1, #32
 800139e:	4826      	ldr	r0, [pc, #152]	; (8001438 <led_sel+0xc8>)
 80013a0:	f003 ff25 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT3_SEL_GPIO_Port, OUT3_SEL_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013aa:	4825      	ldr	r0, [pc, #148]	; (8001440 <led_sel+0xd0>)
 80013ac:	f003 ff1f 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT4_SEL_GPIO_Port, OUT4_SEL_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <led_sel+0xd4>)
 80013b8:	f003 ff19 	bl	80051ee <HAL_GPIO_WritePin>

	switch(channel)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d835      	bhi.n	800142e <led_sel+0xbe>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <led_sel+0x58>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080013ef 	.word	0x080013ef
 80013d0:	080013fb 	.word	0x080013fb
 80013d4:	08001407 	.word	0x08001407
 80013d8:	08001413 	.word	0x08001413
 80013dc:	08001421 	.word	0x08001421
	{
		case 0: HAL_GPIO_WritePin(IN1_SEL_GPIO_Port, IN1_SEL_Pin,   GPIO_PIN_RESET); break;
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	4814      	ldr	r0, [pc, #80]	; (8001438 <led_sel+0xc8>)
 80013e8:	f003 ff01 	bl	80051ee <HAL_GPIO_WritePin>
 80013ec:	e01f      	b.n	800142e <led_sel+0xbe>
		case 1: HAL_GPIO_WritePin(IN2_SEL_GPIO_Port, IN2_SEL_Pin,   GPIO_PIN_RESET); break;
 80013ee:	2200      	movs	r2, #0
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <led_sel+0xcc>)
 80013f4:	f003 fefb 	bl	80051ee <HAL_GPIO_WritePin>
 80013f8:	e019      	b.n	800142e <led_sel+0xbe>
		case 2: HAL_GPIO_WritePin(OUT1_SEL_GPIO_Port, OUT1_SEL_Pin, GPIO_PIN_RESET); break;
 80013fa:	2200      	movs	r2, #0
 80013fc:	2104      	movs	r1, #4
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <led_sel+0xd0>)
 8001400:	f003 fef5 	bl	80051ee <HAL_GPIO_WritePin>
 8001404:	e013      	b.n	800142e <led_sel+0xbe>
		case 3: HAL_GPIO_WritePin(OUT2_SEL_GPIO_Port, OUT2_SEL_Pin, GPIO_PIN_RESET); break;
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <led_sel+0xc8>)
 800140c:	f003 feef 	bl	80051ee <HAL_GPIO_WritePin>
 8001410:	e00d      	b.n	800142e <led_sel+0xbe>
		case 4: HAL_GPIO_WritePin(OUT3_SEL_GPIO_Port, OUT3_SEL_Pin, GPIO_PIN_RESET); break;
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <led_sel+0xd0>)
 800141a:	f003 fee8 	bl	80051ee <HAL_GPIO_WritePin>
 800141e:	e006      	b.n	800142e <led_sel+0xbe>
		case 5: HAL_GPIO_WritePin(OUT4_SEL_GPIO_Port, OUT4_SEL_Pin, GPIO_PIN_RESET); break;
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <led_sel+0xd4>)
 8001428:	f003 fee1 	bl	80051ee <HAL_GPIO_WritePin>
 800142c:	bf00      	nop
	}
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40011400 	.word	0x40011400
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40010800 	.word	0x40010800
 8001444:	40011000 	.word	0x40011000

08001448 <baca_tombol>:

uint8_t baca_tombol(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
	uint8_t ret_data = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	71fb      	strb	r3, [r7, #7]

	     if(HAL_GPIO_ReadPin(IN1_GPIO_Port,  IN1_Pin ) == 0){ ret_data = 1;  }
 8001452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001456:	4836      	ldr	r0, [pc, #216]	; (8001530 <baca_tombol+0xe8>)
 8001458:	f003 feb2 	bl	80051c0 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <baca_tombol+0x20>
 8001462:	2301      	movs	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e05e      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(IN2_GPIO_Port,  IN2_Pin ) == 0){ ret_data = 2;  }
 8001468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146c:	4830      	ldr	r0, [pc, #192]	; (8001530 <baca_tombol+0xe8>)
 800146e:	f003 fea7 	bl	80051c0 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <baca_tombol+0x36>
 8001478:	2302      	movs	r3, #2
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	e053      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(OUT2_GPIO_Port, OUT2_Pin) == 0){ ret_data = 3;  }
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	482b      	ldr	r0, [pc, #172]	; (8001530 <baca_tombol+0xe8>)
 8001484:	f003 fe9c 	bl	80051c0 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <baca_tombol+0x4c>
 800148e:	2303      	movs	r3, #3
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e048      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(OUT1_GPIO_Port, OUT1_Pin) == 0){ ret_data = 4;  }
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	4825      	ldr	r0, [pc, #148]	; (8001530 <baca_tombol+0xe8>)
 800149a:	f003 fe91 	bl	80051c0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <baca_tombol+0x62>
 80014a4:	2304      	movs	r3, #4
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	e03d      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(OUT3_GPIO_Port, OUT3_Pin) == 0){ ret_data = 5;  }
 80014aa:	2140      	movs	r1, #64	; 0x40
 80014ac:	4821      	ldr	r0, [pc, #132]	; (8001534 <baca_tombol+0xec>)
 80014ae:	f003 fe87 	bl	80051c0 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <baca_tombol+0x76>
 80014b8:	2305      	movs	r3, #5
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	e033      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(OUT4_GPIO_Port, OUT4_Pin) == 0){ ret_data = 6;  }
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	481c      	ldr	r0, [pc, #112]	; (8001534 <baca_tombol+0xec>)
 80014c2:	f003 fe7d 	bl	80051c0 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <baca_tombol+0x8a>
 80014cc:	2306      	movs	r3, #6
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	e029      	b.n	8001526 <baca_tombol+0xde>

	else if(HAL_GPIO_ReadPin(MUTE_GPIO_Port,  MUTE_Pin ) == 0){ ret_data = 7;  }
 80014d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <baca_tombol+0xe8>)
 80014d8:	f003 fe72 	bl	80051c0 <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <baca_tombol+0xa0>
 80014e2:	2307      	movs	r3, #7
 80014e4:	71fb      	strb	r3, [r7, #7]
 80014e6:	e01e      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin) == 0){ ret_data = 8;  }
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <baca_tombol+0xe8>)
 80014ee:	f003 fe67 	bl	80051c0 <HAL_GPIO_ReadPin>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <baca_tombol+0xb6>
 80014f8:	2308      	movs	r3, #8
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	e013      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(PAGE_GPIO_Port,  PAGE_Pin ) == 0){ ret_data = 9;  }
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <baca_tombol+0xe8>)
 8001502:	f003 fe5d 	bl	80051c0 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <baca_tombol+0xca>
 800150c:	2309      	movs	r3, #9
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	e009      	b.n	8001526 <baca_tombol+0xde>
	else if(HAL_GPIO_ReadPin(SAVE_GPIO_Port,  SAVE_Pin ) == 0){ ret_data = 10; }
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <baca_tombol+0xe8>)
 8001518:	f003 fe52 	bl	80051c0 <HAL_GPIO_ReadPin>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <baca_tombol+0xde>
 8001522:	230a      	movs	r3, #10
 8001524:	71fb      	strb	r3, [r7, #7]

	return ret_data;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40011800 	.word	0x40011800
 8001534:	40011000 	.word	0x40011000

08001538 <tampil_parametrik>:

void tampil_parametrik(uint8_t pos, uint8_t y_pos)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
	uint8_t band  = pos/3;
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <tampil_parametrik+0x138>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
	uint8_t index = pos-(band*3);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	461a      	mov	r2, r3
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b2da      	uxtb	r2, r3
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4413      	add	r3, r2
 8001562:	73bb      	strb	r3, [r7, #14]

	switch(index)
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d05f      	beq.n	800162a <tampil_parametrik+0xf2>
 800156a:	2b02      	cmp	r3, #2
 800156c:	dc7b      	bgt.n	8001666 <tampil_parametrik+0x12e>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <tampil_parametrik+0x40>
 8001572:	2b01      	cmp	r3, #1
 8001574:	d021      	beq.n	80015ba <tampil_parametrik+0x82>
		case 2 :
			lcd_set_cursor(2, y_pos); lcd_print("Qu:         ");
			lcd_set_cursor(6, y_pos); lcd_float(parametric[channel][pos],1);
		break;
	}
}
 8001576:	e076      	b.n	8001666 <tampil_parametrik+0x12e>
			lcd_set_cursor(2, y_pos); lcd_print("Fc:       Hz");
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	4619      	mov	r1, r3
 800157c:	2002      	movs	r0, #2
 800157e:	f007 fa1f 	bl	80089c0 <lcd_set_cursor>
 8001582:	483c      	ldr	r0, [pc, #240]	; (8001674 <tampil_parametrik+0x13c>)
 8001584:	f007 fa00 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos); lcd_int((int)parametric[channel][pos]);
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	4619      	mov	r1, r3
 800158c:	2006      	movs	r0, #6
 800158e:	f007 fa17 	bl	80089c0 <lcd_set_cursor>
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <tampil_parametrik+0x140>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	4938      	ldr	r1, [pc, #224]	; (800167c <tampil_parametrik+0x144>)
 800159c:	4603      	mov	r3, r0
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4403      	add	r3, r0
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fdfc 	bl	80011a8 <__aeabi_f2iz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fa22 	bl	80089fc <lcd_int>
		break;
 80015b8:	e055      	b.n	8001666 <tampil_parametrik+0x12e>
			lcd_set_cursor(2, y_pos); lcd_print("Gn:       dB");
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	4619      	mov	r1, r3
 80015be:	2002      	movs	r0, #2
 80015c0:	f007 f9fe 	bl	80089c0 <lcd_set_cursor>
 80015c4:	482e      	ldr	r0, [pc, #184]	; (8001680 <tampil_parametrik+0x148>)
 80015c6:	f007 f9df 	bl	8008988 <lcd_print>
			if(parametric[channel][pos] < 0){ lcd_set_cursor(5, y_pos); }
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <tampil_parametrik+0x140>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	492a      	ldr	r1, [pc, #168]	; (800167c <tampil_parametrik+0x144>)
 80015d4:	4603      	mov	r3, r0
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4403      	add	r3, r0
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fdb6 	bl	8001158 <__aeabi_fcmplt>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <tampil_parametrik+0xc6>
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	2005      	movs	r0, #5
 80015f8:	f007 f9e2 	bl	80089c0 <lcd_set_cursor>
 80015fc:	e004      	b.n	8001608 <tampil_parametrik+0xd0>
			else{ lcd_set_cursor(6, y_pos); }
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	4619      	mov	r1, r3
 8001602:	2006      	movs	r0, #6
 8001604:	f007 f9dc 	bl	80089c0 <lcd_set_cursor>
			lcd_float(parametric[channel][pos],2);
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <tampil_parametrik+0x140>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	79fa      	ldrb	r2, [r7, #7]
 8001610:	491a      	ldr	r1, [pc, #104]	; (800167c <tampil_parametrik+0x144>)
 8001612:	4603      	mov	r3, r0
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4403      	add	r3, r0
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001620:	2102      	movs	r1, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f007 fa00 	bl	8008a28 <lcd_float>
		break;
 8001628:	e01d      	b.n	8001666 <tampil_parametrik+0x12e>
			lcd_set_cursor(2, y_pos); lcd_print("Qu:         ");
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	4619      	mov	r1, r3
 800162e:	2002      	movs	r0, #2
 8001630:	f007 f9c6 	bl	80089c0 <lcd_set_cursor>
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <tampil_parametrik+0x14c>)
 8001636:	f007 f9a7 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos); lcd_float(parametric[channel][pos],1);
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	4619      	mov	r1, r3
 800163e:	2006      	movs	r0, #6
 8001640:	f007 f9be 	bl	80089c0 <lcd_set_cursor>
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <tampil_parametrik+0x140>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	490b      	ldr	r1, [pc, #44]	; (800167c <tampil_parametrik+0x144>)
 800164e:	4603      	mov	r3, r0
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4403      	add	r3, r0
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800165c:	2101      	movs	r1, #1
 800165e:	4618      	mov	r0, r3
 8001660:	f007 f9e2 	bl	8008a28 <lcd_float>
		break;
 8001664:	bf00      	nop
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	aaaaaaab 	.word	0xaaaaaaab
 8001674:	0800d998 	.word	0x0800d998
 8001678:	20000214 	.word	0x20000214
 800167c:	200003e8 	.word	0x200003e8
 8001680:	0800d9a8 	.word	0x0800d9a8
 8001684:	0800d9b8 	.word	0x0800d9b8

08001688 <tampil_crossover>:

void tampil_crossover(uint8_t pos, uint8_t y_pos)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
	switch(pos)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b06      	cmp	r3, #6
 800169c:	f200 8164 	bhi.w	8001968 <tampil_crossover+0x2e0>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <tampil_crossover+0x20>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016c5 	.word	0x080016c5
 80016ac:	08001703 	.word	0x08001703
 80016b0:	08001793 	.word	0x08001793
 80016b4:	080017d3 	.word	0x080017d3
 80016b8:	08001863 	.word	0x08001863
 80016bc:	080018b3 	.word	0x080018b3
 80016c0:	0800191f 	.word	0x0800191f
	{
		case 0 :
			lcd_set_cursor(0, y_pos); lcd_print("LPF :       Hz");
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	4619      	mov	r1, r3
 80016c8:	2000      	movs	r0, #0
 80016ca:	f007 f979 	bl	80089c0 <lcd_set_cursor>
 80016ce:	48a8      	ldr	r0, [pc, #672]	; (8001970 <tampil_crossover+0x2e8>)
 80016d0:	f007 f95a 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos); lcd_int((int)crossover[channel-2][0]);
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	4619      	mov	r1, r3
 80016d8:	2006      	movs	r0, #6
 80016da:	f007 f971 	bl	80089c0 <lcd_set_cursor>
 80016de:	4ba5      	ldr	r3, [pc, #660]	; (8001974 <tampil_crossover+0x2ec>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	1e9a      	subs	r2, r3, #2
 80016e4:	49a4      	ldr	r1, [pc, #656]	; (8001978 <tampil_crossover+0x2f0>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd58 	bl	80011a8 <__aeabi_f2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f97e 	bl	80089fc <lcd_int>
		break;
 8001700:	e132      	b.n	8001968 <tampil_crossover+0x2e0>
		case 1 :
			lcd_set_cursor(0, y_pos); lcd_print("Type:         ");
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	4619      	mov	r1, r3
 8001706:	2000      	movs	r0, #0
 8001708:	f007 f95a 	bl	80089c0 <lcd_set_cursor>
 800170c:	489b      	ldr	r0, [pc, #620]	; (800197c <tampil_crossover+0x2f4>)
 800170e:	f007 f93b 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos);
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	4619      	mov	r1, r3
 8001716:	2006      	movs	r0, #6
 8001718:	f007 f952 	bl	80089c0 <lcd_set_cursor>
			switch((int)(int)crossover[channel-2][1])
 800171c:	4b95      	ldr	r3, [pc, #596]	; (8001974 <tampil_crossover+0x2ec>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	1e9a      	subs	r2, r3, #2
 8001722:	4995      	ldr	r1, [pc, #596]	; (8001978 <tampil_crossover+0x2f0>)
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fd38 	bl	80011a8 <__aeabi_f2iz>
 8001738:	4603      	mov	r3, r0
 800173a:	2b05      	cmp	r3, #5
 800173c:	f200 8111 	bhi.w	8001962 <tampil_crossover+0x2da>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <tampil_crossover+0xc0>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001761 	.word	0x08001761
 800174c:	08001769 	.word	0x08001769
 8001750:	08001771 	.word	0x08001771
 8001754:	08001779 	.word	0x08001779
 8001758:	08001781 	.word	0x08001781
 800175c:	08001789 	.word	0x08001789
			{
				case 0 : lcd_print("12bessel"); break;
 8001760:	4887      	ldr	r0, [pc, #540]	; (8001980 <tampil_crossover+0x2f8>)
 8001762:	f007 f911 	bl	8008988 <lcd_print>
 8001766:	e013      	b.n	8001790 <tampil_crossover+0x108>
				case 1 : lcd_print("24bessel"); break;
 8001768:	4886      	ldr	r0, [pc, #536]	; (8001984 <tampil_crossover+0x2fc>)
 800176a:	f007 f90d 	bl	8008988 <lcd_print>
 800176e:	e00f      	b.n	8001790 <tampil_crossover+0x108>
				case 2 : lcd_print("48bessel"); break;
 8001770:	4885      	ldr	r0, [pc, #532]	; (8001988 <tampil_crossover+0x300>)
 8001772:	f007 f909 	bl	8008988 <lcd_print>
 8001776:	e00b      	b.n	8001790 <tampil_crossover+0x108>
				case 3 : lcd_print("12butter"); break;
 8001778:	4884      	ldr	r0, [pc, #528]	; (800198c <tampil_crossover+0x304>)
 800177a:	f007 f905 	bl	8008988 <lcd_print>
 800177e:	e007      	b.n	8001790 <tampil_crossover+0x108>
				case 4 : lcd_print("24butter"); break;
 8001780:	4883      	ldr	r0, [pc, #524]	; (8001990 <tampil_crossover+0x308>)
 8001782:	f007 f901 	bl	8008988 <lcd_print>
 8001786:	e003      	b.n	8001790 <tampil_crossover+0x108>
				case 5 : lcd_print("48butter"); break;
 8001788:	4882      	ldr	r0, [pc, #520]	; (8001994 <tampil_crossover+0x30c>)
 800178a:	f007 f8fd 	bl	8008988 <lcd_print>
 800178e:	bf00      	nop
			}
		break;
 8001790:	e0e7      	b.n	8001962 <tampil_crossover+0x2da>
		case 2 :
			lcd_set_cursor(0, y_pos); lcd_print("HPF :       Hz");
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	4619      	mov	r1, r3
 8001796:	2000      	movs	r0, #0
 8001798:	f007 f912 	bl	80089c0 <lcd_set_cursor>
 800179c:	487e      	ldr	r0, [pc, #504]	; (8001998 <tampil_crossover+0x310>)
 800179e:	f007 f8f3 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos); lcd_int((int)crossover[channel-2][2]);
 80017a2:	79bb      	ldrb	r3, [r7, #6]
 80017a4:	4619      	mov	r1, r3
 80017a6:	2006      	movs	r0, #6
 80017a8:	f007 f90a 	bl	80089c0 <lcd_set_cursor>
 80017ac:	4b71      	ldr	r3, [pc, #452]	; (8001974 <tampil_crossover+0x2ec>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	1e9a      	subs	r2, r3, #2
 80017b2:	4971      	ldr	r1, [pc, #452]	; (8001978 <tampil_crossover+0x2f0>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcf0 	bl	80011a8 <__aeabi_f2iz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 f916 	bl	80089fc <lcd_int>
		break;
 80017d0:	e0ca      	b.n	8001968 <tampil_crossover+0x2e0>
		case 3 :
			lcd_set_cursor(0, y_pos); lcd_print("Type:         ");
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	4619      	mov	r1, r3
 80017d6:	2000      	movs	r0, #0
 80017d8:	f007 f8f2 	bl	80089c0 <lcd_set_cursor>
 80017dc:	4867      	ldr	r0, [pc, #412]	; (800197c <tampil_crossover+0x2f4>)
 80017de:	f007 f8d3 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2006      	movs	r0, #6
 80017e8:	f007 f8ea 	bl	80089c0 <lcd_set_cursor>
			switch((int)(int)crossover[channel-2][3])
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <tampil_crossover+0x2ec>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	1e9a      	subs	r2, r3, #2
 80017f2:	4961      	ldr	r1, [pc, #388]	; (8001978 <tampil_crossover+0x2f0>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	330c      	adds	r3, #12
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fcd0 	bl	80011a8 <__aeabi_f2iz>
 8001808:	4603      	mov	r3, r0
 800180a:	2b05      	cmp	r3, #5
 800180c:	f200 80ab 	bhi.w	8001966 <tampil_crossover+0x2de>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <tampil_crossover+0x190>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001831 	.word	0x08001831
 800181c:	08001839 	.word	0x08001839
 8001820:	08001841 	.word	0x08001841
 8001824:	08001849 	.word	0x08001849
 8001828:	08001851 	.word	0x08001851
 800182c:	08001859 	.word	0x08001859
			{
				case 0 : lcd_print("12bessel"); break;
 8001830:	4853      	ldr	r0, [pc, #332]	; (8001980 <tampil_crossover+0x2f8>)
 8001832:	f007 f8a9 	bl	8008988 <lcd_print>
 8001836:	e013      	b.n	8001860 <tampil_crossover+0x1d8>
				case 1 : lcd_print("24bessel"); break;
 8001838:	4852      	ldr	r0, [pc, #328]	; (8001984 <tampil_crossover+0x2fc>)
 800183a:	f007 f8a5 	bl	8008988 <lcd_print>
 800183e:	e00f      	b.n	8001860 <tampil_crossover+0x1d8>
				case 2 : lcd_print("48bessel"); break;
 8001840:	4851      	ldr	r0, [pc, #324]	; (8001988 <tampil_crossover+0x300>)
 8001842:	f007 f8a1 	bl	8008988 <lcd_print>
 8001846:	e00b      	b.n	8001860 <tampil_crossover+0x1d8>
				case 3 : lcd_print("12butter"); break;
 8001848:	4850      	ldr	r0, [pc, #320]	; (800198c <tampil_crossover+0x304>)
 800184a:	f007 f89d 	bl	8008988 <lcd_print>
 800184e:	e007      	b.n	8001860 <tampil_crossover+0x1d8>
				case 4 : lcd_print("24butter"); break;
 8001850:	484f      	ldr	r0, [pc, #316]	; (8001990 <tampil_crossover+0x308>)
 8001852:	f007 f899 	bl	8008988 <lcd_print>
 8001856:	e003      	b.n	8001860 <tampil_crossover+0x1d8>
				case 5 : lcd_print("48butter"); break;
 8001858:	484e      	ldr	r0, [pc, #312]	; (8001994 <tampil_crossover+0x30c>)
 800185a:	f007 f895 	bl	8008988 <lcd_print>
 800185e:	bf00      	nop
			}
		break;
 8001860:	e081      	b.n	8001966 <tampil_crossover+0x2de>
		case 4 :
			lcd_set_cursor(0, y_pos); lcd_print("Fasa:         ");
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	4619      	mov	r1, r3
 8001866:	2000      	movs	r0, #0
 8001868:	f007 f8aa 	bl	80089c0 <lcd_set_cursor>
 800186c:	484b      	ldr	r0, [pc, #300]	; (800199c <tampil_crossover+0x314>)
 800186e:	f007 f88b 	bl	8008988 <lcd_print>
			lcd_set_cursor(6, y_pos);
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	4619      	mov	r1, r3
 8001876:	2006      	movs	r0, #6
 8001878:	f007 f8a2 	bl	80089c0 <lcd_set_cursor>
			if(crossover[channel-2][4] < 0){ lcd_print("linier"); }
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <tampil_crossover+0x2ec>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	1e9a      	subs	r2, r3, #2
 8001882:	493d      	ldr	r1, [pc, #244]	; (8001978 <tampil_crossover+0x2f0>)
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3310      	adds	r3, #16
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc5e 	bl	8001158 <__aeabi_fcmplt>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <tampil_crossover+0x222>
 80018a2:	483f      	ldr	r0, [pc, #252]	; (80019a0 <tampil_crossover+0x318>)
 80018a4:	f007 f870 	bl	8008988 <lcd_print>
			else{ lcd_print("invert"); }
		break;
 80018a8:	e05e      	b.n	8001968 <tampil_crossover+0x2e0>
			else{ lcd_print("invert"); }
 80018aa:	483e      	ldr	r0, [pc, #248]	; (80019a4 <tampil_crossover+0x31c>)
 80018ac:	f007 f86c 	bl	8008988 <lcd_print>
		break;
 80018b0:	e05a      	b.n	8001968 <tampil_crossover+0x2e0>
		case 5 :
			lcd_set_cursor(0, y_pos); lcd_print("Lim :       dB");
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	4619      	mov	r1, r3
 80018b6:	2000      	movs	r0, #0
 80018b8:	f007 f882 	bl	80089c0 <lcd_set_cursor>
 80018bc:	483a      	ldr	r0, [pc, #232]	; (80019a8 <tampil_crossover+0x320>)
 80018be:	f007 f863 	bl	8008988 <lcd_print>
			if(crossover[channel-2][5] < 0){ lcd_set_cursor(5, y_pos); }
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <tampil_crossover+0x2ec>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	1e9a      	subs	r2, r3, #2
 80018c8:	492b      	ldr	r1, [pc, #172]	; (8001978 <tampil_crossover+0x2f0>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3314      	adds	r3, #20
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fc3b 	bl	8001158 <__aeabi_fcmplt>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <tampil_crossover+0x26c>
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	4619      	mov	r1, r3
 80018ec:	2005      	movs	r0, #5
 80018ee:	f007 f867 	bl	80089c0 <lcd_set_cursor>
 80018f2:	e004      	b.n	80018fe <tampil_crossover+0x276>
			else{ lcd_set_cursor(6, y_pos); }
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4619      	mov	r1, r3
 80018f8:	2006      	movs	r0, #6
 80018fa:	f007 f861 	bl	80089c0 <lcd_set_cursor>
			lcd_float(crossover[channel-2][5],2);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <tampil_crossover+0x2ec>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	1e9a      	subs	r2, r3, #2
 8001904:	491c      	ldr	r1, [pc, #112]	; (8001978 <tampil_crossover+0x2f0>)
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	3314      	adds	r3, #20
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f007 f886 	bl	8008a28 <lcd_float>
		break;
 800191c:	e024      	b.n	8001968 <tampil_crossover+0x2e0>
		case 6 :
			lcd_set_cursor(0, y_pos);
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	4619      	mov	r1, r3
 8001922:	2000      	movs	r0, #0
 8001924:	f007 f84c 	bl	80089c0 <lcd_set_cursor>
			switch((int)crossover[channel-2][6])
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <tampil_crossover+0x2ec>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	1e9a      	subs	r2, r3, #2
 800192e:	4912      	ldr	r1, [pc, #72]	; (8001978 <tampil_crossover+0x2f0>)
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	3318      	adds	r3, #24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fc32 	bl	80011a8 <__aeabi_f2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <tampil_crossover+0x2c8>
 800194a:	2b01      	cmp	r3, #1
 800194c:	d004      	beq.n	8001958 <tampil_crossover+0x2d0>
			{
			    case 0 : lcd_print("From: input 1 "); break;
			    case 1 : lcd_print("From: input 2 "); break;
			}
		break;
 800194e:	e00b      	b.n	8001968 <tampil_crossover+0x2e0>
			    case 0 : lcd_print("From: input 1 "); break;
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <tampil_crossover+0x324>)
 8001952:	f007 f819 	bl	8008988 <lcd_print>
 8001956:	e003      	b.n	8001960 <tampil_crossover+0x2d8>
			    case 1 : lcd_print("From: input 2 "); break;
 8001958:	4815      	ldr	r0, [pc, #84]	; (80019b0 <tampil_crossover+0x328>)
 800195a:	f007 f815 	bl	8008988 <lcd_print>
 800195e:	bf00      	nop
		break;
 8001960:	e002      	b.n	8001968 <tampil_crossover+0x2e0>
		break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <tampil_crossover+0x2e0>
		break;
 8001966:	bf00      	nop
	}
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	0800d9c8 	.word	0x0800d9c8
 8001974:	20000214 	.word	0x20000214
 8001978:	20000378 	.word	0x20000378
 800197c:	0800d9d8 	.word	0x0800d9d8
 8001980:	0800d9e8 	.word	0x0800d9e8
 8001984:	0800d9f4 	.word	0x0800d9f4
 8001988:	0800da00 	.word	0x0800da00
 800198c:	0800da0c 	.word	0x0800da0c
 8001990:	0800da18 	.word	0x0800da18
 8001994:	0800da24 	.word	0x0800da24
 8001998:	0800da30 	.word	0x0800da30
 800199c:	0800da40 	.word	0x0800da40
 80019a0:	0800da50 	.word	0x0800da50
 80019a4:	0800da58 	.word	0x0800da58
 80019a8:	0800da60 	.word	0x0800da60
 80019ac:	0800da70 	.word	0x0800da70
 80019b0:	0800da80 	.word	0x0800da80

080019b4 <page1>:

void page1(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af02      	add	r7, sp, #8
	uint8_t band, index;

	switch(sub_page)
 80019ba:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <page1+0x1f0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <page1+0x16>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	f000 80aa 	beq.w	8001b1c <page1+0x168>
				}
				lcd_refresh = true;
			}
		break;
	}
}
 80019c8:	e2c5      	b.n	8001f56 <page1+0x5a2>
			if(lcd_refresh == true)
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <page1+0x1f4>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d076      	beq.n	8001ac0 <page1+0x10c>
				lcd_set_cursor(0,0); lcd_print("input ");
 80019d2:	2100      	movs	r1, #0
 80019d4:	2000      	movs	r0, #0
 80019d6:	f006 fff3 	bl	80089c0 <lcd_set_cursor>
 80019da:	4874      	ldr	r0, [pc, #464]	; (8001bac <page1+0x1f8>)
 80019dc:	f006 ffd4 	bl	8008988 <lcd_print>
				lcd_set_cursor(6,0); lcd_int(channel+1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2006      	movs	r0, #6
 80019e4:	f006 ffec 	bl	80089c0 <lcd_set_cursor>
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <page1+0x1fc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 f804 	bl	80089fc <lcd_int>
				lcd_set_cursor(0,1); lcd_print("gain :        dB");
 80019f4:	2101      	movs	r1, #1
 80019f6:	2000      	movs	r0, #0
 80019f8:	f006 ffe2 	bl	80089c0 <lcd_set_cursor>
 80019fc:	486d      	ldr	r0, [pc, #436]	; (8001bb4 <page1+0x200>)
 80019fe:	f006 ffc3 	bl	8008988 <lcd_print>
				lcd_set_cursor(7,1); lcd_float(gain[channel],2);
 8001a02:	2101      	movs	r1, #1
 8001a04:	2007      	movs	r0, #7
 8001a06:	f006 ffdb 	bl	80089c0 <lcd_set_cursor>
 8001a0a:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <page1+0x1fc>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b69      	ldr	r3, [pc, #420]	; (8001bb8 <page1+0x204>)
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	2102      	movs	r1, #2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 f805 	bl	8008a28 <lcd_float>
				lcd_set_cursor(12,0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	200c      	movs	r0, #12
 8001a22:	f006 ffcd 	bl	80089c0 <lcd_set_cursor>
				if(mute[channel] == false)
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <page1+0x1fc>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <page1+0x208>)
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01f      	beq.n	8001a7a <page1+0xc6>
					lcd_print("    ");
 8001a3a:	4861      	ldr	r0, [pc, #388]	; (8001bc0 <page1+0x20c>)
 8001a3c:	f006 ffa4 	bl	8008988 <lcd_print>
					uint32_t nilai_gain = hitung_gain(gain[channel]);
 8001a40:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <page1+0x1fc>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <page1+0x204>)
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f005 fd41 	bl	80074d4 <hitung_gain>
 8001a52:	60b8      	str	r0, [r7, #8]
					dsp_load_address(0, 2069, channel);
 8001a54:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <page1+0x1fc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f640 0115 	movw	r1, #2069	; 0x815
 8001a60:	2000      	movs	r0, #0
 8001a62:	f006 fc95 	bl	8008390 <dsp_load_address>
					dsp_load_parameter(0, 2064, nilai_gain);
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f006 fcd7 	bl	8008420 <dsp_load_parameter>
					dsp_safe_flag(0);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f006 fd24 	bl	80084c0 <dsp_safe_flag>
 8001a78:	e014      	b.n	8001aa4 <page1+0xf0>
					lcd_print("mute");
 8001a7a:	4852      	ldr	r0, [pc, #328]	; (8001bc4 <page1+0x210>)
 8001a7c:	f006 ff84 	bl	8008988 <lcd_print>
					dsp_load_address(0, 2069, channel);
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <page1+0x1fc>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	f640 0115 	movw	r1, #2069	; 0x815
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f006 fc7f 	bl	8008390 <dsp_load_address>
					dsp_load_parameter(0, 2064, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f006 fcc1 	bl	8008420 <dsp_load_parameter>
					dsp_safe_flag(0);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f006 fd0e 	bl	80084c0 <dsp_safe_flag>
				led_mute(channel, mute[channel]);
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <page1+0x1fc>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <page1+0x1fc>)
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4a43      	ldr	r2, [pc, #268]	; (8001bbc <page1+0x208>)
 8001ab0:	5c52      	ldrb	r2, [r2, r1]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fbd1 	bl	800125c <led_mute>
				lcd_refresh = false;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <page1+0x1f4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
			mod = encoder_read();
 8001ac0:	f007 f818 	bl	8008af4 <encoder_read>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <page1+0x214>)
 8001aca:	701a      	strb	r2, [r3, #0]
			if(encoder_change(mod) == true)
 8001acc:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <page1+0x214>)
 8001ace:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f007 f8a1 	bl	8008c1a <encoder_change>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8238 	beq.w	8001f50 <page1+0x59c>
				if(mute[channel] == false)
 8001ae0:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <page1+0x1fc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <page1+0x208>)
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 822d 	beq.w	8001f50 <page1+0x59c>
					encoder_handler(mod, &gain[channel], -15, 15, 0.25);
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <page1+0x214>)
 8001af8:	f993 0000 	ldrsb.w	r0, [r3]
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <page1+0x1fc>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <page1+0x204>)
 8001b04:	1899      	adds	r1, r3, r2
 8001b06:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <page1+0x218>)
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <page1+0x21c>)
 8001b10:	f007 f848 	bl	8008ba4 <encoder_handler>
					lcd_refresh = true;
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <page1+0x1f4>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
		break;
 8001b1a:	e219      	b.n	8001f50 <page1+0x59c>
			if(lcd_refresh == true)
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <page1+0x1f4>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 814c 	beq.w	8001dbe <page1+0x40a>
				     if(pos > prev){ layer = 1; }
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <page1+0x220>)
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <page1+0x224>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d903      	bls.n	8001b3a <page1+0x186>
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <page1+0x228>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e008      	b.n	8001b4c <page1+0x198>
				else if(pos < prev){ layer = 0; }
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <page1+0x220>)
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <page1+0x224>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d202      	bcs.n	8001b4c <page1+0x198>
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <page1+0x228>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
				prev  = pos;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <page1+0x220>)
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <page1+0x224>)
 8001b52:	701a      	strb	r2, [r3, #0]
				band  = pos/3;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <page1+0x220>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <page1+0x22c>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	77fb      	strb	r3, [r7, #31]
				lcd_set_cursor(0,0); lcd_int(band+1);
 8001b62:	2100      	movs	r1, #0
 8001b64:	2000      	movs	r0, #0
 8001b66:	f006 ff2b 	bl	80089c0 <lcd_set_cursor>
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 ff44 	bl	80089fc <lcd_int>
				lcd_set_cursor(0,1); lcd_print("^");
 8001b74:	2101      	movs	r1, #1
 8001b76:	2000      	movs	r0, #0
 8001b78:	f006 ff22 	bl	80089c0 <lcd_set_cursor>
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <page1+0x230>)
 8001b7e:	f006 ff03 	bl	8008988 <lcd_print>
				lcd_set_cursor(15,layer);
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <page1+0x228>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	200f      	movs	r0, #15
 8001b8a:	f006 ff19 	bl	80089c0 <lcd_set_cursor>
				if(setting == false)
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <page1+0x234>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d029      	beq.n	8001bf0 <page1+0x23c>
					lcd_print("<");
 8001b9c:	4813      	ldr	r0, [pc, #76]	; (8001bec <page1+0x238>)
 8001b9e:	f006 fef3 	bl	8008988 <lcd_print>
 8001ba2:	e0de      	b.n	8001d62 <page1+0x3ae>
 8001ba4:	20000215 	.word	0x20000215
 8001ba8:	20000001 	.word	0x20000001
 8001bac:	0800da90 	.word	0x0800da90
 8001bb0:	20000214 	.word	0x20000214
 8001bb4:	0800da98 	.word	0x0800da98
 8001bb8:	20000448 	.word	0x20000448
 8001bbc:	2000031c 	.word	0x2000031c
 8001bc0:	0800daac 	.word	0x0800daac
 8001bc4:	0800dab4 	.word	0x0800dab4
 8001bc8:	2000021a 	.word	0x2000021a
 8001bcc:	41700000 	.word	0x41700000
 8001bd0:	c1700000 	.word	0xc1700000
 8001bd4:	20000216 	.word	0x20000216
 8001bd8:	20000217 	.word	0x20000217
 8001bdc:	20000218 	.word	0x20000218
 8001be0:	aaaaaaab 	.word	0xaaaaaaab
 8001be4:	0800dabc 	.word	0x0800dabc
 8001be8:	20000219 	.word	0x20000219
 8001bec:	0800dac0 	.word	0x0800dac0
					lcd_print("~");
 8001bf0:	48ba      	ldr	r0, [pc, #744]	; (8001edc <page1+0x528>)
 8001bf2:	f006 fec9 	bl	8008988 <lcd_print>
					float freq = parametric[channel][(band*3)];
 8001bf6:	4bba      	ldr	r3, [pc, #744]	; (8001ee0 <page1+0x52c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	7ffa      	ldrb	r2, [r7, #31]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	441a      	add	r2, r3
 8001c04:	49b7      	ldr	r1, [pc, #732]	; (8001ee4 <page1+0x530>)
 8001c06:	4603      	mov	r3, r0
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4403      	add	r3, r0
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
					float bost = parametric[channel][(band*3)+1];
 8001c16:	4bb2      	ldr	r3, [pc, #712]	; (8001ee0 <page1+0x52c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	7ffa      	ldrb	r2, [r7, #31]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	49af      	ldr	r1, [pc, #700]	; (8001ee4 <page1+0x530>)
 8001c28:	4603      	mov	r3, r0
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4403      	add	r3, r0
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c36:	617b      	str	r3, [r7, #20]
					float qual = parametric[channel][(band*3)+2];
 8001c38:	4ba9      	ldr	r3, [pc, #676]	; (8001ee0 <page1+0x52c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	7ffa      	ldrb	r2, [r7, #31]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	49a6      	ldr	r1, [pc, #664]	; (8001ee4 <page1+0x530>)
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4403      	add	r3, r0
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c58:	613b      	str	r3, [r7, #16]
					hitung_peq(freq, bost, qual, filter_coeff);
 8001c5a:	4ba3      	ldr	r3, [pc, #652]	; (8001ee8 <page1+0x534>)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	69b8      	ldr	r0, [r7, #24]
 8001c62:	f005 fce3 	bl	800762c <hitung_peq>
					dsp_load_address(0, 2069, alamat_paramerik[channel][band]);
 8001c66:	4b9e      	ldr	r3, [pc, #632]	; (8001ee0 <page1+0x52c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
 8001c6e:	499f      	ldr	r1, [pc, #636]	; (8001eec <page1+0x538>)
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f640 0115 	movw	r1, #2069	; 0x815
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f006 fb86 	bl	8008390 <dsp_load_address>
					dsp_load_address(0, 2070, alamat_paramerik[channel][band]+1);
 8001c84:	4b96      	ldr	r3, [pc, #600]	; (8001ee0 <page1+0x52c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	4997      	ldr	r1, [pc, #604]	; (8001eec <page1+0x538>)
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f640 0116 	movw	r1, #2070	; 0x816
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f006 fb75 	bl	8008390 <dsp_load_address>
					dsp_load_address(0, 2071, alamat_paramerik[channel][band]+2);
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <page1+0x52c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	498f      	ldr	r1, [pc, #572]	; (8001eec <page1+0x538>)
 8001cb0:	0092      	lsls	r2, r2, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f640 0117 	movw	r1, #2071	; 0x817
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f006 fb64 	bl	8008390 <dsp_load_address>
					dsp_load_address(0, 2072, alamat_paramerik[channel][band]+3);
 8001cc8:	4b85      	ldr	r3, [pc, #532]	; (8001ee0 <page1+0x52c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	4986      	ldr	r1, [pc, #536]	; (8001eec <page1+0x538>)
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cda:	3303      	adds	r3, #3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f640 0118 	movw	r1, #2072	; 0x818
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f006 fb53 	bl	8008390 <dsp_load_address>
					dsp_load_address(0, 2073, alamat_paramerik[channel][band]+4);
 8001cea:	4b7d      	ldr	r3, [pc, #500]	; (8001ee0 <page1+0x52c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	497e      	ldr	r1, [pc, #504]	; (8001eec <page1+0x538>)
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	f640 0119 	movw	r1, #2073	; 0x819
 8001d06:	2000      	movs	r0, #0
 8001d08:	f006 fb42 	bl	8008390 <dsp_load_address>
					dsp_load_parameter(0, 2064, filter_coeff[0]);
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <page1+0x534>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8001d16:	2000      	movs	r0, #0
 8001d18:	f006 fb82 	bl	8008420 <dsp_load_parameter>
					dsp_load_parameter(0, 2065, filter_coeff[1]);
 8001d1c:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <page1+0x534>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f640 0111 	movw	r1, #2065	; 0x811
 8001d26:	2000      	movs	r0, #0
 8001d28:	f006 fb7a 	bl	8008420 <dsp_load_parameter>
					dsp_load_parameter(0, 2066, filter_coeff[2]);
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <page1+0x534>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f640 0112 	movw	r1, #2066	; 0x812
 8001d36:	2000      	movs	r0, #0
 8001d38:	f006 fb72 	bl	8008420 <dsp_load_parameter>
					dsp_load_parameter(0, 2067, filter_coeff[3]);
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <page1+0x534>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f640 0113 	movw	r1, #2067	; 0x813
 8001d46:	2000      	movs	r0, #0
 8001d48:	f006 fb6a 	bl	8008420 <dsp_load_parameter>
					dsp_load_parameter(0, 2068, filter_coeff[4]);
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <page1+0x534>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f640 0114 	movw	r1, #2068	; 0x814
 8001d56:	2000      	movs	r0, #0
 8001d58:	f006 fb62 	bl	8008420 <dsp_load_parameter>
					dsp_safe_flag(0);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f006 fbaf 	bl	80084c0 <dsp_safe_flag>
				tampil_parametrik(pos,layer);
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <page1+0x53c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <page1+0x540>)
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fbe3 	bl	8001538 <tampil_parametrik>
				if(layer == 0){ lcd_set_cursor(15,1); lcd_print(" "); tampil_parametrik(pos+1,1); }
 8001d72:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <page1+0x540>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <page1+0x3e6>
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	200f      	movs	r0, #15
 8001d7e:	f006 fe1f 	bl	80089c0 <lcd_set_cursor>
 8001d82:	485d      	ldr	r0, [pc, #372]	; (8001ef8 <page1+0x544>)
 8001d84:	f006 fe00 	bl	8008988 <lcd_print>
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <page1+0x53c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2101      	movs	r1, #1
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fbd0 	bl	8001538 <tampil_parametrik>
 8001d98:	e00e      	b.n	8001db8 <page1+0x404>
				else          { lcd_set_cursor(15,0); lcd_print(" "); tampil_parametrik(pos-1,0); }
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	200f      	movs	r0, #15
 8001d9e:	f006 fe0f 	bl	80089c0 <lcd_set_cursor>
 8001da2:	4855      	ldr	r0, [pc, #340]	; (8001ef8 <page1+0x544>)
 8001da4:	f006 fdf0 	bl	8008988 <lcd_print>
 8001da8:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <page1+0x53c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fbc0 	bl	8001538 <tampil_parametrik>
				lcd_refresh = false;
 8001db8:	4b50      	ldr	r3, [pc, #320]	; (8001efc <page1+0x548>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
			if(encoder_push() == true)
 8001dbe:	f006 ff3b 	bl	8008c38 <encoder_push>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <page1+0x430>
				if(setting == true){ setting = false; }
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <page1+0x54c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <page1+0x424>
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <page1+0x54c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e002      	b.n	8001dde <page1+0x42a>
				else{ setting = true; }
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <page1+0x54c>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
				lcd_refresh = true;
 8001dde:	4b47      	ldr	r3, [pc, #284]	; (8001efc <page1+0x548>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
			mod = encoder_read();
 8001de4:	f006 fe86 	bl	8008af4 <encoder_read>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b45      	ldr	r3, [pc, #276]	; (8001f04 <page1+0x550>)
 8001dee:	701a      	strb	r2, [r3, #0]
			if(encoder_change(mod) == true)
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <page1+0x550>)
 8001df2:	f993 3000 	ldrsb.w	r3, [r3]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f006 ff0f 	bl	8008c1a <encoder_change>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80a8 	beq.w	8001f54 <page1+0x5a0>
				if(setting == false)
 8001e04:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <page1+0x54c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	f083 0301 	eor.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01b      	beq.n	8001e4a <page1+0x496>
					float buffer = (float)pos;
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <page1+0x53c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ffa8 	bl	8000d6c <__aeabi_ui2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	607b      	str	r3, [r7, #4]
					encoder_handler(mod,&buffer,0,11,1);
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <page1+0x550>)
 8001e22:	f993 0000 	ldrsb.w	r0, [r3]
 8001e26:	1d39      	adds	r1, r7, #4
 8001e28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <page1+0x554>)
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f006 feb6 	bl	8008ba4 <encoder_handler>
					pos = (int)buffer;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f9b4 	bl	80011a8 <__aeabi_f2iz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <page1+0x53c>)
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e07e      	b.n	8001f48 <page1+0x594>
					index = pos-((pos/3)*3);
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <page1+0x53c>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <page1+0x558>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <page1+0x53c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	73fb      	strb	r3, [r7, #15]
					switch(index)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d054      	beq.n	8001f18 <page1+0x564>
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	dc6a      	bgt.n	8001f48 <page1+0x594>
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <page1+0x4c8>
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d017      	beq.n	8001eaa <page1+0x4f6>
 8001e7a:	e065      	b.n	8001f48 <page1+0x594>
							encoder_adaptive_handler(mod,&parametric[channel][pos],20,20000);
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <page1+0x550>)
 8001e7e:	f993 0000 	ldrsb.w	r0, [r3]
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <page1+0x52c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <page1+0x53c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <page1+0x530>)
 8001e9c:	1899      	adds	r1, r3, r2
 8001e9e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ea2:	2214      	movs	r2, #20
 8001ea4:	f006 fee0 	bl	8008c68 <encoder_adaptive_handler>
						break;
 8001ea8:	e04e      	b.n	8001f48 <page1+0x594>
							encoder_handler(mod,&parametric[channel][pos],-20,20,0.25);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <page1+0x550>)
 8001eac:	f993 0000 	ldrsb.w	r0, [r3]
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <page1+0x52c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <page1+0x53c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <page1+0x530>)
 8001eca:	1899      	adds	r1, r3, r2
 8001ecc:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <page1+0x55c>)
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <page1+0x560>)
 8001ed6:	f006 fe65 	bl	8008ba4 <encoder_handler>
						break;
 8001eda:	e035      	b.n	8001f48 <page1+0x594>
 8001edc:	0800dac4 	.word	0x0800dac4
 8001ee0:	20000214 	.word	0x20000214
 8001ee4:	200003e8 	.word	0x200003e8
 8001ee8:	2000021c 	.word	0x2000021c
 8001eec:	0800dc68 	.word	0x0800dc68
 8001ef0:	20000216 	.word	0x20000216
 8001ef4:	20000218 	.word	0x20000218
 8001ef8:	0800dac8 	.word	0x0800dac8
 8001efc:	20000001 	.word	0x20000001
 8001f00:	20000219 	.word	0x20000219
 8001f04:	2000021a 	.word	0x2000021a
 8001f08:	41300000 	.word	0x41300000
 8001f0c:	aaaaaaab 	.word	0xaaaaaaab
 8001f10:	41a00000 	.word	0x41a00000
 8001f14:	c1a00000 	.word	0xc1a00000
							encoder_handler(mod,&parametric[channel][pos],0.2,10,0.1);
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <page1+0x5ac>)
 8001f1a:	f993 0000 	ldrsb.w	r0, [r3]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <page1+0x5b0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <page1+0x5b4>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <page1+0x5b8>)
 8001f38:	1899      	adds	r1, r3, r2
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <page1+0x5bc>)
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <page1+0x5c0>)
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <page1+0x5c4>)
 8001f42:	f006 fe2f 	bl	8008ba4 <encoder_handler>
						break;
 8001f46:	bf00      	nop
				lcd_refresh = true;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <page1+0x5c8>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
		break;
 8001f4e:	e001      	b.n	8001f54 <page1+0x5a0>
		break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <page1+0x5a2>
		break;
 8001f54:	bf00      	nop
}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000021a 	.word	0x2000021a
 8001f64:	20000214 	.word	0x20000214
 8001f68:	20000216 	.word	0x20000216
 8001f6c:	200003e8 	.word	0x200003e8
 8001f70:	3dcccccd 	.word	0x3dcccccd
 8001f74:	41200000 	.word	0x41200000
 8001f78:	3e4ccccd 	.word	0x3e4ccccd
 8001f7c:	20000001 	.word	0x20000001

08001f80 <page2>:

void page2(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af02      	add	r7, sp, #8
	switch(sub_page)
 8001f86:	4bb8      	ldr	r3, [pc, #736]	; (8002268 <page2+0x2e8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <page2+0x18>
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f000 80b2 	beq.w	80020f8 <page2+0x178>
				}
				lcd_refresh = true;
			}
		break;
	}
}
 8001f94:	f000 bda8 	b.w	8002ae8 <page2+0xb68>
			if(lcd_refresh == true)
 8001f98:	4bb4      	ldr	r3, [pc, #720]	; (800226c <page2+0x2ec>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d07c      	beq.n	800209a <page2+0x11a>
				lcd_set_cursor(0,0); lcd_print("output ");
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f006 fd0c 	bl	80089c0 <lcd_set_cursor>
 8001fa8:	48b1      	ldr	r0, [pc, #708]	; (8002270 <page2+0x2f0>)
 8001faa:	f006 fced 	bl	8008988 <lcd_print>
				lcd_set_cursor(7,0); lcd_int(channel-1);
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2007      	movs	r0, #7
 8001fb2:	f006 fd05 	bl	80089c0 <lcd_set_cursor>
 8001fb6:	4baf      	ldr	r3, [pc, #700]	; (8002274 <page2+0x2f4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f006 fd1d 	bl	80089fc <lcd_int>
				lcd_set_cursor(0,1); lcd_print("gain :        dB");
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f006 fcfb 	bl	80089c0 <lcd_set_cursor>
 8001fca:	48ab      	ldr	r0, [pc, #684]	; (8002278 <page2+0x2f8>)
 8001fcc:	f006 fcdc 	bl	8008988 <lcd_print>
				lcd_set_cursor(7,1); lcd_float(gain[channel],2);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2007      	movs	r0, #7
 8001fd4:	f006 fcf4 	bl	80089c0 <lcd_set_cursor>
 8001fd8:	4ba6      	ldr	r3, [pc, #664]	; (8002274 <page2+0x2f4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4ba7      	ldr	r3, [pc, #668]	; (800227c <page2+0x2fc>)
 8001fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f006 fd1e 	bl	8008a28 <lcd_float>
				lcd_set_cursor(12,0);
 8001fec:	2100      	movs	r1, #0
 8001fee:	200c      	movs	r0, #12
 8001ff0:	f006 fce6 	bl	80089c0 <lcd_set_cursor>
				if(mute[channel] == false)
 8001ff4:	4b9f      	ldr	r3, [pc, #636]	; (8002274 <page2+0x2f4>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4ba1      	ldr	r3, [pc, #644]	; (8002280 <page2+0x300>)
 8001ffc:	5c9b      	ldrb	r3, [r3, r2]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d022      	beq.n	800204e <page2+0xce>
					lcd_print("    ");
 8002008:	489e      	ldr	r0, [pc, #632]	; (8002284 <page2+0x304>)
 800200a:	f006 fcbd 	bl	8008988 <lcd_print>
					uint32_t nilai_gain = hitung_gain(gain[channel]);
 800200e:	4b99      	ldr	r3, [pc, #612]	; (8002274 <page2+0x2f4>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4b99      	ldr	r3, [pc, #612]	; (800227c <page2+0x2fc>)
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	4618      	mov	r0, r3
 800201c:	f005 fa5a 	bl	80074d4 <hitung_gain>
 8002020:	60b8      	str	r0, [r7, #8]
					dsp_load_address(0, 2069, alamat_gain[channel]);
 8002022:	4b94      	ldr	r3, [pc, #592]	; (8002274 <page2+0x2f4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4b97      	ldr	r3, [pc, #604]	; (8002288 <page2+0x308>)
 800202a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800202e:	461a      	mov	r2, r3
 8002030:	f640 0115 	movw	r1, #2069	; 0x815
 8002034:	2000      	movs	r0, #0
 8002036:	f006 f9ab 	bl	8008390 <dsp_load_address>
					dsp_load_parameter(0, 2064, nilai_gain);
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002040:	2000      	movs	r0, #0
 8002042:	f006 f9ed 	bl	8008420 <dsp_load_parameter>
					dsp_safe_flag(0);
 8002046:	2000      	movs	r0, #0
 8002048:	f006 fa3a 	bl	80084c0 <dsp_safe_flag>
 800204c:	e017      	b.n	800207e <page2+0xfe>
					lcd_print("mute");
 800204e:	488f      	ldr	r0, [pc, #572]	; (800228c <page2+0x30c>)
 8002050:	f006 fc9a 	bl	8008988 <lcd_print>
					dsp_load_address(0, 2069, alamat_gain[channel]);
 8002054:	4b87      	ldr	r3, [pc, #540]	; (8002274 <page2+0x2f4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <page2+0x308>)
 800205c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002060:	461a      	mov	r2, r3
 8002062:	f640 0115 	movw	r1, #2069	; 0x815
 8002066:	2000      	movs	r0, #0
 8002068:	f006 f992 	bl	8008390 <dsp_load_address>
					dsp_load_parameter(0, 2064, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002072:	2000      	movs	r0, #0
 8002074:	f006 f9d4 	bl	8008420 <dsp_load_parameter>
					dsp_safe_flag(0);
 8002078:	2000      	movs	r0, #0
 800207a:	f006 fa21 	bl	80084c0 <dsp_safe_flag>
				led_mute(channel, mute[channel]);
 800207e:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <page2+0x2f4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4a7c      	ldr	r2, [pc, #496]	; (8002274 <page2+0x2f4>)
 8002084:	7812      	ldrb	r2, [r2, #0]
 8002086:	4611      	mov	r1, r2
 8002088:	4a7d      	ldr	r2, [pc, #500]	; (8002280 <page2+0x300>)
 800208a:	5c52      	ldrb	r2, [r2, r1]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f8e4 	bl	800125c <led_mute>
				lcd_refresh = false;
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <page2+0x2ec>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
			mod = encoder_read();
 800209a:	f006 fd2b 	bl	8008af4 <encoder_read>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <page2+0x310>)
 80020a4:	701a      	strb	r2, [r3, #0]
			if(encoder_change(mod) == true)
 80020a6:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <page2+0x310>)
 80020a8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 fdb4 	bl	8008c1a <encoder_change>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8514 	beq.w	8002ae2 <page2+0xb62>
				if(mute[channel] == false)
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <page2+0x2f4>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <page2+0x300>)
 80020c2:	5c9b      	ldrb	r3, [r3, r2]
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8509 	beq.w	8002ae2 <page2+0xb62>
					encoder_handler(mod, &gain[channel], -15, 15, 0.25);
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <page2+0x310>)
 80020d2:	f993 0000 	ldrsb.w	r0, [r3]
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <page2+0x2f4>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4a67      	ldr	r2, [pc, #412]	; (800227c <page2+0x2fc>)
 80020de:	1899      	adds	r1, r3, r2
 80020e0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <page2+0x314>)
 80020e8:	4a6b      	ldr	r2, [pc, #428]	; (8002298 <page2+0x318>)
 80020ea:	f006 fd5b 	bl	8008ba4 <encoder_handler>
					lcd_refresh = true;
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <page2+0x2ec>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		break;
 80020f4:	f000 bcf5 	b.w	8002ae2 <page2+0xb62>
			if(lcd_refresh == true)
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <page2+0x2ec>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8292 	beq.w	8002626 <page2+0x6a6>
					 if(pos > prev){ layer = 1; }
 8002102:	4b66      	ldr	r3, [pc, #408]	; (800229c <page2+0x31c>)
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <page2+0x320>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d903      	bls.n	8002116 <page2+0x196>
 800210e:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <page2+0x324>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e008      	b.n	8002128 <page2+0x1a8>
				else if(pos < prev){ layer = 0; }
 8002116:	4b61      	ldr	r3, [pc, #388]	; (800229c <page2+0x31c>)
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <page2+0x320>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d202      	bcs.n	8002128 <page2+0x1a8>
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <page2+0x324>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
				prev = pos;
 8002128:	4b5c      	ldr	r3, [pc, #368]	; (800229c <page2+0x31c>)
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <page2+0x320>)
 800212e:	701a      	strb	r2, [r3, #0]
				tampil_crossover(pos,layer);
 8002130:	4b5a      	ldr	r3, [pc, #360]	; (800229c <page2+0x31c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4a5b      	ldr	r2, [pc, #364]	; (80022a4 <page2+0x324>)
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff faa4 	bl	8001688 <tampil_crossover>
				if(layer == 0){ lcd_set_cursor(15,1); lcd_print(" "); tampil_crossover(pos+1,1); }
 8002140:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <page2+0x324>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <page2+0x1e8>
 8002148:	2101      	movs	r1, #1
 800214a:	200f      	movs	r0, #15
 800214c:	f006 fc38 	bl	80089c0 <lcd_set_cursor>
 8002150:	4855      	ldr	r0, [pc, #340]	; (80022a8 <page2+0x328>)
 8002152:	f006 fc19 	bl	8008988 <lcd_print>
 8002156:	4b51      	ldr	r3, [pc, #324]	; (800229c <page2+0x31c>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fa91 	bl	8001688 <tampil_crossover>
 8002166:	e00e      	b.n	8002186 <page2+0x206>
				else          { lcd_set_cursor(15,0); lcd_print(" "); tampil_crossover(pos-1,0); }
 8002168:	2100      	movs	r1, #0
 800216a:	200f      	movs	r0, #15
 800216c:	f006 fc28 	bl	80089c0 <lcd_set_cursor>
 8002170:	484d      	ldr	r0, [pc, #308]	; (80022a8 <page2+0x328>)
 8002172:	f006 fc09 	bl	8008988 <lcd_print>
 8002176:	4b49      	ldr	r3, [pc, #292]	; (800229c <page2+0x31c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	3b01      	subs	r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fa81 	bl	8001688 <tampil_crossover>
				lcd_set_cursor(15,layer);
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <page2+0x324>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	200f      	movs	r0, #15
 800218e:	f006 fc17 	bl	80089c0 <lcd_set_cursor>
				if(setting == false){ lcd_print("<"); }
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <page2+0x32c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <page2+0x228>
 80021a0:	4843      	ldr	r0, [pc, #268]	; (80022b0 <page2+0x330>)
 80021a2:	f006 fbf1 	bl	8008988 <lcd_print>
 80021a6:	e23b      	b.n	8002620 <page2+0x6a0>
					lcd_print("~");
 80021a8:	4842      	ldr	r0, [pc, #264]	; (80022b4 <page2+0x334>)
 80021aa:	f006 fbed 	bl	8008988 <lcd_print>
					if(pos == 0 || pos == 1)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <page2+0x31c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <page2+0x240>
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <page2+0x31c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 8122 	bne.w	8002404 <page2+0x484>
						if(crossover[channel-2][1] < 3){ ordo = crossover[channel-2][1]; tipe_filter = 0; }
 80021c0:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <page2+0x2f4>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	1e9a      	subs	r2, r3, #2
 80021c6:	493c      	ldr	r1, [pc, #240]	; (80022b8 <page2+0x338>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3304      	adds	r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4939      	ldr	r1, [pc, #228]	; (80022bc <page2+0x33c>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe ffbd 	bl	8001158 <__aeabi_fcmplt>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d012      	beq.n	800220a <page2+0x28a>
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <page2+0x2f4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	1e9a      	subs	r2, r3, #2
 80021ea:	4933      	ldr	r1, [pc, #204]	; (80022b8 <page2+0x338>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fffa 	bl	80011f4 <__aeabi_f2uiz>
 8002200:	4603      	mov	r3, r0
 8002202:	75fb      	strb	r3, [r7, #23]
 8002204:	2300      	movs	r3, #0
 8002206:	75bb      	strb	r3, [r7, #22]
 8002208:	e016      	b.n	8002238 <page2+0x2b8>
						else{ ordo = crossover[channel-2][1]-3; tipe_filter = 1; }
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <page2+0x2f4>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	1e9a      	subs	r2, r3, #2
 8002210:	4929      	ldr	r1, [pc, #164]	; (80022b8 <page2+0x338>)
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4926      	ldr	r1, [pc, #152]	; (80022bc <page2+0x33c>)
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fcf0 	bl	8000c08 <__aeabi_fsub>
 8002228:	4603      	mov	r3, r0
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ffe2 	bl	80011f4 <__aeabi_f2uiz>
 8002230:	4603      	mov	r3, r0
 8002232:	75fb      	strb	r3, [r7, #23]
 8002234:	2301      	movs	r3, #1
 8002236:	75bb      	strb	r3, [r7, #22]
						hitung_lpf((uint16_t)crossover[channel-2][0], tipe_filter, filter_coeff);
 8002238:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <page2+0x2f4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	1e9a      	subs	r2, r3, #2
 800223e:	491e      	ldr	r1, [pc, #120]	; (80022b8 <page2+0x338>)
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ffd1 	bl	80011f4 <__aeabi_f2uiz>
 8002252:	4603      	mov	r3, r0
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	7dbb      	ldrb	r3, [r7, #22]
 800225a:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <page2+0x340>)
 800225c:	4619      	mov	r1, r3
 800225e:	f005 fb6f 	bl	8007940 <hitung_lpf>
						for(uint8_t i=0; i<= ordo; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	757b      	strb	r3, [r7, #21]
 8002266:	e0c7      	b.n	80023f8 <page2+0x478>
 8002268:	20000215 	.word	0x20000215
 800226c:	20000001 	.word	0x20000001
 8002270:	0800dacc 	.word	0x0800dacc
 8002274:	20000214 	.word	0x20000214
 8002278:	0800da98 	.word	0x0800da98
 800227c:	20000448 	.word	0x20000448
 8002280:	2000031c 	.word	0x2000031c
 8002284:	0800daac 	.word	0x0800daac
 8002288:	0800dc3c 	.word	0x0800dc3c
 800228c:	0800dab4 	.word	0x0800dab4
 8002290:	2000021a 	.word	0x2000021a
 8002294:	41700000 	.word	0x41700000
 8002298:	c1700000 	.word	0xc1700000
 800229c:	20000216 	.word	0x20000216
 80022a0:	20000217 	.word	0x20000217
 80022a4:	20000218 	.word	0x20000218
 80022a8:	0800dac8 	.word	0x0800dac8
 80022ac:	20000219 	.word	0x20000219
 80022b0:	0800dac0 	.word	0x0800dac0
 80022b4:	0800dac4 	.word	0x0800dac4
 80022b8:	20000378 	.word	0x20000378
 80022bc:	40400000 	.word	0x40400000
 80022c0:	2000021c 	.word	0x2000021c
							dsp_load_address(0, 2069, alamat_crossover[0][channel-2]+ (i*5)   );
 80022c4:	4b7e      	ldr	r3, [pc, #504]	; (80024c0 <page2+0x540>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3b02      	subs	r3, #2
 80022ca:	4a7e      	ldr	r2, [pc, #504]	; (80024c4 <page2+0x544>)
 80022cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022d0:	7d7b      	ldrb	r3, [r7, #21]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	0089      	lsls	r1, r1, #2
 80022d8:	440b      	add	r3, r1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4413      	add	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	f640 0115 	movw	r1, #2069	; 0x815
 80022e6:	2000      	movs	r0, #0
 80022e8:	f006 f852 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2070, alamat_crossover[0][channel-2]+((i*5)+1));
 80022ec:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <page2+0x540>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3b02      	subs	r3, #2
 80022f2:	4a74      	ldr	r2, [pc, #464]	; (80024c4 <page2+0x544>)
 80022f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022f8:	7d7b      	ldrb	r3, [r7, #21]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	0089      	lsls	r1, r1, #2
 8002300:	440b      	add	r3, r1
 8002302:	b29b      	uxth	r3, r3
 8002304:	4413      	add	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	f640 0116 	movw	r1, #2070	; 0x816
 8002312:	2000      	movs	r0, #0
 8002314:	f006 f83c 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2071, alamat_crossover[0][channel-2]+((i*5)+2));
 8002318:	4b69      	ldr	r3, [pc, #420]	; (80024c0 <page2+0x540>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3b02      	subs	r3, #2
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <page2+0x544>)
 8002320:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002324:	7d7b      	ldrb	r3, [r7, #21]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	0089      	lsls	r1, r1, #2
 800232c:	440b      	add	r3, r1
 800232e:	b29b      	uxth	r3, r3
 8002330:	4413      	add	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	3302      	adds	r3, #2
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	f640 0117 	movw	r1, #2071	; 0x817
 800233e:	2000      	movs	r0, #0
 8002340:	f006 f826 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2072, alamat_crossover[0][channel-2]+((i*5)+3));
 8002344:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <page2+0x540>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b02      	subs	r3, #2
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <page2+0x544>)
 800234c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002350:	7d7b      	ldrb	r3, [r7, #21]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	0089      	lsls	r1, r1, #2
 8002358:	440b      	add	r3, r1
 800235a:	b29b      	uxth	r3, r3
 800235c:	4413      	add	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	3303      	adds	r3, #3
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	f640 0118 	movw	r1, #2072	; 0x818
 800236a:	2000      	movs	r0, #0
 800236c:	f006 f810 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2073, alamat_crossover[0][channel-2]+((i*5)+4));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <page2+0x540>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	3b02      	subs	r3, #2
 8002376:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <page2+0x544>)
 8002378:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800237c:	7d7b      	ldrb	r3, [r7, #21]
 800237e:	b29b      	uxth	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	0089      	lsls	r1, r1, #2
 8002384:	440b      	add	r3, r1
 8002386:	b29b      	uxth	r3, r3
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	3304      	adds	r3, #4
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	f640 0119 	movw	r1, #2073	; 0x819
 8002396:	2000      	movs	r0, #0
 8002398:	f005 fffa 	bl	8008390 <dsp_load_address>
							dsp_load_parameter(0, 2064, filter_coeff[0]);
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <page2+0x548>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80023a6:	2000      	movs	r0, #0
 80023a8:	f006 f83a 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2065, filter_coeff[1]);
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <page2+0x548>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	461a      	mov	r2, r3
 80023b2:	f640 0111 	movw	r1, #2065	; 0x811
 80023b6:	2000      	movs	r0, #0
 80023b8:	f006 f832 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2066, filter_coeff[2]);
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <page2+0x548>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f640 0112 	movw	r1, #2066	; 0x812
 80023c6:	2000      	movs	r0, #0
 80023c8:	f006 f82a 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2067, filter_coeff[3]);
 80023cc:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <page2+0x548>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	461a      	mov	r2, r3
 80023d2:	f640 0113 	movw	r1, #2067	; 0x813
 80023d6:	2000      	movs	r0, #0
 80023d8:	f006 f822 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2068, filter_coeff[4]);
 80023dc:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <page2+0x548>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f640 0114 	movw	r1, #2068	; 0x814
 80023e6:	2000      	movs	r0, #0
 80023e8:	f006 f81a 	bl	8008420 <dsp_load_parameter>
							dsp_safe_flag(0);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f006 f867 	bl	80084c0 <dsp_safe_flag>
						for(uint8_t i=0; i<= ordo; i++)
 80023f2:	7d7b      	ldrb	r3, [r7, #21]
 80023f4:	3301      	adds	r3, #1
 80023f6:	757b      	strb	r3, [r7, #21]
 80023f8:	7d7a      	ldrb	r2, [r7, #21]
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f67f af61 	bls.w	80022c4 <page2+0x344>
 8002402:	e10d      	b.n	8002620 <page2+0x6a0>
					else if(pos == 2 || pos == 3)
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <page2+0x54c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d004      	beq.n	8002416 <page2+0x496>
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <page2+0x54c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b03      	cmp	r3, #3
 8002412:	f040 8105 	bne.w	8002620 <page2+0x6a0>
						if(crossover[channel-2][3] < 3){ ordo = crossover[channel-2][3]; tipe_filter = 0; }
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <page2+0x540>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	1e9a      	subs	r2, r3, #2
 800241c:	492c      	ldr	r1, [pc, #176]	; (80024d0 <page2+0x550>)
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	330c      	adds	r3, #12
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4929      	ldr	r1, [pc, #164]	; (80024d4 <page2+0x554>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe92 	bl	8001158 <__aeabi_fcmplt>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <page2+0x4e0>
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <page2+0x540>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	1e9a      	subs	r2, r3, #2
 8002440:	4923      	ldr	r1, [pc, #140]	; (80024d0 <page2+0x550>)
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	330c      	adds	r3, #12
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fecf 	bl	80011f4 <__aeabi_f2uiz>
 8002456:	4603      	mov	r3, r0
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	2300      	movs	r3, #0
 800245c:	75bb      	strb	r3, [r7, #22]
 800245e:	e016      	b.n	800248e <page2+0x50e>
						else{ ordo = crossover[channel-2][3]-3; tipe_filter = 1; }
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <page2+0x540>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	1e9a      	subs	r2, r3, #2
 8002466:	491a      	ldr	r1, [pc, #104]	; (80024d0 <page2+0x550>)
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	330c      	adds	r3, #12
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4917      	ldr	r1, [pc, #92]	; (80024d4 <page2+0x554>)
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fbc5 	bl	8000c08 <__aeabi_fsub>
 800247e:	4603      	mov	r3, r0
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe feb7 	bl	80011f4 <__aeabi_f2uiz>
 8002486:	4603      	mov	r3, r0
 8002488:	75fb      	strb	r3, [r7, #23]
 800248a:	2301      	movs	r3, #1
 800248c:	75bb      	strb	r3, [r7, #22]
						hitung_hpf((uint16_t)crossover[channel-2][2], tipe_filter, filter_coeff);
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <page2+0x540>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	1e9a      	subs	r2, r3, #2
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <page2+0x550>)
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3308      	adds	r3, #8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fea5 	bl	80011f4 <__aeabi_f2uiz>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	7dbb      	ldrb	r3, [r7, #22]
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <page2+0x548>)
 80024b4:	4619      	mov	r1, r3
 80024b6:	f005 fc33 	bl	8007d20 <hitung_hpf>
						for(uint8_t i=0; i<= ordo; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	753b      	strb	r3, [r7, #20]
 80024be:	e0aa      	b.n	8002616 <page2+0x696>
 80024c0:	20000214 	.word	0x20000214
 80024c4:	0800dc58 	.word	0x0800dc58
 80024c8:	2000021c 	.word	0x2000021c
 80024cc:	20000216 	.word	0x20000216
 80024d0:	20000378 	.word	0x20000378
 80024d4:	40400000 	.word	0x40400000
							dsp_load_address(0, 2069, alamat_crossover[1][channel-2]+ (i*5)   );
 80024d8:	4bba      	ldr	r3, [pc, #744]	; (80027c4 <page2+0x844>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3b02      	subs	r3, #2
 80024de:	4aba      	ldr	r2, [pc, #744]	; (80027c8 <page2+0x848>)
 80024e0:	3304      	adds	r3, #4
 80024e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024e6:	7d3b      	ldrb	r3, [r7, #20]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	4619      	mov	r1, r3
 80024ec:	0089      	lsls	r1, r1, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	f640 0115 	movw	r1, #2069	; 0x815
 80024fc:	2000      	movs	r0, #0
 80024fe:	f005 ff47 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2070, alamat_crossover[1][channel-2]+((i*5)+1));
 8002502:	4bb0      	ldr	r3, [pc, #704]	; (80027c4 <page2+0x844>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3b02      	subs	r3, #2
 8002508:	4aaf      	ldr	r2, [pc, #700]	; (80027c8 <page2+0x848>)
 800250a:	3304      	adds	r3, #4
 800250c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002510:	7d3b      	ldrb	r3, [r7, #20]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	0089      	lsls	r1, r1, #2
 8002518:	440b      	add	r3, r1
 800251a:	b29b      	uxth	r3, r3
 800251c:	4413      	add	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	f640 0116 	movw	r1, #2070	; 0x816
 800252a:	2000      	movs	r0, #0
 800252c:	f005 ff30 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2071, alamat_crossover[1][channel-2]+((i*5)+2));
 8002530:	4ba4      	ldr	r3, [pc, #656]	; (80027c4 <page2+0x844>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	3b02      	subs	r3, #2
 8002536:	4aa4      	ldr	r2, [pc, #656]	; (80027c8 <page2+0x848>)
 8002538:	3304      	adds	r3, #4
 800253a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800253e:	7d3b      	ldrb	r3, [r7, #20]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	0089      	lsls	r1, r1, #2
 8002546:	440b      	add	r3, r1
 8002548:	b29b      	uxth	r3, r3
 800254a:	4413      	add	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	3302      	adds	r3, #2
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	f640 0117 	movw	r1, #2071	; 0x817
 8002558:	2000      	movs	r0, #0
 800255a:	f005 ff19 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2072, alamat_crossover[1][channel-2]+((i*5)+3));
 800255e:	4b99      	ldr	r3, [pc, #612]	; (80027c4 <page2+0x844>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3b02      	subs	r3, #2
 8002564:	4a98      	ldr	r2, [pc, #608]	; (80027c8 <page2+0x848>)
 8002566:	3304      	adds	r3, #4
 8002568:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800256c:	7d3b      	ldrb	r3, [r7, #20]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4619      	mov	r1, r3
 8002572:	0089      	lsls	r1, r1, #2
 8002574:	440b      	add	r3, r1
 8002576:	b29b      	uxth	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	3303      	adds	r3, #3
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	f640 0118 	movw	r1, #2072	; 0x818
 8002586:	2000      	movs	r0, #0
 8002588:	f005 ff02 	bl	8008390 <dsp_load_address>
							dsp_load_address(0, 2073, alamat_crossover[1][channel-2]+((i*5)+4));
 800258c:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <page2+0x844>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3b02      	subs	r3, #2
 8002592:	4a8d      	ldr	r2, [pc, #564]	; (80027c8 <page2+0x848>)
 8002594:	3304      	adds	r3, #4
 8002596:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800259a:	7d3b      	ldrb	r3, [r7, #20]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	0089      	lsls	r1, r1, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3304      	adds	r3, #4
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	f640 0119 	movw	r1, #2073	; 0x819
 80025b4:	2000      	movs	r0, #0
 80025b6:	f005 feeb 	bl	8008390 <dsp_load_address>
							dsp_load_parameter(0, 2064, filter_coeff[0]);
 80025ba:	4b84      	ldr	r3, [pc, #528]	; (80027cc <page2+0x84c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80025c4:	2000      	movs	r0, #0
 80025c6:	f005 ff2b 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2065, filter_coeff[1]);
 80025ca:	4b80      	ldr	r3, [pc, #512]	; (80027cc <page2+0x84c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f640 0111 	movw	r1, #2065	; 0x811
 80025d4:	2000      	movs	r0, #0
 80025d6:	f005 ff23 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2066, filter_coeff[2]);
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <page2+0x84c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	461a      	mov	r2, r3
 80025e0:	f640 0112 	movw	r1, #2066	; 0x812
 80025e4:	2000      	movs	r0, #0
 80025e6:	f005 ff1b 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2067, filter_coeff[3]);
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <page2+0x84c>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f640 0113 	movw	r1, #2067	; 0x813
 80025f4:	2000      	movs	r0, #0
 80025f6:	f005 ff13 	bl	8008420 <dsp_load_parameter>
							dsp_load_parameter(0, 2068, filter_coeff[4]);
 80025fa:	4b74      	ldr	r3, [pc, #464]	; (80027cc <page2+0x84c>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	461a      	mov	r2, r3
 8002600:	f640 0114 	movw	r1, #2068	; 0x814
 8002604:	2000      	movs	r0, #0
 8002606:	f005 ff0b 	bl	8008420 <dsp_load_parameter>
							dsp_safe_flag(0);
 800260a:	2000      	movs	r0, #0
 800260c:	f005 ff58 	bl	80084c0 <dsp_safe_flag>
						for(uint8_t i=0; i<= ordo; i++)
 8002610:	7d3b      	ldrb	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	753b      	strb	r3, [r7, #20]
 8002616:	7d3a      	ldrb	r2, [r7, #20]
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	429a      	cmp	r2, r3
 800261c:	f67f af5c 	bls.w	80024d8 <page2+0x558>
				lcd_refresh = false;
 8002620:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <page2+0x850>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
			if(encoder_push() == true)
 8002626:	f006 fb07 	bl	8008c38 <encoder_push>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <page2+0x6cc>
				if(setting == true){ setting = false; }
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <page2+0x854>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <page2+0x6c0>
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <page2+0x854>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e002      	b.n	8002646 <page2+0x6c6>
				else{ setting = true; }
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <page2+0x854>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
				lcd_refresh = true;
 8002646:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <page2+0x850>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
			mod = encoder_read();
 800264c:	f006 fa52 	bl	8008af4 <encoder_read>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <page2+0x858>)
 8002656:	701a      	strb	r2, [r3, #0]
			if(encoder_change(mod) == true)
 8002658:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <page2+0x858>)
 800265a:	f993 3000 	ldrsb.w	r3, [r3]
 800265e:	4618      	mov	r0, r3
 8002660:	f006 fadb 	bl	8008c1a <encoder_change>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 823d 	beq.w	8002ae6 <page2+0xb66>
				if(setting == false)
 800266c:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <page2+0x854>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	f083 0301 	eor.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01b      	beq.n	80026b2 <page2+0x732>
					float buffer = (float)pos;
 800267a:	4b58      	ldr	r3, [pc, #352]	; (80027dc <page2+0x85c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb74 	bl	8000d6c <__aeabi_ui2f>
 8002684:	4603      	mov	r3, r0
 8002686:	607b      	str	r3, [r7, #4]
					encoder_handler(mod,&buffer,0,6,1);
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <page2+0x858>)
 800268a:	f993 0000 	ldrsb.w	r0, [r3]
 800268e:	1d39      	adds	r1, r7, #4
 8002690:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <page2+0x860>)
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f006 fa82 	bl	8008ba4 <encoder_handler>
					pos = (int)buffer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fd80 	bl	80011a8 <__aeabi_f2iz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <page2+0x85c>)
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e213      	b.n	8002ada <page2+0xb5a>
					switch(pos)
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <page2+0x85c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	f200 820f 	bhi.w	8002ada <page2+0xb5a>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <page2+0x744>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026e1 	.word	0x080026e1
 80026c8:	08002705 	.word	0x08002705
 80026cc:	08002731 	.word	0x08002731
 80026d0:	08002757 	.word	0x08002757
 80026d4:	08002783 	.word	0x08002783
 80026d8:	0800288f 	.word	0x0800288f
 80026dc:	080029a9 	.word	0x080029a9
							encoder_adaptive_handler(mod,&crossover[channel-2][0],20,20000);
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <page2+0x858>)
 80026e2:	f993 0000 	ldrsb.w	r0, [r3]
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <page2+0x844>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	1e9a      	subs	r2, r3, #2
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <page2+0x864>)
 80026f6:	1899      	adds	r1, r3, r2
 80026f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80026fc:	2214      	movs	r2, #20
 80026fe:	f006 fab3 	bl	8008c68 <encoder_adaptive_handler>
						break;
 8002702:	e1ea      	b.n	8002ada <page2+0xb5a>
							encoder_handler(mod,&crossover[channel-2][1],0,5,1);
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <page2+0x858>)
 8002706:	f993 0000 	ldrsb.w	r0, [r3]
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <page2+0x844>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	1e9a      	subs	r2, r3, #2
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	3304      	adds	r3, #4
 800271a:	4a32      	ldr	r2, [pc, #200]	; (80027e4 <page2+0x864>)
 800271c:	1899      	adds	r1, r3, r2
 800271e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <page2+0x868>)
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f006 fa3b 	bl	8008ba4 <encoder_handler>
						break;
 800272e:	e1d4      	b.n	8002ada <page2+0xb5a>
							encoder_adaptive_handler(mod,&crossover[channel-2][2],20,20000);
 8002730:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <page2+0x858>)
 8002732:	f993 0000 	ldrsb.w	r0, [r3]
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <page2+0x844>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	1e9a      	subs	r2, r3, #2
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	3308      	adds	r3, #8
 8002746:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <page2+0x864>)
 8002748:	1899      	adds	r1, r3, r2
 800274a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800274e:	2214      	movs	r2, #20
 8002750:	f006 fa8a 	bl	8008c68 <encoder_adaptive_handler>
						break;
 8002754:	e1c1      	b.n	8002ada <page2+0xb5a>
							encoder_handler(mod,&crossover[channel-2][3],0,5,1);
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <page2+0x858>)
 8002758:	f993 0000 	ldrsb.w	r0, [r3]
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <page2+0x844>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	1e9a      	subs	r2, r3, #2
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	330c      	adds	r3, #12
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <page2+0x864>)
 800276e:	1899      	adds	r1, r3, r2
 8002770:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <page2+0x868>)
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f006 fa12 	bl	8008ba4 <encoder_handler>
						break;
 8002780:	e1ab      	b.n	8002ada <page2+0xb5a>
							if(crossover[channel-2][4] == 1){ crossover[channel-2][4] = -1; }
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <page2+0x844>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	1e9a      	subs	r2, r3, #2
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <page2+0x864>)
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3310      	adds	r3, #16
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fcd1 	bl	8001144 <__aeabi_fcmpeq>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <page2+0x870>
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <page2+0x844>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	1e9a      	subs	r2, r3, #2
 80027ae:	490d      	ldr	r1, [pc, #52]	; (80027e4 <page2+0x864>)
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3310      	adds	r3, #16
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <page2+0x86c>)
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e023      	b.n	800280a <page2+0x88a>
 80027c2:	bf00      	nop
 80027c4:	20000214 	.word	0x20000214
 80027c8:	0800dc58 	.word	0x0800dc58
 80027cc:	2000021c 	.word	0x2000021c
 80027d0:	20000001 	.word	0x20000001
 80027d4:	20000219 	.word	0x20000219
 80027d8:	2000021a 	.word	0x2000021a
 80027dc:	20000216 	.word	0x20000216
 80027e0:	40c00000 	.word	0x40c00000
 80027e4:	20000378 	.word	0x20000378
 80027e8:	40a00000 	.word	0x40a00000
 80027ec:	bf800000 	.word	0xbf800000
							else{ crossover[channel-2][4] = 1; }
 80027f0:	4bbf      	ldr	r3, [pc, #764]	; (8002af0 <page2+0xb70>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	1e9a      	subs	r2, r3, #2
 80027f6:	49bf      	ldr	r1, [pc, #764]	; (8002af4 <page2+0xb74>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3310      	adds	r3, #16
 8002804:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002808:	601a      	str	r2, [r3, #0]
							switch((int)crossover[channel-2][4])
 800280a:	4bb9      	ldr	r3, [pc, #740]	; (8002af0 <page2+0xb70>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	1e9a      	subs	r2, r3, #2
 8002810:	49b8      	ldr	r1, [pc, #736]	; (8002af4 <page2+0xb74>)
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3310      	adds	r3, #16
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fcc1 	bl	80011a8 <__aeabi_f2iz>
 8002826:	4603      	mov	r3, r0
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d002      	beq.n	8002834 <page2+0x8b4>
 800282e:	2b01      	cmp	r3, #1
 8002830:	d016      	beq.n	8002860 <page2+0x8e0>
						break;
 8002832:	e152      	b.n	8002ada <page2+0xb5a>
									dsp_load_address(0, 2069, (channel-2)+52);
 8002834:	4bae      	ldr	r3, [pc, #696]	; (8002af0 <page2+0xb70>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	f640 0115 	movw	r1, #2069	; 0x815
 8002844:	2000      	movs	r0, #0
 8002846:	f005 fda3 	bl	8008390 <dsp_load_address>
									dsp_load_parameter(0, 2064, 0xF800000);
 800284a:	f04f 6278 	mov.w	r2, #260046848	; 0xf800000
 800284e:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002852:	2000      	movs	r0, #0
 8002854:	f005 fde4 	bl	8008420 <dsp_load_parameter>
									dsp_safe_flag(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f005 fe31 	bl	80084c0 <dsp_safe_flag>
								break;
 800285e:	e015      	b.n	800288c <page2+0x90c>
									dsp_load_address(0, 2069, (channel-2)+52);
 8002860:	4ba3      	ldr	r3, [pc, #652]	; (8002af0 <page2+0xb70>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	3332      	adds	r3, #50	; 0x32
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	f640 0115 	movw	r1, #2069	; 0x815
 8002870:	2000      	movs	r0, #0
 8002872:	f005 fd8d 	bl	8008390 <dsp_load_address>
									dsp_load_parameter(0, 2064, 0x800000);
 8002876:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800287a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 800287e:	2000      	movs	r0, #0
 8002880:	f005 fdce 	bl	8008420 <dsp_load_parameter>
									dsp_safe_flag(0);
 8002884:	2000      	movs	r0, #0
 8002886:	f005 fe1b 	bl	80084c0 <dsp_safe_flag>
								break;
 800288a:	bf00      	nop
						break;
 800288c:	e125      	b.n	8002ada <page2+0xb5a>
							encoder_handler(mod,&crossover[channel-2][5],-90,6,0.25);
 800288e:	4b9a      	ldr	r3, [pc, #616]	; (8002af8 <page2+0xb78>)
 8002890:	f993 0000 	ldrsb.w	r0, [r3]
 8002894:	4b96      	ldr	r3, [pc, #600]	; (8002af0 <page2+0xb70>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	1e9a      	subs	r2, r3, #2
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3314      	adds	r3, #20
 80028a4:	4a93      	ldr	r2, [pc, #588]	; (8002af4 <page2+0xb74>)
 80028a6:	1899      	adds	r1, r3, r2
 80028a8:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4b93      	ldr	r3, [pc, #588]	; (8002afc <page2+0xb7c>)
 80028b0:	4a93      	ldr	r2, [pc, #588]	; (8002b00 <page2+0xb80>)
 80028b2:	f006 f977 	bl	8008ba4 <encoder_handler>
							hitung_limiter(crossover[channel-2][5], gain_limiter);
 80028b6:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <page2+0xb70>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	1e9a      	subs	r2, r3, #2
 80028bc:	498d      	ldr	r1, [pc, #564]	; (8002af4 <page2+0xb74>)
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3314      	adds	r3, #20
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	498d      	ldr	r1, [pc, #564]	; (8002b04 <page2+0xb84>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fe28 	bl	8007524 <hitung_limiter>
							uint8_t step = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	74fb      	strb	r3, [r7, #19]
							for(uint8_t x=0; x<6; x++)
 80028d8:	2300      	movs	r3, #0
 80028da:	74bb      	strb	r3, [r7, #18]
 80028dc:	e031      	b.n	8002942 <page2+0x9c2>
								for(uint8_t i=0; i<5; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	747b      	strb	r3, [r7, #17]
 80028e2:	e025      	b.n	8002930 <page2+0x9b0>
									dsp_load_address(0,2069+i, alamat_limiter[channel-2]+step);
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f603 0315 	addw	r3, r3, #2069	; 0x815
 80028ec:	b299      	uxth	r1, r3
 80028ee:	4b80      	ldr	r3, [pc, #512]	; (8002af0 <page2+0xb70>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3b02      	subs	r3, #2
 80028f4:	4a84      	ldr	r2, [pc, #528]	; (8002b08 <page2+0xb88>)
 80028f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4413      	add	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	2000      	movs	r0, #0
 8002906:	f005 fd43 	bl	8008390 <dsp_load_address>
									dsp_load_parameter(0, 2064+i, gain_limiter[step]);
 800290a:	7c7b      	ldrb	r3, [r7, #17]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8002912:	b299      	uxth	r1, r3
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <page2+0xb84>)
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	461a      	mov	r2, r3
 800291e:	2000      	movs	r0, #0
 8002920:	f005 fd7e 	bl	8008420 <dsp_load_parameter>
									step ++;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	3301      	adds	r3, #1
 8002928:	74fb      	strb	r3, [r7, #19]
								for(uint8_t i=0; i<5; i++)
 800292a:	7c7b      	ldrb	r3, [r7, #17]
 800292c:	3301      	adds	r3, #1
 800292e:	747b      	strb	r3, [r7, #17]
 8002930:	7c7b      	ldrb	r3, [r7, #17]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d9d6      	bls.n	80028e4 <page2+0x964>
								dsp_safe_flag(0);
 8002936:	2000      	movs	r0, #0
 8002938:	f005 fdc2 	bl	80084c0 <dsp_safe_flag>
							for(uint8_t x=0; x<6; x++)
 800293c:	7cbb      	ldrb	r3, [r7, #18]
 800293e:	3301      	adds	r3, #1
 8002940:	74bb      	strb	r3, [r7, #18]
 8002942:	7cbb      	ldrb	r3, [r7, #18]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d9ca      	bls.n	80028de <page2+0x95e>
							for(int i=0; i<3; i++)
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e025      	b.n	800299a <page2+0xa1a>
								dsp_load_address(0,2069+i, alamat_limiter[channel-2]+step);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f603 0315 	addw	r3, r3, #2069	; 0x815
 8002956:	b299      	uxth	r1, r3
 8002958:	4b65      	ldr	r3, [pc, #404]	; (8002af0 <page2+0xb70>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3b02      	subs	r3, #2
 800295e:	4a6a      	ldr	r2, [pc, #424]	; (8002b08 <page2+0xb88>)
 8002960:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4413      	add	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	2000      	movs	r0, #0
 8002970:	f005 fd0e 	bl	8008390 <dsp_load_address>
								dsp_load_parameter(0, 2064+i, gain_limiter[step]);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 800297c:	b299      	uxth	r1, r3
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	4a60      	ldr	r2, [pc, #384]	; (8002b04 <page2+0xb84>)
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	461a      	mov	r2, r3
 8002988:	2000      	movs	r0, #0
 800298a:	f005 fd49 	bl	8008420 <dsp_load_parameter>
								step ++;
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	3301      	adds	r3, #1
 8002992:	74fb      	strb	r3, [r7, #19]
							for(int i=0; i<3; i++)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b02      	cmp	r3, #2
 800299e:	ddd6      	ble.n	800294e <page2+0x9ce>
							dsp_safe_flag(0);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f005 fd8d 	bl	80084c0 <dsp_safe_flag>
						break;
 80029a6:	e098      	b.n	8002ada <page2+0xb5a>
							if(crossover[channel-2][6] == 1){ crossover[channel-2][6] = 0; }
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <page2+0xb70>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	1e9a      	subs	r2, r3, #2
 80029ae:	4951      	ldr	r1, [pc, #324]	; (8002af4 <page2+0xb74>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3318      	adds	r3, #24
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fbbe 	bl	8001144 <__aeabi_fcmpeq>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <page2+0xa6a>
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <page2+0xb70>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	1e9a      	subs	r2, r3, #2
 80029d4:	4947      	ldr	r1, [pc, #284]	; (8002af4 <page2+0xb74>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3318      	adds	r3, #24
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e00c      	b.n	8002a04 <page2+0xa84>
							else{ crossover[channel-2][6] = 1; }
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <page2+0xb70>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	1e9a      	subs	r2, r3, #2
 80029f0:	4940      	ldr	r1, [pc, #256]	; (8002af4 <page2+0xb74>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3318      	adds	r3, #24
 80029fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a02:	601a      	str	r2, [r3, #0]
							switch((int)crossover[channel-2][6])
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <page2+0xb70>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	1e9a      	subs	r2, r3, #2
 8002a0a:	493a      	ldr	r1, [pc, #232]	; (8002af4 <page2+0xb74>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3318      	adds	r3, #24
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fbc4 	bl	80011a8 <__aeabi_f2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <page2+0xaac>
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d02b      	beq.n	8002a82 <page2+0xb02>
						break;
 8002a2a:	e055      	b.n	8002ad8 <page2+0xb58>
									dsp_load_address(0, 2069, alamat_router[channel-2]  );
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <page2+0xb70>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	3b02      	subs	r3, #2
 8002a32:	4a36      	ldr	r2, [pc, #216]	; (8002b0c <page2+0xb8c>)
 8002a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f640 0115 	movw	r1, #2069	; 0x815
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f005 fca6 	bl	8008390 <dsp_load_address>
									dsp_load_address(0, 2070, alamat_router[channel-2]+1);
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <page2+0xb70>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3b02      	subs	r3, #2
 8002a4a:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <page2+0xb8c>)
 8002a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	f640 0116 	movw	r1, #2070	; 0x816
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f005 fc98 	bl	8008390 <dsp_load_address>
									dsp_load_parameter(0, 2064, 0x800000);
 8002a60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a64:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f005 fcd9 	bl	8008420 <dsp_load_parameter>
									dsp_load_parameter(0, 2065, 0x00);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f640 0111 	movw	r1, #2065	; 0x811
 8002a74:	2000      	movs	r0, #0
 8002a76:	f005 fcd3 	bl	8008420 <dsp_load_parameter>
									dsp_safe_flag(0);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f005 fd20 	bl	80084c0 <dsp_safe_flag>
								break;
 8002a80:	e02a      	b.n	8002ad8 <page2+0xb58>
									dsp_load_address(0, 2069, alamat_router[channel-2]  );
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <page2+0xb70>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3b02      	subs	r3, #2
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <page2+0xb8c>)
 8002a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f640 0115 	movw	r1, #2069	; 0x815
 8002a94:	2000      	movs	r0, #0
 8002a96:	f005 fc7b 	bl	8008390 <dsp_load_address>
									dsp_load_address(0, 2070, alamat_router[channel-2]+1);
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <page2+0xb70>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	3b02      	subs	r3, #2
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <page2+0xb8c>)
 8002aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f640 0116 	movw	r1, #2070	; 0x816
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f005 fc6d 	bl	8008390 <dsp_load_address>
									dsp_load_parameter(0, 2064, 0x00);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8002abc:	2000      	movs	r0, #0
 8002abe:	f005 fcaf 	bl	8008420 <dsp_load_parameter>
									dsp_load_parameter(0, 2065, 0x800000);
 8002ac2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ac6:	f640 0111 	movw	r1, #2065	; 0x811
 8002aca:	2000      	movs	r0, #0
 8002acc:	f005 fca8 	bl	8008420 <dsp_load_parameter>
									dsp_safe_flag(0);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f005 fcf5 	bl	80084c0 <dsp_safe_flag>
								break;
 8002ad6:	bf00      	nop
						break;
 8002ad8:	bf00      	nop
				lcd_refresh = true;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <page2+0xb90>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		break;
 8002ae0:	e001      	b.n	8002ae6 <page2+0xb66>
		break;
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <page2+0xb68>
		break;
 8002ae6:	bf00      	nop
}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000214 	.word	0x20000214
 8002af4:	20000378 	.word	0x20000378
 8002af8:	2000021a 	.word	0x2000021a
 8002afc:	40c00000 	.word	0x40c00000
 8002b00:	c2b40000 	.word	0xc2b40000
 8002b04:	20000230 	.word	0x20000230
 8002b08:	0800dc50 	.word	0x0800dc50
 8002b0c:	0800dc48 	.word	0x0800dc48
 8002b10:	20000001 	.word	0x20000001

08002b14 <interface_welcome>:

void interface_welcome(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
	for(uint8_t x=0; x<6; x++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	e007      	b.n	8002b30 <interface_welcome+0x1c>
	{
		led_mute(x,true);
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fb99 	bl	800125c <led_mute>
	for(uint8_t x=0; x<6; x++)
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	71fb      	strb	r3, [r7, #7]
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d9f4      	bls.n	8002b20 <interface_welcome+0xc>
	}

	lcd_set_cursor(0,0); lcd_print(" DIY MANAGEMENT ");
 8002b36:	2100      	movs	r1, #0
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f005 ff41 	bl	80089c0 <lcd_set_cursor>
 8002b3e:	4819      	ldr	r0, [pc, #100]	; (8002ba4 <interface_welcome+0x90>)
 8002b40:	f005 ff22 	bl	8008988 <lcd_print>
	lcd_set_cursor(0,1); lcd_print("      2022      ");
 8002b44:	2101      	movs	r1, #1
 8002b46:	2000      	movs	r0, #0
 8002b48:	f005 ff3a 	bl	80089c0 <lcd_set_cursor>
 8002b4c:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <interface_welcome+0x94>)
 8002b4e:	f005 ff1b 	bl	8008988 <lcd_print>

	for(uint8_t y=0; y<6; y++)
 8002b52:	2300      	movs	r3, #0
 8002b54:	71bb      	strb	r3, [r7, #6]
 8002b56:	e00a      	b.n	8002b6e <interface_welcome+0x5a>
	{
		led_sel(y);
 8002b58:	79bb      	ldrb	r3, [r7, #6]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fc08 	bl	8001370 <led_sel>
		HAL_Delay(500);
 8002b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b64:	f002 f866 	bl	8004c34 <HAL_Delay>
	for(uint8_t y=0; y<6; y++)
 8002b68:	79bb      	ldrb	r3, [r7, #6]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	71bb      	strb	r3, [r7, #6]
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d9f1      	bls.n	8002b58 <interface_welcome+0x44>
	}

	for(uint8_t i=4; i>0; i--)
 8002b74:	2304      	movs	r3, #4
 8002b76:	717b      	strb	r3, [r7, #5]
 8002b78:	e00a      	b.n	8002b90 <interface_welcome+0x7c>
	{
	    led_sel(i);
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fbf7 	bl	8001370 <led_sel>
	    HAL_Delay(500);
 8002b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b86:	f002 f855 	bl	8004c34 <HAL_Delay>
	for(uint8_t i=4; i>0; i--)
 8002b8a:	797b      	ldrb	r3, [r7, #5]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	717b      	strb	r3, [r7, #5]
 8002b90:	797b      	ldrb	r3, [r7, #5]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f1      	bne.n	8002b7a <interface_welcome+0x66>
	}

	lcd_clear();
 8002b96:	f005 ffa5 	bl	8008ae4 <lcd_clear>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	0800dad4 	.word	0x0800dad4
 8002ba8:	0800dae8 	.word	0x0800dae8

08002bac <loading_procedure>:

void loading_procedure(void)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b0a3      	sub	sp, #140	; 0x8c
 8002bb0:	af00      	add	r7, sp, #0
	dsp_mute(0);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f005 fb78 	bl	80082a8 <dsp_mute>

	for(uint16_t x=0; x<5120; x++){ data_buffer[x] = flash_read_byte(x); }
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002bbe:	e00f      	b.n	8002be0 <loading_procedure+0x34>
 8002bc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bc4:	f8b7 4086 	ldrh.w	r4, [r7, #134]	; 0x86
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 fd33 	bl	8008634 <flash_read_byte>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4be6      	ldr	r3, [pc, #920]	; (8002f6c <loading_procedure+0x3c0>)
 8002bd4:	551a      	strb	r2, [r3, r4]
 8002bd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002be0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002be4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002be8:	d3ea      	bcc.n	8002bc0 <loading_procedure+0x14>
	dsp_load_data(0, 1024, data_buffer, 5120);
 8002bea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bee:	4adf      	ldr	r2, [pc, #892]	; (8002f6c <loading_procedure+0x3c0>)
 8002bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f005 fabb 	bl	8008170 <dsp_load_data>

	for(uint16_t y=0; y<4096; y++){ data_buffer[y] = flash_read_byte(0x030000+y); }
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002c00:	e011      	b.n	8002c26 <loading_procedure+0x7a>
 8002c02:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002c06:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002c0a:	f8b7 4084 	ldrh.w	r4, [r7, #132]	; 0x84
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fd10 	bl	8008634 <flash_read_byte>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4bd4      	ldr	r3, [pc, #848]	; (8002f6c <loading_procedure+0x3c0>)
 8002c1a:	551a      	strb	r2, [r3, r4]
 8002c1c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002c20:	3301      	adds	r3, #1
 8002c22:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002c26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d3e8      	bcc.n	8002c02 <loading_procedure+0x56>
	dsp_load_data(0, 0, data_buffer, 4096);
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	4acd      	ldr	r2, [pc, #820]	; (8002f6c <loading_procedure+0x3c0>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f005 fa99 	bl	8008170 <dsp_load_data>

	for(uint16_t z=0; z<24; z++){ data_buffer[z] = flash_read_byte(0x020000+z); }
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002c44:	e011      	b.n	8002c6a <loading_procedure+0xbe>
 8002c46:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c4a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002c4e:	f8b7 4082 	ldrh.w	r4, [r7, #130]	; 0x82
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 fcee 	bl	8008634 <flash_read_byte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4bc3      	ldr	r3, [pc, #780]	; (8002f6c <loading_procedure+0x3c0>)
 8002c5e:	551a      	strb	r2, [r3, r4]
 8002c60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c64:	3301      	adds	r3, #1
 8002c66:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002c6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c6e:	2b17      	cmp	r3, #23
 8002c70:	d9e9      	bls.n	8002c46 <loading_procedure+0x9a>
	dsp_load_data(0, 0x081C, data_buffer, 24);
 8002c72:	2318      	movs	r3, #24
 8002c74:	4abd      	ldr	r2, [pc, #756]	; (8002f6c <loading_procedure+0x3c0>)
 8002c76:	f640 011c 	movw	r1, #2076	; 0x81c
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f005 fa78 	bl	8008170 <dsp_load_data>

	uint8_t byte_gain[24];
	for(uint8_t i=0; i<24; i++){ byte_gain[i] = flash_read_byte(i+0x040000); }
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8002c86:	e014      	b.n	8002cb2 <loading_procedure+0x106>
 8002c88:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002c8c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002c90:	f897 4081 	ldrb.w	r4, [r7, #129]	; 0x81
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fccd 	bl	8008634 <flash_read_byte>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ca2:	4423      	add	r3, r4
 8002ca4:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002ca8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002cac:	3301      	adds	r3, #1
 8002cae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8002cb2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8002cb6:	2b17      	cmp	r3, #23
 8002cb8:	d9e6      	bls.n	8002c88 <loading_procedure+0xdc>
	for(uint8_t i=0; i<6; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8002cc0:	e036      	b.n	8002d30 <loading_procedure+0x184>
	{
		gain[i] = ubah_ke_float((byte_gain[(i*4)+3]<<24)|(byte_gain[(i*4)+2]<<16)
 8002cc2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3303      	adds	r3, #3
 8002cca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cce:	4413      	add	r3, r2
 8002cd0:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002cd4:	061a      	lsls	r2, r3, #24
 8002cd6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
				|(byte_gain[(i*4)+1]<<8)|byte_gain[(i*4)]);
 8002cec:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8002d12:	4313      	orrs	r3, r2
		gain[i] = ubah_ke_float((byte_gain[(i*4)+3]<<24)|(byte_gain[(i*4)+2]<<16)
 8002d14:	f897 4080 	ldrb.w	r4, [r7, #128]	; 0x80
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 fba7 	bl	800746c <ubah_ke_float>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a93      	ldr	r2, [pc, #588]	; (8002f70 <loading_procedure+0x3c4>)
 8002d22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t i=0; i<6; i++)
 8002d26:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8002d30:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d9c4      	bls.n	8002cc2 <loading_procedure+0x116>
	}

	uint8_t byte_mute[6];
	for(uint8_t i=0; i<24; i++){ byte_mute[i] = flash_read_byte(i+0x047000); }
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d3e:	e014      	b.n	8002d6a <loading_procedure+0x1be>
 8002d40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d44:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 8002d48:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 fc71 	bl	8008634 <flash_read_byte>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d5a:	4423      	add	r3, r4
 8002d5c:	f803 2c38 	strb.w	r2, [r3, #-56]
 8002d60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d64:	3301      	adds	r3, #1
 8002d66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d6e:	2b17      	cmp	r3, #23
 8002d70:	d9e6      	bls.n	8002d40 <loading_procedure+0x194>
	for(uint8_t i=0; i<6; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002d78:	e018      	b.n	8002dac <loading_procedure+0x200>
	{
		if(byte_mute[i] == 0xff){ mute[i] = true; }
 8002d7a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d82:	4413      	add	r3, r2
 8002d84:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002d88:	2bff      	cmp	r3, #255	; 0xff
 8002d8a:	d105      	bne.n	8002d98 <loading_procedure+0x1ec>
 8002d8c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002d90:	4a78      	ldr	r2, [pc, #480]	; (8002f74 <loading_procedure+0x3c8>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	54d1      	strb	r1, [r2, r3]
 8002d96:	e004      	b.n	8002da2 <loading_procedure+0x1f6>
		else{ mute[i] = false; }
 8002d98:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002d9c:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <loading_procedure+0x3c8>)
 8002d9e:	2100      	movs	r1, #0
 8002da0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<6; i++)
 8002da2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002da6:	3301      	adds	r3, #1
 8002da8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002dac:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d9e2      	bls.n	8002d7a <loading_procedure+0x1ce>
	}

	uint8_t byte_peq[48];
	for(uint8_t i=0; i<48; i++){ byte_peq[i] = flash_read_byte(i+0x041000); }
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002dba:	e014      	b.n	8002de6 <loading_procedure+0x23a>
 8002dbc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002dc0:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
 8002dc4:	f897 407d 	ldrb.w	r4, [r7, #125]	; 0x7d
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 fc33 	bl	8008634 <flash_read_byte>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002dd6:	4423      	add	r3, r4
 8002dd8:	f803 2c68 	strb.w	r2, [r3, #-104]
 8002ddc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002de0:	3301      	adds	r3, #1
 8002de2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002de6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002dea:	2b2f      	cmp	r3, #47	; 0x2f
 8002dec:	d9e6      	bls.n	8002dbc <loading_procedure+0x210>
	for(uint8_t i=0; i<12; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8002df4:	e036      	b.n	8002e64 <loading_procedure+0x2b8>
	{
		parametric[0][i] = ubah_ke_float((byte_peq[(i*4)+3]<<24)|(byte_peq[(i*4)+2]<<16)|(byte_peq[(i*4)+1]<<8)|byte_peq[(i*4)]);
 8002df6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e02:	4413      	add	r3, r2
 8002e04:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002e08:	061a      	lsls	r2, r3, #24
 8002e0a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e16:	440b      	add	r3, r1
 8002e18:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	3301      	adds	r3, #1
 8002e28:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002e40:	440a      	add	r2, r1
 8002e42:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f897 407c 	ldrb.w	r4, [r7, #124]	; 0x7c
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 fb0d 	bl	800746c <ubah_ke_float>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <loading_procedure+0x3cc>)
 8002e56:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t i=0; i<12; i++)
 8002e5a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8002e64:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002e68:	2b0b      	cmp	r3, #11
 8002e6a:	d9c4      	bls.n	8002df6 <loading_procedure+0x24a>
	}

	for(uint8_t i=0; i<48; i++){ byte_peq[i] = flash_read_byte(i+0x042000); }
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002e72:	e014      	b.n	8002e9e <loading_procedure+0x2f2>
 8002e74:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002e78:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 8002e7c:	f897 407b 	ldrb.w	r4, [r7, #123]	; 0x7b
 8002e80:	4618      	mov	r0, r3
 8002e82:	f005 fbd7 	bl	8008634 <flash_read_byte>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002e8e:	4423      	add	r3, r4
 8002e90:	f803 2c68 	strb.w	r2, [r3, #-104]
 8002e94:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002e9e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8002ea4:	d9e6      	bls.n	8002e74 <loading_procedure+0x2c8>
	for(uint8_t i=0; i<12; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8002eac:	e038      	b.n	8002f20 <loading_procedure+0x374>
	{
		parametric[1][i] = ubah_ke_float((byte_peq[(i*4)+3]<<24)|(byte_peq[(i*4)+2]<<16)|(byte_peq[(i*4)+1]<<8)|byte_peq[(i*4)]);
 8002eae:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	3303      	adds	r3, #3
 8002eb6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002eba:	4413      	add	r3, r2
 8002ebc:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002ec0:	061a      	lsls	r2, r3, #24
 8002ec2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	3302      	adds	r3, #2
 8002eca:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ece:	440b      	add	r3, r1
 8002ed0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ef8:	440a      	add	r2, r1
 8002efa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f897 407a 	ldrb.w	r4, [r7, #122]	; 0x7a
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fab1 	bl	800746c <ubah_ke_float>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	491a      	ldr	r1, [pc, #104]	; (8002f78 <loading_procedure+0x3cc>)
 8002f0e:	f104 030c 	add.w	r3, r4, #12
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0; i<12; i++)
 8002f16:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8002f20:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002f24:	2b0b      	cmp	r3, #11
 8002f26:	d9c2      	bls.n	8002eae <loading_procedure+0x302>
	}

	uint8_t byte_cross[28];
	for(uint8_t i=0; i<28; i++){ byte_cross[i] = flash_read_byte(i+0x043000); }
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8002f2e:	e014      	b.n	8002f5a <loading_procedure+0x3ae>
 8002f30:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002f34:	f503 2386 	add.w	r3, r3, #274432	; 0x43000
 8002f38:	f897 4079 	ldrb.w	r4, [r7, #121]	; 0x79
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fb79 	bl	8008634 <flash_read_byte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002f4a:	4423      	add	r3, r4
 8002f4c:	f803 2c84 	strb.w	r2, [r3, #-132]
 8002f50:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002f54:	3301      	adds	r3, #1
 8002f56:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8002f5a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002f5e:	2b1b      	cmp	r3, #27
 8002f60:	d9e6      	bls.n	8002f30 <loading_procedure+0x384>
	for(uint8_t i=0; i<7;  i++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8002f68:	e03f      	b.n	8002fea <loading_procedure+0x43e>
 8002f6a:	bf00      	nop
 8002f6c:	200004b8 	.word	0x200004b8
 8002f70:	20000448 	.word	0x20000448
 8002f74:	2000031c 	.word	0x2000031c
 8002f78:	200003e8 	.word	0x200003e8
	{
		crossover[0][i] = ubah_ke_float((byte_cross[(i*4)+3]<<24)|(byte_cross[(i*4)+2]<<16)|(byte_cross[(i*4)+1]<<8)|byte_cross[(i*4)]);
 8002f7c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3303      	adds	r3, #3
 8002f84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002f88:	4413      	add	r3, r2
 8002f8a:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002f8e:	061a      	lsls	r2, r3, #24
 8002f90:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	3301      	adds	r3, #1
 8002fae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f897 4078 	ldrb.w	r4, [r7, #120]	; 0x78
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fa4a 	bl	800746c <ubah_ke_float>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a96      	ldr	r2, [pc, #600]	; (8003234 <loading_procedure+0x688>)
 8002fdc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t i=0; i<7;  i++)
 8002fe0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8002fea:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d9c4      	bls.n	8002f7c <loading_procedure+0x3d0>
	}

	for(uint8_t i=0; i<28; i++){ byte_cross[i] = flash_read_byte(i+0x044000); }
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ff8:	e014      	b.n	8003024 <loading_procedure+0x478>
 8002ffa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ffe:	f503 2388 	add.w	r3, r3, #278528	; 0x44000
 8003002:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8003006:	4618      	mov	r0, r3
 8003008:	f005 fb14 	bl	8008634 <flash_read_byte>
 800300c:	4603      	mov	r3, r0
 800300e:	461a      	mov	r2, r3
 8003010:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003014:	4423      	add	r3, r4
 8003016:	f803 2c84 	strb.w	r2, [r3, #-132]
 800301a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800301e:	3301      	adds	r3, #1
 8003020:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003024:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003028:	2b1b      	cmp	r3, #27
 800302a:	d9e6      	bls.n	8002ffa <loading_procedure+0x44e>
	for(uint8_t i=0; i<7;  i++)
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003032:	e037      	b.n	80030a4 <loading_procedure+0x4f8>
	{
		crossover[1][i] = ubah_ke_float((byte_cross[(i*4)+3]<<24)|(byte_cross[(i*4)+2]<<16)|(byte_cross[(i*4)+1]<<8)|byte_cross[(i*4)]);
 8003034:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	3303      	adds	r3, #3
 800303c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003040:	4413      	add	r3, r2
 8003042:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8003046:	061a      	lsls	r2, r3, #24
 8003048:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003054:	440b      	add	r3, r1
 8003056:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3301      	adds	r3, #1
 8003066:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800306a:	440b      	add	r3, r1
 800306c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	4313      	orrs	r3, r2
 8003074:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003078:	0092      	lsls	r2, r2, #2
 800307a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800307e:	440a      	add	r2, r1
 8003080:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8003084:	4313      	orrs	r3, r2
 8003086:	f897 4076 	ldrb.w	r4, [r7, #118]	; 0x76
 800308a:	4618      	mov	r0, r3
 800308c:	f004 f9ee 	bl	800746c <ubah_ke_float>
 8003090:	4602      	mov	r2, r0
 8003092:	4968      	ldr	r1, [pc, #416]	; (8003234 <loading_procedure+0x688>)
 8003094:	1de3      	adds	r3, r4, #7
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0; i<7;  i++)
 800309a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800309e:	3301      	adds	r3, #1
 80030a0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80030a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d9c3      	bls.n	8003034 <loading_procedure+0x488>
	}

	for(uint8_t i=0; i<28; i++){ byte_cross[i] = flash_read_byte(i+0x045000); }
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80030b2:	e014      	b.n	80030de <loading_procedure+0x532>
 80030b4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80030b8:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 80030bc:	f897 4075 	ldrb.w	r4, [r7, #117]	; 0x75
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fab7 	bl	8008634 <flash_read_byte>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80030ce:	4423      	add	r3, r4
 80030d0:	f803 2c84 	strb.w	r2, [r3, #-132]
 80030d4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80030d8:	3301      	adds	r3, #1
 80030da:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80030de:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80030e2:	2b1b      	cmp	r3, #27
 80030e4:	d9e6      	bls.n	80030b4 <loading_procedure+0x508>
	for(uint8_t i=0; i<7;  i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 80030ec:	e038      	b.n	8003160 <loading_procedure+0x5b4>
	{
		crossover[2][i] = ubah_ke_float((byte_cross[(i*4)+3]<<24)|(byte_cross[(i*4)+2]<<16)|(byte_cross[(i*4)+1]<<8)|byte_cross[(i*4)]);
 80030ee:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3303      	adds	r3, #3
 80030f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80030fa:	4413      	add	r3, r2
 80030fc:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8003100:	061a      	lsls	r2, r3, #24
 8003102:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800310e:	440b      	add	r3, r1
 8003110:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	3301      	adds	r3, #1
 8003120:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003124:	440b      	add	r3, r1
 8003126:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	4313      	orrs	r3, r2
 800312e:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003138:	440a      	add	r2, r1
 800313a:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 800313e:	4313      	orrs	r3, r2
 8003140:	f897 4074 	ldrb.w	r4, [r7, #116]	; 0x74
 8003144:	4618      	mov	r0, r3
 8003146:	f004 f991 	bl	800746c <ubah_ke_float>
 800314a:	4602      	mov	r2, r0
 800314c:	4939      	ldr	r1, [pc, #228]	; (8003234 <loading_procedure+0x688>)
 800314e:	f104 030e 	add.w	r3, r4, #14
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0; i<7;  i++)
 8003156:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800315a:	3301      	adds	r3, #1
 800315c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8003160:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8003164:	2b06      	cmp	r3, #6
 8003166:	d9c2      	bls.n	80030ee <loading_procedure+0x542>
	}

	for(uint8_t i=0; i<28; i++){ byte_cross[i] = flash_read_byte(i+0x046000); }
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800316e:	e014      	b.n	800319a <loading_procedure+0x5ee>
 8003170:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003174:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8003178:	f897 4073 	ldrb.w	r4, [r7, #115]	; 0x73
 800317c:	4618      	mov	r0, r3
 800317e:	f005 fa59 	bl	8008634 <flash_read_byte>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800318a:	4423      	add	r3, r4
 800318c:	f803 2c84 	strb.w	r2, [r3, #-132]
 8003190:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003194:	3301      	adds	r3, #1
 8003196:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800319a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800319e:	2b1b      	cmp	r3, #27
 80031a0:	d9e6      	bls.n	8003170 <loading_procedure+0x5c4>
	for(uint8_t i=0; i<7;  i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80031a8:	e038      	b.n	800321c <loading_procedure+0x670>
	{
		crossover[3][i] = ubah_ke_float((byte_cross[(i*4)+3]<<24)|(byte_cross[(i*4)+2]<<16)|(byte_cross[(i*4)+1]<<8)|byte_cross[(i*4)]);
 80031aa:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	3303      	adds	r3, #3
 80031b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031b6:	4413      	add	r3, r2
 80031b8:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80031bc:	061a      	lsls	r2, r3, #24
 80031be:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80031ca:	440b      	add	r3, r1
 80031cc:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	3301      	adds	r3, #1
 80031dc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80031e0:	440b      	add	r3, r1
 80031e2:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80031f4:	440a      	add	r2, r1
 80031f6:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f897 4072 	ldrb.w	r4, [r7, #114]	; 0x72
 8003200:	4618      	mov	r0, r3
 8003202:	f004 f933 	bl	800746c <ubah_ke_float>
 8003206:	4602      	mov	r2, r0
 8003208:	490a      	ldr	r1, [pc, #40]	; (8003234 <loading_procedure+0x688>)
 800320a:	f104 0315 	add.w	r3, r4, #21
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0; i<7;  i++)
 8003212:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003216:	3301      	adds	r3, #1
 8003218:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800321c:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8003220:	2b06      	cmp	r3, #6
 8003222:	d9c2      	bls.n	80031aa <loading_procedure+0x5fe>
	}

	dsp_unmute(0);
 8003224:	2000      	movs	r0, #0
 8003226:	f005 f879 	bl	800831c <dsp_unmute>
}
 800322a:	bf00      	nop
 800322c:	378c      	adds	r7, #140	; 0x8c
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	20000378 	.word	0x20000378

08003238 <upload_parameter_float>:

void upload_parameter_float(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af00      	add	r7, sp, #0
	uint16_t count = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	84fb      	strh	r3, [r7, #38]	; 0x26
	lcd_set_cursor(0,1); lcd_print("saving : ");
 8003242:	2101      	movs	r1, #1
 8003244:	2000      	movs	r0, #0
 8003246:	f005 fbbb 	bl	80089c0 <lcd_set_cursor>
 800324a:	48be      	ldr	r0, [pc, #760]	; (8003544 <upload_parameter_float+0x30c>)
 800324c:	f005 fb9c 	bl	8008988 <lcd_print>

	/* gain channel 0 sampai 6 */
	for(uint8_t index=0; index<6; index++)
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003256:	e054      	b.n	8003302 <upload_parameter_float+0xca>
	{
		uint32_t data_buffer = ubah_ke_hex(gain[index]);
 8003258:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800325c:	4aba      	ldr	r2, [pc, #744]	; (8003548 <upload_parameter_float+0x310>)
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 f8ae 	bl	80073c4 <ubah_ke_hex>
 8003268:	6038      	str	r0, [r7, #0]
		flash_write_byte((uint8_t)(data_buffer      ), 0x040000+(index*4));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003272:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f005 fa0e 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x040001+(index*4));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b2da      	uxtb	r2, r3
 8003286:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8003290:	3301      	adds	r3, #1
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f005 fa01 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x040002+(index*4));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80032aa:	3302      	adds	r3, #2
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f005 f9f4 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x040003+(index*4));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	0e1b      	lsrs	r3, r3, #24
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80032c4:	3303      	adds	r3, #3
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f005 f9e7 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 80032ce:	2101      	movs	r1, #1
 80032d0:	2009      	movs	r0, #9
 80032d2:	f005 fb75 	bl	80089c0 <lcd_set_cursor>
 80032d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032d8:	2264      	movs	r2, #100	; 0x64
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da00      	bge.n	80032e4 <upload_parameter_float+0xac>
 80032e2:	333f      	adds	r3, #63	; 0x3f
 80032e4:	119b      	asrs	r3, r3, #6
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 fb88 	bl	80089fc <lcd_int>
 80032ec:	4897      	ldr	r0, [pc, #604]	; (800354c <upload_parameter_float+0x314>)
 80032ee:	f005 fb4b 	bl	8008988 <lcd_print>
		count ++;
 80032f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032f4:	3301      	adds	r3, #1
 80032f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<6; index++)
 80032f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032fc:	3301      	adds	r3, #1
 80032fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003302:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003306:	2b05      	cmp	r3, #5
 8003308:	d9a6      	bls.n	8003258 <upload_parameter_float+0x20>
	}

	/* parametrik input 1 */
	for(uint8_t index=0; index<12; index++)
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003310:	e054      	b.n	80033bc <upload_parameter_float+0x184>
	{
		uint32_t data_buffer = ubah_ke_hex(parametric[0][index]);
 8003312:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003316:	4a8e      	ldr	r2, [pc, #568]	; (8003550 <upload_parameter_float+0x318>)
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 f851 	bl	80073c4 <ubah_ke_hex>
 8003322:	6078      	str	r0, [r7, #4]
		flash_write_byte((uint8_t)(data_buffer      ), 0x041000+(index*4));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800332c:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f005 f9b1 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x041001+(index*4));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	b2da      	uxtb	r2, r3
 8003340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
 800334a:	3301      	adds	r3, #1
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f005 f9a4 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x041002+(index*4));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2da      	uxtb	r2, r3
 800335a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
 8003364:	3302      	adds	r3, #2
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f005 f997 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x041003+(index*4));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	b2da      	uxtb	r2, r3
 8003374:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
 800337e:	3303      	adds	r3, #3
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f005 f98a 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 8003388:	2101      	movs	r1, #1
 800338a:	2009      	movs	r0, #9
 800338c:	f005 fb18 	bl	80089c0 <lcd_set_cursor>
 8003390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003392:	2264      	movs	r2, #100	; 0x64
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	da00      	bge.n	800339e <upload_parameter_float+0x166>
 800339c:	333f      	adds	r3, #63	; 0x3f
 800339e:	119b      	asrs	r3, r3, #6
 80033a0:	4618      	mov	r0, r3
 80033a2:	f005 fb2b 	bl	80089fc <lcd_int>
 80033a6:	4869      	ldr	r0, [pc, #420]	; (800354c <upload_parameter_float+0x314>)
 80033a8:	f005 faee 	bl	8008988 <lcd_print>
		count ++;
 80033ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033ae:	3301      	adds	r3, #1
 80033b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<12; index++)
 80033b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033b6:	3301      	adds	r3, #1
 80033b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80033bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033c0:	2b0b      	cmp	r3, #11
 80033c2:	d9a6      	bls.n	8003312 <upload_parameter_float+0xda>
	}

	/* parametrik input 2 */
	for(uint8_t index=0; index<12; index++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e055      	b.n	8003478 <upload_parameter_float+0x240>
	{
		uint32_t data_buffer = ubah_ke_hex(parametric[1][index]);
 80033cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d0:	4a5f      	ldr	r2, [pc, #380]	; (8003550 <upload_parameter_float+0x318>)
 80033d2:	330c      	adds	r3, #12
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 fff3 	bl	80073c4 <ubah_ke_hex>
 80033de:	60b8      	str	r0, [r7, #8]
		flash_write_byte((uint8_t)(data_buffer      ), 0x042000+(index*4));
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033e8:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f005 f953 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x042001+(index*4));
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 8003406:	3301      	adds	r3, #1
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f005 f946 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x042002+(index*4));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	b2da      	uxtb	r2, r3
 8003416:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 8003420:	3302      	adds	r3, #2
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f005 f939 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x042003+(index*4));
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	b2da      	uxtb	r2, r3
 8003430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	f503 2384 	add.w	r3, r3, #270336	; 0x42000
 800343a:	3303      	adds	r3, #3
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f005 f92c 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 8003444:	2101      	movs	r1, #1
 8003446:	2009      	movs	r0, #9
 8003448:	f005 faba 	bl	80089c0 <lcd_set_cursor>
 800344c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800344e:	2264      	movs	r2, #100	; 0x64
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	da00      	bge.n	800345a <upload_parameter_float+0x222>
 8003458:	333f      	adds	r3, #63	; 0x3f
 800345a:	119b      	asrs	r3, r3, #6
 800345c:	4618      	mov	r0, r3
 800345e:	f005 facd 	bl	80089fc <lcd_int>
 8003462:	483a      	ldr	r0, [pc, #232]	; (800354c <upload_parameter_float+0x314>)
 8003464:	f005 fa90 	bl	8008988 <lcd_print>
		count ++;
 8003468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800346a:	3301      	adds	r3, #1
 800346c:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<12; index++)
 800346e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003472:	3301      	adds	r3, #1
 8003474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800347c:	2b0b      	cmp	r3, #11
 800347e:	d9a5      	bls.n	80033cc <upload_parameter_float+0x194>
	}

	/* crossover output 1 */
	for(uint8_t index=0; index<7; index++)
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003486:	e054      	b.n	8003532 <upload_parameter_float+0x2fa>
	{
		uint32_t data_buffer = ubah_ke_hex(crossover[0][index]);
 8003488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800348c:	4a31      	ldr	r2, [pc, #196]	; (8003554 <upload_parameter_float+0x31c>)
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	4618      	mov	r0, r3
 8003494:	f003 ff96 	bl	80073c4 <ubah_ke_hex>
 8003498:	60f8      	str	r0, [r7, #12]
		flash_write_byte((uint8_t)(data_buffer      ), 0x043000+(index*4));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034a2:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f005 f8f6 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x043001+(index*4));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f503 2386 	add.w	r3, r3, #274432	; 0x43000
 80034c0:	3301      	adds	r3, #1
 80034c2:	4619      	mov	r1, r3
 80034c4:	4610      	mov	r0, r2
 80034c6:	f005 f8e9 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x043002+(index*4));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	f503 2386 	add.w	r3, r3, #274432	; 0x43000
 80034da:	3302      	adds	r3, #2
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f005 f8dc 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x043003+(index*4));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	0e1b      	lsrs	r3, r3, #24
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f503 2386 	add.w	r3, r3, #274432	; 0x43000
 80034f4:	3303      	adds	r3, #3
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f005 f8cf 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 80034fe:	2101      	movs	r1, #1
 8003500:	2009      	movs	r0, #9
 8003502:	f005 fa5d 	bl	80089c0 <lcd_set_cursor>
 8003506:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003508:	2264      	movs	r2, #100	; 0x64
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	da00      	bge.n	8003514 <upload_parameter_float+0x2dc>
 8003512:	333f      	adds	r3, #63	; 0x3f
 8003514:	119b      	asrs	r3, r3, #6
 8003516:	4618      	mov	r0, r3
 8003518:	f005 fa70 	bl	80089fc <lcd_int>
 800351c:	480b      	ldr	r0, [pc, #44]	; (800354c <upload_parameter_float+0x314>)
 800351e:	f005 fa33 	bl	8008988 <lcd_print>
		count ++;
 8003522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003524:	3301      	adds	r3, #1
 8003526:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<7; index++)
 8003528:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800352c:	3301      	adds	r3, #1
 800352e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003532:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003536:	2b06      	cmp	r3, #6
 8003538:	d9a6      	bls.n	8003488 <upload_parameter_float+0x250>
	}

	/* crossover output 2 */
	for(uint8_t index=0; index<7; index++)
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003540:	e060      	b.n	8003604 <upload_parameter_float+0x3cc>
 8003542:	bf00      	nop
 8003544:	0800dafc 	.word	0x0800dafc
 8003548:	20000448 	.word	0x20000448
 800354c:	0800db08 	.word	0x0800db08
 8003550:	200003e8 	.word	0x200003e8
 8003554:	20000378 	.word	0x20000378
	{
		uint32_t data_buffer = ubah_ke_hex(crossover[1][index]);
 8003558:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800355c:	4aa0      	ldr	r2, [pc, #640]	; (80037e0 <upload_parameter_float+0x5a8>)
 800355e:	3307      	adds	r3, #7
 8003560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 ff2d 	bl	80073c4 <ubah_ke_hex>
 800356a:	6138      	str	r0, [r7, #16]
		flash_write_byte((uint8_t)(data_buffer      ), 0x044000+(index*4));
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003574:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f005 f88d 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x044001+(index*4));
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	b2da      	uxtb	r2, r3
 8003588:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	f503 2388 	add.w	r3, r3, #278528	; 0x44000
 8003592:	3301      	adds	r3, #1
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f005 f880 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x044002+(index*4));
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	f503 2388 	add.w	r3, r3, #278528	; 0x44000
 80035ac:	3302      	adds	r3, #2
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f005 f873 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x044003+(index*4));
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	0e1b      	lsrs	r3, r3, #24
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	f503 2388 	add.w	r3, r3, #278528	; 0x44000
 80035c6:	3303      	adds	r3, #3
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f005 f866 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 80035d0:	2101      	movs	r1, #1
 80035d2:	2009      	movs	r0, #9
 80035d4:	f005 f9f4 	bl	80089c0 <lcd_set_cursor>
 80035d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035da:	2264      	movs	r2, #100	; 0x64
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da00      	bge.n	80035e6 <upload_parameter_float+0x3ae>
 80035e4:	333f      	adds	r3, #63	; 0x3f
 80035e6:	119b      	asrs	r3, r3, #6
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 fa07 	bl	80089fc <lcd_int>
 80035ee:	487d      	ldr	r0, [pc, #500]	; (80037e4 <upload_parameter_float+0x5ac>)
 80035f0:	f005 f9ca 	bl	8008988 <lcd_print>
		count ++;
 80035f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035f6:	3301      	adds	r3, #1
 80035f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<7; index++)
 80035fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80035fe:	3301      	adds	r3, #1
 8003600:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003604:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003608:	2b06      	cmp	r3, #6
 800360a:	d9a5      	bls.n	8003558 <upload_parameter_float+0x320>
	}

	/* crossover output 3 */
	for(uint8_t index=0; index<7; index++)
 800360c:	2300      	movs	r3, #0
 800360e:	f887 3020 	strb.w	r3, [r7, #32]
 8003612:	e055      	b.n	80036c0 <upload_parameter_float+0x488>
	{
		uint32_t data_buffer = ubah_ke_hex(crossover[2][index]);
 8003614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <upload_parameter_float+0x5a8>)
 800361a:	330e      	adds	r3, #14
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fecf 	bl	80073c4 <ubah_ke_hex>
 8003626:	6178      	str	r0, [r7, #20]
		flash_write_byte((uint8_t)(data_buffer      ), 0x045000+(index*4));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003630:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f005 f82f 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x045001+(index*4));
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	b2da      	uxtb	r2, r3
 8003644:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 800364e:	3301      	adds	r3, #1
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f005 f822 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x045002+(index*4));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2da      	uxtb	r2, r3
 800365e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 8003668:	3302      	adds	r3, #2
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f005 f815 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x045003+(index*4));
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	0e1b      	lsrs	r3, r3, #24
 8003676:	b2da      	uxtb	r2, r3
 8003678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	f503 238a 	add.w	r3, r3, #282624	; 0x45000
 8003682:	3303      	adds	r3, #3
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f005 f808 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 800368c:	2101      	movs	r1, #1
 800368e:	2009      	movs	r0, #9
 8003690:	f005 f996 	bl	80089c0 <lcd_set_cursor>
 8003694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003696:	2264      	movs	r2, #100	; 0x64
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	da00      	bge.n	80036a2 <upload_parameter_float+0x46a>
 80036a0:	333f      	adds	r3, #63	; 0x3f
 80036a2:	119b      	asrs	r3, r3, #6
 80036a4:	4618      	mov	r0, r3
 80036a6:	f005 f9a9 	bl	80089fc <lcd_int>
 80036aa:	484e      	ldr	r0, [pc, #312]	; (80037e4 <upload_parameter_float+0x5ac>)
 80036ac:	f005 f96c 	bl	8008988 <lcd_print>
		count ++;
 80036b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036b2:	3301      	adds	r3, #1
 80036b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<7; index++)
 80036b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ba:	3301      	adds	r3, #1
 80036bc:	f887 3020 	strb.w	r3, [r7, #32]
 80036c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d9a5      	bls.n	8003614 <upload_parameter_float+0x3dc>
	}

	/* crossover output 4 */
	for(uint8_t index=0; index<7; index++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e04e      	b.n	800376c <upload_parameter_float+0x534>
	{
		uint32_t data_buffer = ubah_ke_hex(crossover[3][index]);
 80036ce:	7ffb      	ldrb	r3, [r7, #31]
 80036d0:	4a43      	ldr	r2, [pc, #268]	; (80037e0 <upload_parameter_float+0x5a8>)
 80036d2:	3315      	adds	r3, #21
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 fe73 	bl	80073c4 <ubah_ke_hex>
 80036de:	61b8      	str	r0, [r7, #24]
		flash_write_byte((uint8_t)(data_buffer      ), 0x046000+(index*4));
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	7ffb      	ldrb	r3, [r7, #31]
 80036e6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f004 ffd4 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 8 ), 0x046001+(index*4));
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8003702:	3301      	adds	r3, #1
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f004 ffc8 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 16), 0x046002+(index*4));
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	0c1b      	lsrs	r3, r3, #16
 8003710:	b2da      	uxtb	r2, r3
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 800371a:	3302      	adds	r3, #2
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f004 ffbc 	bl	800869c <flash_write_byte>
		flash_write_byte((uint8_t)(data_buffer >> 24), 0x046003+(index*4));
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	0e1b      	lsrs	r3, r3, #24
 8003728:	b2da      	uxtb	r2, r3
 800372a:	7ffb      	ldrb	r3, [r7, #31]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f503 238c 	add.w	r3, r3, #286720	; 0x46000
 8003732:	3303      	adds	r3, #3
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f004 ffb0 	bl	800869c <flash_write_byte>

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 800373c:	2101      	movs	r1, #1
 800373e:	2009      	movs	r0, #9
 8003740:	f005 f93e 	bl	80089c0 <lcd_set_cursor>
 8003744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003746:	2264      	movs	r2, #100	; 0x64
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	da00      	bge.n	8003752 <upload_parameter_float+0x51a>
 8003750:	333f      	adds	r3, #63	; 0x3f
 8003752:	119b      	asrs	r3, r3, #6
 8003754:	4618      	mov	r0, r3
 8003756:	f005 f951 	bl	80089fc <lcd_int>
 800375a:	4822      	ldr	r0, [pc, #136]	; (80037e4 <upload_parameter_float+0x5ac>)
 800375c:	f005 f914 	bl	8008988 <lcd_print>
		count ++;
 8003760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003762:	3301      	adds	r3, #1
 8003764:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<7; index++)
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	3301      	adds	r3, #1
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d9ad      	bls.n	80036ce <upload_parameter_float+0x496>
	}

	/* mute channel */
	for(uint8_t index=0; index<6; index++)
 8003772:	2300      	movs	r3, #0
 8003774:	77bb      	strb	r3, [r7, #30]
 8003776:	e02b      	b.n	80037d0 <upload_parameter_float+0x598>
	{
		if(mute[index] == true){ flash_write_byte(0xff, 0x047000+index); }
 8003778:	7fbb      	ldrb	r3, [r7, #30]
 800377a:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <upload_parameter_float+0x5b0>)
 800377c:	5cd3      	ldrb	r3, [r2, r3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <upload_parameter_float+0x55a>
 8003782:	7fbb      	ldrb	r3, [r7, #30]
 8003784:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 8003788:	4619      	mov	r1, r3
 800378a:	20ff      	movs	r0, #255	; 0xff
 800378c:	f004 ff86 	bl	800869c <flash_write_byte>
 8003790:	e006      	b.n	80037a0 <upload_parameter_float+0x568>
		else
		{
			flash_write_byte(0x00, 0x047000+index);
 8003792:	7fbb      	ldrb	r3, [r7, #30]
 8003794:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
 8003798:	4619      	mov	r1, r3
 800379a:	2000      	movs	r0, #0
 800379c:	f004 ff7e 	bl	800869c <flash_write_byte>
		}

		lcd_set_cursor(9,1); lcd_int((count*100)/64); lcd_print(" %");
 80037a0:	2101      	movs	r1, #1
 80037a2:	2009      	movs	r0, #9
 80037a4:	f005 f90c 	bl	80089c0 <lcd_set_cursor>
 80037a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037aa:	2264      	movs	r2, #100	; 0x64
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da00      	bge.n	80037b6 <upload_parameter_float+0x57e>
 80037b4:	333f      	adds	r3, #63	; 0x3f
 80037b6:	119b      	asrs	r3, r3, #6
 80037b8:	4618      	mov	r0, r3
 80037ba:	f005 f91f 	bl	80089fc <lcd_int>
 80037be:	4809      	ldr	r0, [pc, #36]	; (80037e4 <upload_parameter_float+0x5ac>)
 80037c0:	f005 f8e2 	bl	8008988 <lcd_print>
		count ++;
 80037c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037c6:	3301      	adds	r3, #1
 80037c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint8_t index=0; index<6; index++)
 80037ca:	7fbb      	ldrb	r3, [r7, #30]
 80037cc:	3301      	adds	r3, #1
 80037ce:	77bb      	strb	r3, [r7, #30]
 80037d0:	7fbb      	ldrb	r3, [r7, #30]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d9d0      	bls.n	8003778 <upload_parameter_float+0x540>
	}

}
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000378 	.word	0x20000378
 80037e4:	0800db08 	.word	0x0800db08
 80037e8:	2000031c 	.word	0x2000031c

080037ec <save_parameter>:

void save_parameter(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
	dsp_mute(0);
 80037f2:	2000      	movs	r0, #0
 80037f4:	f004 fd58 	bl	80082a8 <dsp_mute>

	lcd_clear();
 80037f8:	f005 f974 	bl	8008ae4 <lcd_clear>
	lcd_set_cursor(0,0); lcd_print("save parameter  ");
 80037fc:	2100      	movs	r1, #0
 80037fe:	2000      	movs	r0, #0
 8003800:	f005 f8de 	bl	80089c0 <lcd_set_cursor>
 8003804:	4838      	ldr	r0, [pc, #224]	; (80038e8 <save_parameter+0xfc>)
 8003806:	f005 f8bf 	bl	8008988 <lcd_print>
	lcd_set_cursor(0,1); lcd_print("read dsp : ");
 800380a:	2101      	movs	r1, #1
 800380c:	2000      	movs	r0, #0
 800380e:	f005 f8d7 	bl	80089c0 <lcd_set_cursor>
 8003812:	4836      	ldr	r0, [pc, #216]	; (80038ec <save_parameter+0x100>)
 8003814:	f005 f8b8 	bl	8008988 <lcd_print>

	dsp_read_data(0, 0, data_buffer, 4096);
 8003818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800381c:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <save_parameter+0x104>)
 800381e:	2100      	movs	r1, #0
 8003820:	2000      	movs	r0, #0
 8003822:	f004 fcf1 	bl	8008208 <dsp_read_data>

	flash_erase_block(3);
 8003826:	2003      	movs	r0, #3
 8003828:	f004 ff6c 	bl	8008704 <flash_erase_block>
	HAL_Delay(500);
 800382c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003830:	f001 fa00 	bl	8004c34 <HAL_Delay>

	for(uint16_t index=0; index<4096; index++)
 8003834:	2300      	movs	r3, #0
 8003836:	80fb      	strh	r3, [r7, #6]
 8003838:	e01f      	b.n	800387a <save_parameter+0x8e>
	{
		flash_write_byte(data_buffer[index], index+0x030000);
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <save_parameter+0x104>)
 800383e:	5cd2      	ldrb	r2, [r2, r3]
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f004 ff27 	bl	800869c <flash_write_byte>
		lcd_set_cursor(11,1); lcd_int((index*100)/4096); lcd_print(" %");
 800384e:	2101      	movs	r1, #1
 8003850:	200b      	movs	r0, #11
 8003852:	f005 f8b5 	bl	80089c0 <lcd_set_cursor>
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2264      	movs	r2, #100	; 0x64
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	da01      	bge.n	8003866 <save_parameter+0x7a>
 8003862:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003866:	131b      	asrs	r3, r3, #12
 8003868:	4618      	mov	r0, r3
 800386a:	f005 f8c7 	bl	80089fc <lcd_int>
 800386e:	4821      	ldr	r0, [pc, #132]	; (80038f4 <save_parameter+0x108>)
 8003870:	f005 f88a 	bl	8008988 <lcd_print>
	for(uint16_t index=0; index<4096; index++)
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	3301      	adds	r3, #1
 8003878:	80fb      	strh	r3, [r7, #6]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	d3db      	bcc.n	800383a <save_parameter+0x4e>
	}

	flash_erase_block(4);
 8003882:	2004      	movs	r0, #4
 8003884:	f004 ff3e 	bl	8008704 <flash_erase_block>
	HAL_Delay(500);
 8003888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800388c:	f001 f9d2 	bl	8004c34 <HAL_Delay>

	lcd_set_cursor(0,1); lcd_print("                ");
 8003890:	2101      	movs	r1, #1
 8003892:	2000      	movs	r0, #0
 8003894:	f005 f894 	bl	80089c0 <lcd_set_cursor>
 8003898:	4817      	ldr	r0, [pc, #92]	; (80038f8 <save_parameter+0x10c>)
 800389a:	f005 f875 	bl	8008988 <lcd_print>
	upload_parameter_float();
 800389e:	f7ff fccb 	bl	8003238 <upload_parameter_float>


	HAL_Delay(500);
 80038a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038a6:	f001 f9c5 	bl	8004c34 <HAL_Delay>
	channel = 0; page = 1; sub_page = pos = 0; prev = 1; led_sel(0); lcd_refresh = true; lcd_clear();
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <save_parameter+0x110>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <save_parameter+0x114>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <save_parameter+0x118>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <save_parameter+0x118>)
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <save_parameter+0x11c>)
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <save_parameter+0x120>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7fd fd50 	bl	8001370 <led_sel>
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <save_parameter+0x124>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	f005 f905 	bl	8008ae4 <lcd_clear>

	dsp_unmute(0);
 80038da:	2000      	movs	r0, #0
 80038dc:	f004 fd1e 	bl	800831c <dsp_unmute>
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0800db0c 	.word	0x0800db0c
 80038ec:	0800db20 	.word	0x0800db20
 80038f0:	200004b8 	.word	0x200004b8
 80038f4:	0800db08 	.word	0x0800db08
 80038f8:	0800db2c 	.word	0x0800db2c
 80038fc:	20000214 	.word	0x20000214
 8003900:	20000000 	.word	0x20000000
 8003904:	20000216 	.word	0x20000216
 8003908:	20000215 	.word	0x20000215
 800390c:	20000217 	.word	0x20000217
 8003910:	20000001 	.word	0x20000001

08003914 <reset_parameter>:

void reset_parameter(void)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
	lcd_clear();
 800391e:	f005 f8e1 	bl	8008ae4 <lcd_clear>
	uint8_t data = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003928:	f102 0201 	add.w	r2, r2, #1
 800392c:	7013      	strb	r3, [r2, #0]
	while(1)
	{
		lcd_set_cursor(0,0); lcd_print("reset dsp ?     ");
 800392e:	2100      	movs	r1, #0
 8003930:	2000      	movs	r0, #0
 8003932:	f005 f845 	bl	80089c0 <lcd_set_cursor>
 8003936:	48a4      	ldr	r0, [pc, #656]	; (8003bc8 <reset_parameter+0x2b4>)
 8003938:	f005 f826 	bl	8008988 <lcd_print>
		lcd_set_cursor(0,1); lcd_print("rst:yes  save:no");
 800393c:	2101      	movs	r1, #1
 800393e:	2000      	movs	r0, #0
 8003940:	f005 f83e 	bl	80089c0 <lcd_set_cursor>
 8003944:	48a1      	ldr	r0, [pc, #644]	; (8003bcc <reset_parameter+0x2b8>)
 8003946:	f005 f81f 	bl	8008988 <lcd_print>

		data = baca_tombol();
 800394a:	f7fd fd7d 	bl	8001448 <baca_tombol>
 800394e:	4603      	mov	r3, r0
 8003950:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003954:	f102 0201 	add.w	r2, r2, #1
 8003958:	7013      	strb	r3, [r2, #0]
		if(data == 8 || data == 10){ while(baca_tombol() != 0); break; }
 800395a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800395e:	f103 0301 	add.w	r3, r3, #1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d006      	beq.n	8003976 <reset_parameter+0x62>
 8003968:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800396c:	f103 0301 	add.w	r3, r3, #1
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b0a      	cmp	r3, #10
 8003974:	d1db      	bne.n	800392e <reset_parameter+0x1a>
 8003976:	bf00      	nop
 8003978:	f7fd fd66 	bl	8001448 <baca_tombol>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1fa      	bne.n	8003978 <reset_parameter+0x64>
	}

	// batal reset dsp
	if(data == 10)
 8003982:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003986:	f103 0301 	add.w	r3, r3, #1
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b0a      	cmp	r3, #10
 800398e:	d105      	bne.n	800399c <reset_parameter+0x88>
	{
		lcd_clear();
 8003990:	f005 f8a8 	bl	8008ae4 <lcd_clear>
		lcd_refresh = true;
 8003994:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <reset_parameter+0x2bc>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
		{
			lcd_set_cursor(0,0); lcd_print("reset done     !");
			lcd_set_cursor(0,1); lcd_print("please restart  ");
		}
	}
}
 800399a:	e1eb      	b.n	8003d74 <reset_parameter+0x460>
	else if(data == 8)
 800399c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039a0:	f103 0301 	add.w	r3, r3, #1
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	f040 81e4 	bne.w	8003d74 <reset_parameter+0x460>
		lcd_set_cursor(0,0); lcd_print("reset dsp !     ");
 80039ac:	2100      	movs	r1, #0
 80039ae:	2000      	movs	r0, #0
 80039b0:	f005 f806 	bl	80089c0 <lcd_set_cursor>
 80039b4:	4887      	ldr	r0, [pc, #540]	; (8003bd4 <reset_parameter+0x2c0>)
 80039b6:	f004 ffe7 	bl	8008988 <lcd_print>
		lcd_set_cursor(0,1); lcd_print("rst :           ");
 80039ba:	2101      	movs	r1, #1
 80039bc:	2000      	movs	r0, #0
 80039be:	f004 ffff 	bl	80089c0 <lcd_set_cursor>
 80039c2:	4885      	ldr	r0, [pc, #532]	; (8003bd8 <reset_parameter+0x2c4>)
 80039c4:	f004 ffe0 	bl	8008988 <lcd_print>
		dsp_mute(0);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f004 fc6d 	bl	80082a8 <dsp_mute>
		for(uint8_t i=0; i<6; i++){ mute[i] = false; gain[i] = 0; }
 80039ce:	2300      	movs	r3, #0
 80039d0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80039d4:	f102 0207 	add.w	r2, r2, #7
 80039d8:	7013      	strb	r3, [r2, #0]
 80039da:	e01c      	b.n	8003a16 <reset_parameter+0x102>
 80039dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039e0:	f103 0307 	add.w	r3, r3, #7
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	4a7d      	ldr	r2, [pc, #500]	; (8003bdc <reset_parameter+0x2c8>)
 80039e8:	2100      	movs	r1, #0
 80039ea:	54d1      	strb	r1, [r2, r3]
 80039ec:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039f0:	f103 0307 	add.w	r3, r3, #7
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <reset_parameter+0x2cc>)
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003a00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a04:	f103 0307 	add.w	r3, r3, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003a10:	f102 0207 	add.w	r2, r2, #7
 8003a14:	7013      	strb	r3, [r2, #0]
 8003a16:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003a1a:	f103 0307 	add.w	r3, r3, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d9db      	bls.n	80039dc <reset_parameter+0xc8>
		parametric[0][0] = parametric[0][3] = parametric[0][6] = parametric[0][9]  = 100;
 8003a24:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <reset_parameter+0x2d0>)
 8003a26:	4a70      	ldr	r2, [pc, #448]	; (8003be8 <reset_parameter+0x2d4>)
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
 8003a2a:	4b6e      	ldr	r3, [pc, #440]	; (8003be4 <reset_parameter+0x2d0>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	4a6d      	ldr	r2, [pc, #436]	; (8003be4 <reset_parameter+0x2d0>)
 8003a30:	6193      	str	r3, [r2, #24]
 8003a32:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <reset_parameter+0x2d0>)
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4a6b      	ldr	r2, [pc, #428]	; (8003be4 <reset_parameter+0x2d0>)
 8003a38:	60d3      	str	r3, [r2, #12]
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <reset_parameter+0x2d0>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4a69      	ldr	r2, [pc, #420]	; (8003be4 <reset_parameter+0x2d0>)
 8003a40:	6013      	str	r3, [r2, #0]
		parametric[1][0] = parametric[1][3] = parametric[1][6] = parametric[1][9]  = 100;
 8003a42:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <reset_parameter+0x2d0>)
 8003a44:	4a68      	ldr	r2, [pc, #416]	; (8003be8 <reset_parameter+0x2d4>)
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
 8003a48:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <reset_parameter+0x2d0>)
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <reset_parameter+0x2d0>)
 8003a4e:	6493      	str	r3, [r2, #72]	; 0x48
 8003a50:	4b64      	ldr	r3, [pc, #400]	; (8003be4 <reset_parameter+0x2d0>)
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	4a63      	ldr	r2, [pc, #396]	; (8003be4 <reset_parameter+0x2d0>)
 8003a56:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003a58:	4b62      	ldr	r3, [pc, #392]	; (8003be4 <reset_parameter+0x2d0>)
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	4a61      	ldr	r2, [pc, #388]	; (8003be4 <reset_parameter+0x2d0>)
 8003a5e:	6313      	str	r3, [r2, #48]	; 0x30
		parametric[0][1] = parametric[0][4] = parametric[0][7] = parametric[0][10] = 0;
 8003a60:	4b60      	ldr	r3, [pc, #384]	; (8003be4 <reset_parameter+0x2d0>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
 8003a68:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <reset_parameter+0x2d0>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	4a5d      	ldr	r2, [pc, #372]	; (8003be4 <reset_parameter+0x2d0>)
 8003a6e:	61d3      	str	r3, [r2, #28]
 8003a70:	4b5c      	ldr	r3, [pc, #368]	; (8003be4 <reset_parameter+0x2d0>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4a5b      	ldr	r2, [pc, #364]	; (8003be4 <reset_parameter+0x2d0>)
 8003a76:	6113      	str	r3, [r2, #16]
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <reset_parameter+0x2d0>)
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	4a59      	ldr	r2, [pc, #356]	; (8003be4 <reset_parameter+0x2d0>)
 8003a7e:	6053      	str	r3, [r2, #4]
		parametric[1][1] = parametric[1][4] = parametric[1][7] = parametric[1][10] = 0;
 8003a80:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <reset_parameter+0x2d0>)
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
 8003a88:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <reset_parameter+0x2d0>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <reset_parameter+0x2d0>)
 8003a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a90:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <reset_parameter+0x2d0>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	4a53      	ldr	r2, [pc, #332]	; (8003be4 <reset_parameter+0x2d0>)
 8003a96:	6413      	str	r3, [r2, #64]	; 0x40
 8003a98:	4b52      	ldr	r3, [pc, #328]	; (8003be4 <reset_parameter+0x2d0>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	4a51      	ldr	r2, [pc, #324]	; (8003be4 <reset_parameter+0x2d0>)
 8003a9e:	6353      	str	r3, [r2, #52]	; 0x34
		parametric[0][2] = parametric[0][5] = parametric[0][8] = parametric[0][11] = 2.0;
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <reset_parameter+0x2d0>)
 8003aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa8:	4b4e      	ldr	r3, [pc, #312]	; (8003be4 <reset_parameter+0x2d0>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <reset_parameter+0x2d0>)
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <reset_parameter+0x2d0>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <reset_parameter+0x2d0>)
 8003ab6:	6153      	str	r3, [r2, #20]
 8003ab8:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <reset_parameter+0x2d0>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	4a49      	ldr	r2, [pc, #292]	; (8003be4 <reset_parameter+0x2d0>)
 8003abe:	6093      	str	r3, [r2, #8]
		parametric[1][2] = parametric[1][5] = parametric[1][8] = parametric[1][11] = 2.0;
 8003ac0:	4b48      	ldr	r3, [pc, #288]	; (8003be4 <reset_parameter+0x2d0>)
 8003ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ac8:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <reset_parameter+0x2d0>)
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	4a45      	ldr	r2, [pc, #276]	; (8003be4 <reset_parameter+0x2d0>)
 8003ace:	6513      	str	r3, [r2, #80]	; 0x50
 8003ad0:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <reset_parameter+0x2d0>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	4a43      	ldr	r2, [pc, #268]	; (8003be4 <reset_parameter+0x2d0>)
 8003ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad8:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <reset_parameter+0x2d0>)
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <reset_parameter+0x2d0>)
 8003ade:	6393      	str	r3, [r2, #56]	; 0x38
		for(uint8_t i=0; i<4; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003ae6:	f102 0206 	add.w	r2, r2, #6
 8003aea:	7013      	strb	r3, [r2, #0]
 8003aec:	e0a0      	b.n	8003c30 <reset_parameter+0x31c>
			crossover[i][0] = 20000;
 8003aee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003af2:	f103 0306 	add.w	r3, r3, #6
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	493c      	ldr	r1, [pc, #240]	; (8003bec <reset_parameter+0x2d8>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <reset_parameter+0x2dc>)
 8003b06:	601a      	str	r2, [r3, #0]
			crossover[i][1] = 0;
 8003b08:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b0c:	f103 0306 	add.w	r3, r3, #6
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	4936      	ldr	r1, [pc, #216]	; (8003bec <reset_parameter+0x2d8>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3304      	adds	r3, #4
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
			crossover[i][2] = 20;
 8003b26:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b2a:	f103 0306 	add.w	r3, r3, #6
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	492e      	ldr	r1, [pc, #184]	; (8003bec <reset_parameter+0x2d8>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	4a2d      	ldr	r2, [pc, #180]	; (8003bf4 <reset_parameter+0x2e0>)
 8003b40:	601a      	str	r2, [r3, #0]
			crossover[i][3] = 0;
 8003b42:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b46:	f103 0306 	add.w	r3, r3, #6
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	4927      	ldr	r1, [pc, #156]	; (8003bec <reset_parameter+0x2d8>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	330c      	adds	r3, #12
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
			crossover[i][4] = -1;
 8003b60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b64:	f103 0306 	add.w	r3, r3, #6
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	4920      	ldr	r1, [pc, #128]	; (8003bec <reset_parameter+0x2d8>)
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	3310      	adds	r3, #16
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <reset_parameter+0x2e4>)
 8003b7a:	601a      	str	r2, [r3, #0]
			crossover[i][5] = 0;
 8003b7c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b80:	f103 0306 	add.w	r3, r3, #6
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	4919      	ldr	r1, [pc, #100]	; (8003bec <reset_parameter+0x2d8>)
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3314      	adds	r3, #20
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
			if(i<2){ crossover[i][6] = 0; }
 8003b9a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b9e:	f103 0306 	add.w	r3, r3, #6
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d829      	bhi.n	8003bfc <reset_parameter+0x2e8>
 8003ba8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003bac:	f103 0306 	add.w	r3, r3, #6
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	490e      	ldr	r1, [pc, #56]	; (8003bec <reset_parameter+0x2d8>)
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3318      	adds	r3, #24
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e028      	b.n	8003c1a <reset_parameter+0x306>
 8003bc8:	0800db40 	.word	0x0800db40
 8003bcc:	0800db54 	.word	0x0800db54
 8003bd0:	20000001 	.word	0x20000001
 8003bd4:	0800db68 	.word	0x0800db68
 8003bd8:	0800db7c 	.word	0x0800db7c
 8003bdc:	2000031c 	.word	0x2000031c
 8003be0:	20000448 	.word	0x20000448
 8003be4:	200003e8 	.word	0x200003e8
 8003be8:	42c80000 	.word	0x42c80000
 8003bec:	20000378 	.word	0x20000378
 8003bf0:	469c4000 	.word	0x469c4000
 8003bf4:	41a00000 	.word	0x41a00000
 8003bf8:	bf800000 	.word	0xbf800000
			else   { crossover[i][6] = 1; }
 8003bfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c00:	f103 0306 	add.w	r3, r3, #6
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	495e      	ldr	r1, [pc, #376]	; (8003d80 <reset_parameter+0x46c>)
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3318      	adds	r3, #24
 8003c14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c18:	601a      	str	r2, [r3, #0]
		for(uint8_t i=0; i<4; i++)
 8003c1a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c1e:	f103 0306 	add.w	r3, r3, #6
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c2a:	f102 0206 	add.w	r2, r2, #6
 8003c2e:	7013      	strb	r3, [r2, #0]
 8003c30:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c34:	f103 0306 	add.w	r3, r3, #6
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	f67f af57 	bls.w	8003aee <reset_parameter+0x1da>
		for(uint16_t i=0; i<4096; i++){ rst_buffer[i] = flash_read_byte(0x010000+i); }
 8003c40:	2300      	movs	r3, #0
 8003c42:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c46:	f102 0204 	add.w	r2, r2, #4
 8003c4a:	8013      	strh	r3, [r2, #0]
 8003c4c:	e01f      	b.n	8003c8e <reset_parameter+0x37a>
 8003c4e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c52:	f103 0304 	add.w	r3, r3, #4
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003c5c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c60:	f102 0204 	add.w	r2, r2, #4
 8003c64:	8814      	ldrh	r4, [r2, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fce4 	bl	8008634 <flash_read_byte>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	3b08      	subs	r3, #8
 8003c76:	551a      	strb	r2, [r3, r4]
 8003c78:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c7c:	f103 0304 	add.w	r3, r3, #4
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c88:	f102 0204 	add.w	r2, r2, #4
 8003c8c:	8013      	strh	r3, [r2, #0]
 8003c8e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c92:	f103 0304 	add.w	r3, r3, #4
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d3d7      	bcc.n	8003c4e <reset_parameter+0x33a>
		flash_erase_block(3);
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	f004 fd30 	bl	8008704 <flash_erase_block>
		HAL_Delay(500);
 8003ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ca8:	f000 ffc4 	bl	8004c34 <HAL_Delay>
		for(uint16_t index=0; index<4096; index++)
 8003cac:	2300      	movs	r3, #0
 8003cae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003cb2:	f102 0202 	add.w	r2, r2, #2
 8003cb6:	8013      	strh	r3, [r2, #0]
 8003cb8:	e035      	b.n	8003d26 <reset_parameter+0x412>
			flash_write_byte(rst_buffer[index], index+0x030000);
 8003cba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cbe:	f103 0302 	add.w	r3, r3, #2
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	3b08      	subs	r3, #8
 8003cca:	5c9a      	ldrb	r2, [r3, r2]
 8003ccc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cd0:	f103 0302 	add.w	r3, r3, #2
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f004 fcdd 	bl	800869c <flash_write_byte>
			lcd_set_cursor(6,1); lcd_int((index*100)/4096); lcd_print(" %");
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	2006      	movs	r0, #6
 8003ce6:	f004 fe6b 	bl	80089c0 <lcd_set_cursor>
 8003cea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003cee:	f103 0302 	add.w	r3, r3, #2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2264      	movs	r2, #100	; 0x64
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	da01      	bge.n	8003d02 <reset_parameter+0x3ee>
 8003cfe:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003d02:	131b      	asrs	r3, r3, #12
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 fe79 	bl	80089fc <lcd_int>
 8003d0a:	481e      	ldr	r0, [pc, #120]	; (8003d84 <reset_parameter+0x470>)
 8003d0c:	f004 fe3c 	bl	8008988 <lcd_print>
		for(uint16_t index=0; index<4096; index++)
 8003d10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d14:	f103 0302 	add.w	r3, r3, #2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003d20:	f102 0202 	add.w	r2, r2, #2
 8003d24:	8013      	strh	r3, [r2, #0]
 8003d26:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003d2a:	f103 0302 	add.w	r3, r3, #2
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d3c1      	bcc.n	8003cba <reset_parameter+0x3a6>
		flash_erase_block(4);
 8003d36:	2004      	movs	r0, #4
 8003d38:	f004 fce4 	bl	8008704 <flash_erase_block>
		HAL_Delay(500);
 8003d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d40:	f000 ff78 	bl	8004c34 <HAL_Delay>
		lcd_set_cursor(0,1); lcd_print("                ");
 8003d44:	2101      	movs	r1, #1
 8003d46:	2000      	movs	r0, #0
 8003d48:	f004 fe3a 	bl	80089c0 <lcd_set_cursor>
 8003d4c:	480e      	ldr	r0, [pc, #56]	; (8003d88 <reset_parameter+0x474>)
 8003d4e:	f004 fe1b 	bl	8008988 <lcd_print>
		upload_parameter_float();
 8003d52:	f7ff fa71 	bl	8003238 <upload_parameter_float>
			lcd_set_cursor(0,0); lcd_print("reset done     !");
 8003d56:	2100      	movs	r1, #0
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f004 fe31 	bl	80089c0 <lcd_set_cursor>
 8003d5e:	480b      	ldr	r0, [pc, #44]	; (8003d8c <reset_parameter+0x478>)
 8003d60:	f004 fe12 	bl	8008988 <lcd_print>
			lcd_set_cursor(0,1); lcd_print("please restart  ");
 8003d64:	2101      	movs	r1, #1
 8003d66:	2000      	movs	r0, #0
 8003d68:	f004 fe2a 	bl	80089c0 <lcd_set_cursor>
 8003d6c:	4808      	ldr	r0, [pc, #32]	; (8003d90 <reset_parameter+0x47c>)
 8003d6e:	f004 fe0b 	bl	8008988 <lcd_print>
			lcd_set_cursor(0,0); lcd_print("reset done     !");
 8003d72:	e7f0      	b.n	8003d56 <reset_parameter+0x442>
}
 8003d74:	bf00      	nop
 8003d76:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}
 8003d80:	20000378 	.word	0x20000378
 8003d84:	0800db08 	.word	0x0800db08
 8003d88:	0800db2c 	.word	0x0800db2c
 8003d8c:	0800db90 	.word	0x0800db90
 8003d90:	0800dba4 	.word	0x0800dba4

08003d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d9a:	f000 fee9 	bl	8004b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d9e:	f000 fa03 	bl	80041a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003da2:	f000 fb7f 	bl	80044a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003da6:	f000 fa45 	bl	8004234 <MX_I2C2_Init>
  MX_SPI2_Init();
 8003daa:	f000 faa7 	bl	80042fc <MX_SPI2_Init>
  MX_SPI1_Init();
 8003dae:	f000 fa6f 	bl	8004290 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003db2:	f000 fad9 	bl	8004368 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003db6:	f000 fb27 	bl	8004408 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dc0:	48bf      	ldr	r0, [pc, #764]	; (80040c0 <main+0x32c>)
 8003dc2:	f001 fa14 	bl	80051ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dcc:	48bc      	ldr	r0, [pc, #752]	; (80040c0 <main+0x32c>)
 8003dce:	f001 fa0e 	bl	80051ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_SET);
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dd8:	48b9      	ldr	r0, [pc, #740]	; (80040c0 <main+0x32c>)
 8003dda:	f001 fa08 	bl	80051ee <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8003dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003de2:	f000 ff27 	bl	8004c34 <HAL_Delay>
	HAL_GPIO_WritePin(DSP_RST_GPIO_Port, DSP_RST_Pin, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dec:	48b5      	ldr	r0, [pc, #724]	; (80040c4 <main+0x330>)
 8003dee:	f001 f9fe 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003df6:	f000 ff1d 	bl	8004c34 <HAL_Delay>
	HAL_GPIO_WritePin(DSP_RST_GPIO_Port, DSP_RST_Pin, GPIO_PIN_SET);
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e00:	48b0      	ldr	r0, [pc, #704]	; (80040c4 <main+0x330>)
 8003e02:	f001 f9f4 	bl	80051ee <HAL_GPIO_WritePin>

	interface_begin();
 8003e06:	f7fd fa15 	bl	8001234 <interface_begin>
	loading_procedure();
 8003e0a:	f7fe fecf 	bl	8002bac <loading_procedure>

	HAL_TIM_Base_Start_IT(&htim2);
 8003e0e:	48ae      	ldr	r0, [pc, #696]	; (80040c8 <main+0x334>)
 8003e10:	f002 feba 	bl	8006b88 <HAL_TIM_Base_Start_IT>
	HAL_Delay(500);
 8003e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e18:	f000 ff0c 	bl	8004c34 <HAL_Delay>

  	// cek koneksi lcd
  	uint8_t ret = HAL_I2C_IsDeviceReady(&hi2c2, 0x27<<1, 10, 100);
 8003e1c:	2364      	movs	r3, #100	; 0x64
 8003e1e:	220a      	movs	r2, #10
 8003e20:	214e      	movs	r1, #78	; 0x4e
 8003e22:	48aa      	ldr	r0, [pc, #680]	; (80040cc <main+0x338>)
 8003e24:	f001 fc56 	bl	80056d4 <HAL_I2C_IsDeviceReady>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	757b      	strb	r3, [r7, #21]

  	if(ret != HAL_OK)
 8003e2c:	7d7b      	ldrb	r3, [r7, #21]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <main+0xa2>
  	{
  		Error_Handler();
 8003e32:	f000 fc41 	bl	80046b8 <Error_Handler>
  	}

  	uint16_t id = flash_read_id();
 8003e36:	f004 fc97 	bl	8008768 <flash_read_id>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	827b      	strh	r3, [r7, #18]

  	if((id == 0x00) || (id != 0xEF17))
 8003e3e:	8a7b      	ldrh	r3, [r7, #18]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <main+0xba>
 8003e44:	8a7b      	ldrh	r3, [r7, #18]
 8003e46:	f64e 7217 	movw	r2, #61207	; 0xef17
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d011      	beq.n	8003e72 <main+0xde>
  	{
  		lcd_clear();
 8003e4e:	f004 fe49 	bl	8008ae4 <lcd_clear>
  		lcd_set_cursor(0,0); lcd_print("ERROR FLASH");
 8003e52:	2100      	movs	r1, #0
 8003e54:	2000      	movs	r0, #0
 8003e56:	f004 fdb3 	bl	80089c0 <lcd_set_cursor>
 8003e5a:	489d      	ldr	r0, [pc, #628]	; (80040d0 <main+0x33c>)
 8003e5c:	f004 fd94 	bl	8008988 <lcd_print>
  		lcd_set_cursor(0,1); lcd_print("TIDAK DITEMUKAN");
 8003e60:	2101      	movs	r1, #1
 8003e62:	2000      	movs	r0, #0
 8003e64:	f004 fdac 	bl	80089c0 <lcd_set_cursor>
 8003e68:	489a      	ldr	r0, [pc, #616]	; (80040d4 <main+0x340>)
 8003e6a:	f004 fd8d 	bl	8008988 <lcd_print>

  		Error_Handler();
 8003e6e:	f000 fc23 	bl	80046b8 <Error_Handler>
  	}

  	uint32_t handshake[4] = { 0x00, 0x18, 0x08, 0x00 };
 8003e72:	4b99      	ldr	r3, [pc, #612]	; (80040d8 <main+0x344>)
 8003e74:	463c      	mov	r4, r7
 8003e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  	for(uint8_t i=0; i<4; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	75fb      	strb	r3, [r7, #23]
 8003e80:	e025      	b.n	8003ece <main+0x13a>
  	{
  		if(flash_read_byte(0x020000+i) != handshake[i])
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fbd3 	bl	8008634 <flash_read_byte>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f107 0118 	add.w	r1, r7, #24
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d011      	beq.n	8003ec8 <main+0x134>
  		{
  			lcd_clear();
 8003ea4:	f004 fe1e 	bl	8008ae4 <lcd_clear>
  			lcd_set_cursor(0,0); lcd_print("ERROR");
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f004 fd88 	bl	80089c0 <lcd_set_cursor>
 8003eb0:	488a      	ldr	r0, [pc, #552]	; (80040dc <main+0x348>)
 8003eb2:	f004 fd69 	bl	8008988 <lcd_print>
  			lcd_set_cursor(0,1); lcd_print("FLASH CORRUPT");
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f004 fd81 	bl	80089c0 <lcd_set_cursor>
 8003ebe:	4888      	ldr	r0, [pc, #544]	; (80040e0 <main+0x34c>)
 8003ec0:	f004 fd62 	bl	8008988 <lcd_print>

  			Error_Handler();
 8003ec4:	f000 fbf8 	bl	80046b8 <Error_Handler>
  	for(uint8_t i=0; i<4; i++)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d9d6      	bls.n	8003e82 <main+0xee>
  		}
  	}

  	// cek koneksi dsp
  	if(dsp_check_connection(0) != HAL_OK)
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f004 fb2d 	bl	8008534 <dsp_check_connection>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <main+0x170>
  	{
  		lcd_clear();
 8003ee0:	f004 fe00 	bl	8008ae4 <lcd_clear>
  		lcd_set_cursor(0,0); lcd_print("ERROR DSP");
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f004 fd6a 	bl	80089c0 <lcd_set_cursor>
 8003eec:	487d      	ldr	r0, [pc, #500]	; (80040e4 <main+0x350>)
 8003eee:	f004 fd4b 	bl	8008988 <lcd_print>
  		lcd_set_cursor(0,1); lcd_print("TIDAK DITEMUKAN");
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f004 fd63 	bl	80089c0 <lcd_set_cursor>
 8003efa:	4876      	ldr	r0, [pc, #472]	; (80040d4 <main+0x340>)
 8003efc:	f004 fd44 	bl	8008988 <lcd_print>

  		Error_Handler();
 8003f00:	f000 fbda 	bl	80046b8 <Error_Handler>
  	}

  	HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_SET);
 8003f04:	2201      	movs	r2, #1
 8003f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f0a:	486d      	ldr	r0, [pc, #436]	; (80040c0 <main+0x32c>)
 8003f0c:	f001 f96f 	bl	80051ee <HAL_GPIO_WritePin>

  	lcd_clear();
 8003f10:	f004 fde8 	bl	8008ae4 <lcd_clear>
  	interface_welcome();
 8003f14:	f7fe fdfe 	bl	8002b14 <interface_welcome>
  	dsp_unmute(0);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f004 f9ff 	bl	800831c <dsp_unmute>

  	led_sel(0);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f7fd fa26 	bl	8001370 <led_sel>
  	for(uint8_t i=0; i<6; i++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	75bb      	strb	r3, [r7, #22]
 8003f28:	e00a      	b.n	8003f40 <main+0x1ac>
  	{
  		led_mute(i, mute[i]);
 8003f2a:	7dbb      	ldrb	r3, [r7, #22]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	; (80040e8 <main+0x354>)
 8003f2e:	5cd2      	ldrb	r2, [r2, r3]
 8003f30:	7dbb      	ldrb	r3, [r7, #22]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd f991 	bl	800125c <led_mute>
  	for(uint8_t i=0; i<6; i++)
 8003f3a:	7dbb      	ldrb	r3, [r7, #22]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	75bb      	strb	r3, [r7, #22]
 8003f40:	7dbb      	ldrb	r3, [r7, #22]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d9f1      	bls.n	8003f2a <main+0x196>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t nilai_tombol = baca_tombol();
 8003f46:	f7fd fa7f 	bl	8001448 <baca_tombol>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	747b      	strb	r3, [r7, #17]
	      	while(baca_tombol() != 0);
 8003f4e:	bf00      	nop
 8003f50:	f7fd fa7a 	bl	8001448 <baca_tombol>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1fa      	bne.n	8003f50 <main+0x1bc>

	      	switch(nilai_tombol)
 8003f5a:	7c7b      	ldrb	r3, [r7, #17]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	2b09      	cmp	r3, #9
 8003f60:	f200 8107 	bhi.w	8004172 <main+0x3de>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <main+0x1d8>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003fc7 	.word	0x08003fc7
 8003f74:	08003ff9 	.word	0x08003ff9
 8003f78:	0800402b 	.word	0x0800402b
 8003f7c:	0800405d 	.word	0x0800405d
 8003f80:	0800408f 	.word	0x0800408f
 8003f84:	08004105 	.word	0x08004105
 8003f88:	0800413d 	.word	0x0800413d
 8003f8c:	08004143 	.word	0x08004143
 8003f90:	0800416b 	.word	0x0800416b
	      	{
	  	  		case 1 : channel = 0; page = 1; sub_page = pos = 0; prev = 1; led_sel(0); lcd_refresh = true; lcd_clear(); break;
 8003f94:	4b55      	ldr	r3, [pc, #340]	; (80040ec <main+0x358>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <main+0x35c>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	4b54      	ldr	r3, [pc, #336]	; (80040f4 <main+0x360>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <main+0x360>)
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <main+0x364>)
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	4b53      	ldr	r3, [pc, #332]	; (80040fc <main+0x368>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7fd f9db 	bl	8001370 <led_sel>
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <main+0x36c>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	f004 fd90 	bl	8008ae4 <lcd_clear>
 8003fc4:	e0d5      	b.n	8004172 <main+0x3de>
	  	  		case 2 : channel = 1; page = 1; sub_page = pos = 0; prev = 1; led_sel(1); lcd_refresh = true; lcd_clear(); break;
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <main+0x358>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <main+0x35c>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <main+0x360>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <main+0x360>)
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <main+0x364>)
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	4b46      	ldr	r3, [pc, #280]	; (80040fc <main+0x368>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f7fd f9c2 	bl	8001370 <led_sel>
 8003fec:	4b44      	ldr	r3, [pc, #272]	; (8004100 <main+0x36c>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	f004 fd77 	bl	8008ae4 <lcd_clear>
 8003ff6:	e0bc      	b.n	8004172 <main+0x3de>
	  	  		case 3 : channel = 2; page = 2; sub_page = pos = 0; prev = 1; led_sel(2); lcd_refresh = true; lcd_clear(); break;
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <main+0x358>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <main+0x35c>)
 8004000:	2202      	movs	r2, #2
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <main+0x360>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	4b3a      	ldr	r3, [pc, #232]	; (80040f4 <main+0x360>)
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <main+0x364>)
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <main+0x368>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	2002      	movs	r0, #2
 800401a:	f7fd f9a9 	bl	8001370 <led_sel>
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <main+0x36c>)
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	f004 fd5e 	bl	8008ae4 <lcd_clear>
 8004028:	e0a3      	b.n	8004172 <main+0x3de>
	  	  		case 4 : channel = 3; page = 2; sub_page = pos = 0; prev = 1; led_sel(3); lcd_refresh = true; lcd_clear(); break;
 800402a:	4b30      	ldr	r3, [pc, #192]	; (80040ec <main+0x358>)
 800402c:	2203      	movs	r2, #3
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <main+0x35c>)
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <main+0x360>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <main+0x360>)
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <main+0x364>)
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <main+0x368>)
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	2003      	movs	r0, #3
 800404c:	f7fd f990 	bl	8001370 <led_sel>
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <main+0x36c>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	f004 fd45 	bl	8008ae4 <lcd_clear>
 800405a:	e08a      	b.n	8004172 <main+0x3de>
	  	  		case 5 : channel = 4; page = 2; sub_page = pos = 0; prev = 1; led_sel(4); lcd_refresh = true; lcd_clear(); break;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <main+0x358>)
 800405e:	2204      	movs	r2, #4
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <main+0x35c>)
 8004064:	2202      	movs	r2, #2
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <main+0x360>)
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <main+0x360>)
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <main+0x364>)
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <main+0x368>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	2004      	movs	r0, #4
 800407e:	f7fd f977 	bl	8001370 <led_sel>
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <main+0x36c>)
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	f004 fd2c 	bl	8008ae4 <lcd_clear>
 800408c:	e071      	b.n	8004172 <main+0x3de>
	  	  		case 6 : channel = 5; page = 2; sub_page = pos = 0; prev = 1; led_sel(5); lcd_refresh = true; lcd_clear(); break;
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <main+0x358>)
 8004090:	2205      	movs	r2, #5
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <main+0x35c>)
 8004096:	2202      	movs	r2, #2
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <main+0x360>)
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <main+0x360>)
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <main+0x364>)
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <main+0x368>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	2005      	movs	r0, #5
 80040b0:	f7fd f95e 	bl	8001370 <led_sel>
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <main+0x36c>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	f004 fd13 	bl	8008ae4 <lcd_clear>
 80040be:	e058      	b.n	8004172 <main+0x3de>
 80040c0:	40011000 	.word	0x40011000
 80040c4:	40011400 	.word	0x40011400
 80040c8:	20001900 	.word	0x20001900
 80040cc:	20000324 	.word	0x20000324
 80040d0:	0800dbb8 	.word	0x0800dbb8
 80040d4:	0800dbc4 	.word	0x0800dbc4
 80040d8:	0800dbf8 	.word	0x0800dbf8
 80040dc:	0800dbd4 	.word	0x0800dbd4
 80040e0:	0800dbdc 	.word	0x0800dbdc
 80040e4:	0800dbec 	.word	0x0800dbec
 80040e8:	2000031c 	.word	0x2000031c
 80040ec:	20000214 	.word	0x20000214
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000216 	.word	0x20000216
 80040f8:	20000215 	.word	0x20000215
 80040fc:	20000217 	.word	0x20000217
 8004100:	20000001 	.word	0x20000001
	  	  		case 7 :
	  	  			if(sub_page == 0)
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <main+0x3fc>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d131      	bne.n	8004170 <main+0x3dc>
	  	  			{
	  	  				if(mute[channel] == true){ mute[channel] = false; }
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <main+0x400>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <main+0x404>)
 8004114:	5c9b      	ldrb	r3, [r3, r2]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <main+0x394>
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <main+0x400>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <main+0x404>)
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]
 8004126:	e005      	b.n	8004134 <main+0x3a0>
	  	  				else{ mute[channel] = true; }
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <main+0x400>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <main+0x404>)
 8004130:	2101      	movs	r1, #1
 8004132:	5499      	strb	r1, [r3, r2]
	  	  				lcd_refresh = true;
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <main+0x408>)
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
	  	  			}
	  	  		break;
 800413a:	e019      	b.n	8004170 <main+0x3dc>
	  	  		case 8 :
	  	  			reset_parameter();
 800413c:	f7ff fbea 	bl	8003914 <reset_parameter>
	  	  		break;
 8004140:	e017      	b.n	8004172 <main+0x3de>
	  	  		case 9 :
	  	  			if(sub_page == 0){ sub_page = 1; }
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <main+0x3fc>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <main+0x3be>
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <main+0x3fc>)
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e002      	b.n	8004158 <main+0x3c4>
	  	  			else{ sub_page = 0; }
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <main+0x3fc>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
	  	  			setting = false;
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <main+0x40c>)
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
	  	  			lcd_refresh = true;
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <main+0x408>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
	  	  			lcd_clear();
 8004164:	f004 fcbe 	bl	8008ae4 <lcd_clear>
	  	  		break;
 8004168:	e003      	b.n	8004172 <main+0x3de>
	  	  		case 10 :
	  	  			save_parameter();
 800416a:	f7ff fb3f 	bl	80037ec <save_parameter>
	  	  		break;
 800416e:	e000      	b.n	8004172 <main+0x3de>
	  	  		break;
 8004170:	bf00      	nop
	      	}

	      	switch(page)
 8004172:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <main+0x410>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d002      	beq.n	8004180 <main+0x3ec>
 800417a:	2b02      	cmp	r3, #2
 800417c:	d003      	beq.n	8004186 <main+0x3f2>
 800417e:	e005      	b.n	800418c <main+0x3f8>
	      	{
	  	  		case 1 : page1(); break;
 8004180:	f7fd fc18 	bl	80019b4 <page1>
 8004184:	e002      	b.n	800418c <main+0x3f8>
	  	  		case 2 : page2(); break;
 8004186:	f7fd fefb 	bl	8001f80 <page2>
 800418a:	bf00      	nop
  {
 800418c:	e6db      	b.n	8003f46 <main+0x1b2>
 800418e:	bf00      	nop
 8004190:	20000215 	.word	0x20000215
 8004194:	20000214 	.word	0x20000214
 8004198:	2000031c 	.word	0x2000031c
 800419c:	20000001 	.word	0x20000001
 80041a0:	20000219 	.word	0x20000219
 80041a4:	20000000 	.word	0x20000000

080041a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b090      	sub	sp, #64	; 0x40
 80041ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ae:	f107 0318 	add.w	r3, r7, #24
 80041b2:	2228      	movs	r2, #40	; 0x28
 80041b4:	2100      	movs	r1, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 fdf6 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80041d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041da:	2301      	movs	r3, #1
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041de:	2302      	movs	r3, #2
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80041e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041ee:	f107 0318 	add.w	r3, r7, #24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fda4 	bl	8005d40 <HAL_RCC_OscConfig>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80041fe:	f000 fa5b 	bl	80046b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004202:	230f      	movs	r3, #15
 8004204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004206:	2302      	movs	r3, #2
 8004208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800420e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	2102      	movs	r1, #2
 800421c:	4618      	mov	r0, r3
 800421e:	f002 f80f 	bl	8006240 <HAL_RCC_ClockConfig>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004228:	f000 fa46 	bl	80046b8 <Error_Handler>
  }
}
 800422c:	bf00      	nop
 800422e:	3740      	adds	r7, #64	; 0x40
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <MX_I2C2_Init+0x50>)
 800423a:	4a13      	ldr	r2, [pc, #76]	; (8004288 <MX_I2C2_Init+0x54>)
 800423c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <MX_I2C2_Init+0x50>)
 8004240:	4a12      	ldr	r2, [pc, #72]	; (800428c <MX_I2C2_Init+0x58>)
 8004242:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <MX_I2C2_Init+0x50>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <MX_I2C2_Init+0x50>)
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <MX_I2C2_Init+0x50>)
 8004252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004256:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <MX_I2C2_Init+0x50>)
 800425a:	2200      	movs	r2, #0
 800425c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <MX_I2C2_Init+0x50>)
 8004260:	2200      	movs	r2, #0
 8004262:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <MX_I2C2_Init+0x50>)
 8004266:	2200      	movs	r2, #0
 8004268:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <MX_I2C2_Init+0x50>)
 800426c:	2200      	movs	r2, #0
 800426e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <MX_I2C2_Init+0x50>)
 8004272:	f000 ffed 	bl	8005250 <HAL_I2C_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800427c:	f000 fa1c 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000324 	.word	0x20000324
 8004288:	40005800 	.word	0x40005800
 800428c:	000186a0 	.word	0x000186a0

08004290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004294:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <MX_SPI1_Init+0x64>)
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <MX_SPI1_Init+0x68>)
 8004298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800429a:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <MX_SPI1_Init+0x64>)
 800429c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042c4:	2210      	movs	r2, #16
 80042c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042dc:	220a      	movs	r2, #10
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e0:	4804      	ldr	r0, [pc, #16]	; (80042f4 <MX_SPI1_Init+0x64>)
 80042e2:	f002 f935 	bl	8006550 <HAL_SPI_Init>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042ec:	f000 f9e4 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000460 	.word	0x20000460
 80042f8:	40013000 	.word	0x40013000

080042fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <MX_SPI2_Init+0x64>)
 8004302:	4a18      	ldr	r2, [pc, #96]	; (8004364 <MX_SPI2_Init+0x68>)
 8004304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004306:	4b16      	ldr	r3, [pc, #88]	; (8004360 <MX_SPI2_Init+0x64>)
 8004308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800430c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <MX_SPI2_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <MX_SPI2_Init+0x64>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <MX_SPI2_Init+0x64>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <MX_SPI2_Init+0x64>)
 8004322:	2200      	movs	r2, #0
 8004324:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <MX_SPI2_Init+0x64>)
 8004328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <MX_SPI2_Init+0x64>)
 8004330:	2210      	movs	r2, #16
 8004332:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <MX_SPI2_Init+0x64>)
 8004336:	2200      	movs	r2, #0
 8004338:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <MX_SPI2_Init+0x64>)
 800433c:	2200      	movs	r2, #0
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <MX_SPI2_Init+0x64>)
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <MX_SPI2_Init+0x64>)
 8004348:	220a      	movs	r2, #10
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800434c:	4804      	ldr	r0, [pc, #16]	; (8004360 <MX_SPI2_Init+0x64>)
 800434e:	f002 f8ff 	bl	8006550 <HAL_SPI_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004358:	f000 f9ae 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800435c:	bf00      	nop
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200002c4 	.word	0x200002c4
 8004364:	40003800 	.word	0x40003800

08004368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800437c:	463b      	mov	r3, r7
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <MX_TIM1_Init+0x98>)
 8004386:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <MX_TIM1_Init+0x9c>)
 8004388:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <MX_TIM1_Init+0x98>)
 800438c:	2247      	movs	r2, #71	; 0x47
 800438e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <MX_TIM1_Init+0x98>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <MX_TIM1_Init+0x98>)
 8004398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <MX_TIM1_Init+0x98>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <MX_TIM1_Init+0x98>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <MX_TIM1_Init+0x98>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043b0:	4813      	ldr	r0, [pc, #76]	; (8004400 <MX_TIM1_Init+0x98>)
 80043b2:	f002 fb99 	bl	8006ae8 <HAL_TIM_Base_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80043bc:	f000 f97c 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	4619      	mov	r1, r3
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <MX_TIM1_Init+0x98>)
 80043ce:	f002 fd43 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80043d8:	f000 f96e 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043e4:	463b      	mov	r3, r7
 80043e6:	4619      	mov	r1, r3
 80043e8:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_TIM1_Init+0x98>)
 80043ea:	f002 ff37 	bl	800725c <HAL_TIMEx_MasterConfigSynchronization>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80043f4:	f000 f960 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80043f8:	bf00      	nop
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200018b8 	.word	0x200018b8
 8004404:	40012c00 	.word	0x40012c00

08004408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800441c:	463b      	mov	r3, r7
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004424:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <MX_TIM2_Init+0x98>)
 8004426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800442a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <MX_TIM2_Init+0x98>)
 800442e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <MX_TIM2_Init+0x98>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1400-1;
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <MX_TIM2_Init+0x98>)
 800443c:	f240 5277 	movw	r2, #1399	; 0x577
 8004440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <MX_TIM2_Init+0x98>)
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <MX_TIM2_Init+0x98>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004450:	4813      	ldr	r0, [pc, #76]	; (80044a0 <MX_TIM2_Init+0x98>)
 8004452:	f002 fb49 	bl	8006ae8 <HAL_TIM_Base_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800445c:	f000 f92c 	bl	80046b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4619      	mov	r1, r3
 800446c:	480c      	ldr	r0, [pc, #48]	; (80044a0 <MX_TIM2_Init+0x98>)
 800446e:	f002 fcf3 	bl	8006e58 <HAL_TIM_ConfigClockSource>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004478:	f000 f91e 	bl	80046b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800447c:	2300      	movs	r3, #0
 800447e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004484:	463b      	mov	r3, r7
 8004486:	4619      	mov	r1, r3
 8004488:	4805      	ldr	r0, [pc, #20]	; (80044a0 <MX_TIM2_Init+0x98>)
 800448a:	f002 fee7 	bl	800725c <HAL_TIMEx_MasterConfigSynchronization>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004494:	f000 f910 	bl	80046b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004498:	bf00      	nop
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20001900 	.word	0x20001900

080044a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044aa:	f107 0318 	add.w	r3, r7, #24
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b8:	4b79      	ldr	r3, [pc, #484]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4a78      	ldr	r2, [pc, #480]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044be:	f043 0310 	orr.w	r3, r3, #16
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	4b76      	ldr	r3, [pc, #472]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d0:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4a72      	ldr	r2, [pc, #456]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6193      	str	r3, [r2, #24]
 80044dc:	4b70      	ldr	r3, [pc, #448]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e8:	4b6d      	ldr	r3, [pc, #436]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	4a6c      	ldr	r2, [pc, #432]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044ee:	f043 0308 	orr.w	r3, r3, #8
 80044f2:	6193      	str	r3, [r2, #24]
 80044f4:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004500:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 8004506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450a:	6193      	str	r3, [r2, #24]
 800450c:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 800451e:	f043 0320 	orr.w	r3, r3, #32
 8004522:	6193      	str	r3, [r2, #24]
 8004524:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <MX_GPIO_Init+0x1fc>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUN_Pin|LOCK_Pin|ERROR_Pin, GPIO_PIN_RESET);
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004536:	485b      	ldr	r0, [pc, #364]	; (80046a4 <MX_GPIO_Init+0x200>)
 8004538:	f000 fe59 	bl	80051ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800453c:	2200      	movs	r2, #0
 800453e:	2111      	movs	r1, #17
 8004540:	4859      	ldr	r0, [pc, #356]	; (80046a8 <MX_GPIO_Init+0x204>)
 8004542:	f000 fe54 	bl	80051ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT1_SEL_Pin|OUT1_MUTE_Pin|OUT4_MUTE_Pin|OUT3_SEL_Pin
 8004546:	2201      	movs	r2, #1
 8004548:	f240 710c 	movw	r1, #1804	; 0x70c
 800454c:	4856      	ldr	r0, [pc, #344]	; (80046a8 <MX_GPIO_Init+0x204>)
 800454e:	f000 fe4e 	bl	80051ee <HAL_GPIO_WritePin>
                          |OUT3_MUTE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004552:	2200      	movs	r2, #0
 8004554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004558:	4854      	ldr	r0, [pc, #336]	; (80046ac <MX_GPIO_Init+0x208>)
 800455a:	f000 fe48 	bl	80051ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DSP_RST_Pin|IN1_SEL_Pin|IN1_MUTE_Pin|OUT2_SEL_Pin
 800455e:	2201      	movs	r2, #1
 8004560:	f24c 1160 	movw	r1, #49504	; 0xc160
 8004564:	4852      	ldr	r0, [pc, #328]	; (80046b0 <MX_GPIO_Init+0x20c>)
 8004566:	f000 fe42 	bl	80051ee <HAL_GPIO_WritePin>
                          |OUT2_MUTE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT4_SEL_GPIO_Port, OUT4_SEL_Pin, GPIO_PIN_SET);
 800456a:	2201      	movs	r2, #1
 800456c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004570:	484c      	ldr	r0, [pc, #304]	; (80046a4 <MX_GPIO_Init+0x200>)
 8004572:	f000 fe3c 	bl	80051ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_SEL_Pin|IN2_MUTE_Pin, GPIO_PIN_SET);
 8004576:	2201      	movs	r2, #1
 8004578:	21c0      	movs	r1, #192	; 0xc0
 800457a:	484c      	ldr	r0, [pc, #304]	; (80046ac <MX_GPIO_Init+0x208>)
 800457c:	f000 fe37 	bl	80051ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RUN_Pin LOCK_Pin ERROR_Pin OUT4_SEL_Pin */
  GPIO_InitStruct.Pin = RUN_Pin|LOCK_Pin|ERROR_Pin|OUT4_SEL_Pin;
 8004580:	f44f 4362 	mov.w	r3, #57856	; 0xe200
 8004584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004586:	2301      	movs	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458e:	2302      	movs	r3, #2
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004592:	f107 0318 	add.w	r3, r7, #24
 8004596:	4619      	mov	r1, r3
 8004598:	4842      	ldr	r0, [pc, #264]	; (80046a4 <MX_GPIO_Init+0x200>)
 800459a:	f000 fc7d 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_Pin OUT1_SEL_Pin OUT1_MUTE_Pin OUT4_MUTE_Pin
                           OUT3_SEL_Pin OUT3_MUTE_Pin */
  GPIO_InitStruct.Pin = TX_Pin|OUT1_SEL_Pin|OUT1_MUTE_Pin|OUT4_MUTE_Pin
 800459e:	f240 730d 	movw	r3, #1805	; 0x70d
 80045a2:	61bb      	str	r3, [r7, #24]
                          |OUT3_SEL_Pin|OUT3_MUTE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045a4:	2301      	movs	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2302      	movs	r3, #2
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b0:	f107 0318 	add.w	r3, r7, #24
 80045b4:	4619      	mov	r1, r3
 80045b6:	483c      	ldr	r0, [pc, #240]	; (80046a8 <MX_GPIO_Init+0x204>)
 80045b8:	f000 fc6e 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80045bc:	2310      	movs	r3, #16
 80045be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c0:	2301      	movs	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045c8:	2303      	movs	r3, #3
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80045cc:	f107 0318 	add.w	r3, r7, #24
 80045d0:	4619      	mov	r1, r3
 80045d2:	4835      	ldr	r0, [pc, #212]	; (80046a8 <MX_GPIO_Init+0x204>)
 80045d4:	f000 fc60 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENSW_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = ENSW_Pin|OUT3_Pin|OUT4_Pin;
 80045d8:	23e0      	movs	r3, #224	; 0xe0
 80045da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e0:	2301      	movs	r3, #1
 80045e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e4:	f107 0318 	add.w	r3, r7, #24
 80045e8:	4619      	mov	r1, r3
 80045ea:	482e      	ldr	r0, [pc, #184]	; (80046a4 <MX_GPIO_Init+0x200>)
 80045ec:	f000 fc54 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA_Pin ENB_Pin */
  GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 80045f0:	2303      	movs	r3, #3
 80045f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f8:	2301      	movs	r3, #1
 80045fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	4619      	mov	r1, r3
 8004602:	482a      	ldr	r0, [pc, #168]	; (80046ac <MX_GPIO_Init+0x208>)
 8004604:	f000 fc48 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAGE_Pin SAVE_Pin MUTE_Pin RESET_Pin
                           IN2_Pin IN1_Pin OUT1_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = PAGE_Pin|SAVE_Pin|MUTE_Pin|RESET_Pin
 8004608:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 800460c:	61bb      	str	r3, [r7, #24]
                          |IN2_Pin|IN1_Pin|OUT1_Pin|OUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004612:	2301      	movs	r3, #1
 8004614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004616:	f107 0318 	add.w	r3, r7, #24
 800461a:	4619      	mov	r1, r3
 800461c:	4825      	ldr	r0, [pc, #148]	; (80046b4 <MX_GPIO_Init+0x210>)
 800461e:	f000 fc3b 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8004622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004628:	2301      	movs	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004630:	2303      	movs	r3, #3
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8004634:	f107 0318 	add.w	r3, r7, #24
 8004638:	4619      	mov	r1, r3
 800463a:	481c      	ldr	r0, [pc, #112]	; (80046ac <MX_GPIO_Init+0x208>)
 800463c:	f000 fc2c 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSP_RST_Pin */
  GPIO_InitStruct.Pin = DSP_RST_Pin;
 8004640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004646:	2311      	movs	r3, #17
 8004648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	2302      	movs	r3, #2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DSP_RST_GPIO_Port, &GPIO_InitStruct);
 8004652:	f107 0318 	add.w	r3, r7, #24
 8004656:	4619      	mov	r1, r3
 8004658:	4815      	ldr	r0, [pc, #84]	; (80046b0 <MX_GPIO_Init+0x20c>)
 800465a:	f000 fc1d 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_SEL_Pin IN1_MUTE_Pin OUT2_SEL_Pin OUT2_MUTE_Pin */
  GPIO_InitStruct.Pin = IN1_SEL_Pin|IN1_MUTE_Pin|OUT2_SEL_Pin|OUT2_MUTE_Pin;
 800465e:	f24c 0360 	movw	r3, #49248	; 0xc060
 8004662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004664:	2301      	movs	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466c:	2302      	movs	r3, #2
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004670:	f107 0318 	add.w	r3, r7, #24
 8004674:	4619      	mov	r1, r3
 8004676:	480e      	ldr	r0, [pc, #56]	; (80046b0 <MX_GPIO_Init+0x20c>)
 8004678:	f000 fc0e 	bl	8004e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_SEL_Pin IN2_MUTE_Pin */
  GPIO_InitStruct.Pin = IN2_SEL_Pin|IN2_MUTE_Pin;
 800467c:	23c0      	movs	r3, #192	; 0xc0
 800467e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004680:	2301      	movs	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004688:	2302      	movs	r3, #2
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468c:	f107 0318 	add.w	r3, r7, #24
 8004690:	4619      	mov	r1, r3
 8004692:	4806      	ldr	r0, [pc, #24]	; (80046ac <MX_GPIO_Init+0x208>)
 8004694:	f000 fc00 	bl	8004e98 <HAL_GPIO_Init>

}
 8004698:	bf00      	nop
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40010800 	.word	0x40010800
 80046ac:	40010c00 	.word	0x40010c00
 80046b0:	40011400 	.word	0x40011400
 80046b4:	40011800 	.word	0x40011800

080046b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		HAL_GPIO_TogglePin(ERROR_GPIO_Port, ERROR_Pin);
 80046bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046c0:	4803      	ldr	r0, [pc, #12]	; (80046d0 <Error_Handler+0x18>)
 80046c2:	f000 fdac 	bl	800521e <HAL_GPIO_TogglePin>
		HAL_Delay(150);
 80046c6:	2096      	movs	r0, #150	; 0x96
 80046c8:	f000 fab4 	bl	8004c34 <HAL_Delay>
		HAL_GPIO_TogglePin(ERROR_GPIO_Port, ERROR_Pin);
 80046cc:	e7f6      	b.n	80046bc <Error_Handler+0x4>
 80046ce:	bf00      	nop
 80046d0:	40011000 	.word	0x40011000

080046d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046da:	4b15      	ldr	r3, [pc, #84]	; (8004730 <HAL_MspInit+0x5c>)
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	4a14      	ldr	r2, [pc, #80]	; (8004730 <HAL_MspInit+0x5c>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6193      	str	r3, [r2, #24]
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_MspInit+0x5c>)
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_MspInit+0x5c>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <HAL_MspInit+0x5c>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fc:	61d3      	str	r3, [r2, #28]
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_MspInit+0x5c>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_MspInit+0x60>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <HAL_MspInit+0x60>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40021000 	.word	0x40021000
 8004734:	40010000 	.word	0x40010000

08004738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004740:	f107 0310 	add.w	r3, r7, #16
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a16      	ldr	r2, [pc, #88]	; (80047ac <HAL_I2C_MspInit+0x74>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d124      	bne.n	80047a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	6193      	str	r3, [r2, #24]
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004770:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004776:	2312      	movs	r3, #18
 8004778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	4619      	mov	r1, r3
 8004784:	480b      	ldr	r0, [pc, #44]	; (80047b4 <HAL_I2C_MspInit+0x7c>)
 8004786:	f000 fb87 	bl	8004e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 8004790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004794:	61d3      	str	r3, [r2, #28]
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <HAL_I2C_MspInit+0x78>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80047a2:	bf00      	nop
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40005800 	.word	0x40005800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40010c00 	.word	0x40010c00

080047b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 0318 	add.w	r3, r7, #24
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a37      	ldr	r2, [pc, #220]	; (80048b0 <HAL_SPI_MspInit+0xf8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d130      	bne.n	800483a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f0:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	6193      	str	r3, [r2, #24]
 80047fc:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004808:	23a0      	movs	r3, #160	; 0xa0
 800480a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004810:	2303      	movs	r3, #3
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004814:	f107 0318 	add.w	r3, r7, #24
 8004818:	4619      	mov	r1, r3
 800481a:	4827      	ldr	r0, [pc, #156]	; (80048b8 <HAL_SPI_MspInit+0x100>)
 800481c:	f000 fb3c 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004820:	2340      	movs	r3, #64	; 0x40
 8004822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482c:	f107 0318 	add.w	r3, r7, #24
 8004830:	4619      	mov	r1, r3
 8004832:	4821      	ldr	r0, [pc, #132]	; (80048b8 <HAL_SPI_MspInit+0x100>)
 8004834:	f000 fb30 	bl	8004e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004838:	e036      	b.n	80048a8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	; (80048bc <HAL_SPI_MspInit+0x104>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d131      	bne.n	80048a8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 800484a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800484e:	61d3      	str	r3, [r2, #28]
 8004850:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 8004862:	f043 0308 	orr.w	r3, r3, #8
 8004866:	6193      	str	r3, [r2, #24]
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_SPI_MspInit+0xfc>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004874:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487a:	2302      	movs	r3, #2
 800487c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800487e:	2303      	movs	r3, #3
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004882:	f107 0318 	add.w	r3, r7, #24
 8004886:	4619      	mov	r1, r3
 8004888:	480d      	ldr	r0, [pc, #52]	; (80048c0 <HAL_SPI_MspInit+0x108>)
 800488a:	f000 fb05 	bl	8004e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800488e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489c:	f107 0318 	add.w	r3, r7, #24
 80048a0:	4619      	mov	r1, r3
 80048a2:	4807      	ldr	r0, [pc, #28]	; (80048c0 <HAL_SPI_MspInit+0x108>)
 80048a4:	f000 faf8 	bl	8004e98 <HAL_GPIO_Init>
}
 80048a8:	bf00      	nop
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40013000 	.word	0x40013000
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40010800 	.word	0x40010800
 80048bc:	40003800 	.word	0x40003800
 80048c0:	40010c00 	.word	0x40010c00

080048c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	; (800492c <HAL_TIM_Base_MspInit+0x68>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10c      	bne.n	80048f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048d6:	4b16      	ldr	r3, [pc, #88]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	4a15      	ldr	r2, [pc, #84]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 80048dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048e0:	6193      	str	r3, [r2, #24]
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048ee:	e018      	b.n	8004922 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d113      	bne.n	8004922 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	61d3      	str	r3, [r2, #28]
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_TIM_Base_MspInit+0x6c>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004912:	2200      	movs	r2, #0
 8004914:	2100      	movs	r1, #0
 8004916:	201c      	movs	r0, #28
 8004918:	f000 fa87 	bl	8004e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800491c:	201c      	movs	r0, #28
 800491e:	f000 faa0 	bl	8004e62 <HAL_NVIC_EnableIRQ>
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40021000 	.word	0x40021000

08004934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004938:	e7fe      	b.n	8004938 <NMI_Handler+0x4>

0800493a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800493e:	e7fe      	b.n	800493e <HardFault_Handler+0x4>

08004940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004944:	e7fe      	b.n	8004944 <MemManage_Handler+0x4>

08004946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800494a:	e7fe      	b.n	800494a <BusFault_Handler+0x4>

0800494c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004950:	e7fe      	b.n	8004950 <UsageFault_Handler+0x4>

08004952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800497a:	f000 f93f 	bl	8004bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <TIM2_IRQHandler+0x10>)
 800498a:	f002 f95d 	bl	8006c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20001900 	.word	0x20001900

08004998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
	return 1;
 800499c:	2301      	movs	r3, #1
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <_kill>:

int _kill(int pid, int sig)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049b0:	f004 f9d0 	bl	8008d54 <__errno>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2216      	movs	r2, #22
 80049b8:	601a      	str	r2, [r3, #0]
	return -1;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <_exit>:

void _exit (int status)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049ce:	f04f 31ff 	mov.w	r1, #4294967295
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ffe7 	bl	80049a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80049d8:	e7fe      	b.n	80049d8 <_exit+0x12>

080049da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e00a      	b.n	8004a02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80049ec:	f3af 8000 	nop.w
 80049f0:	4601      	mov	r1, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	60ba      	str	r2, [r7, #8]
 80049f8:	b2ca      	uxtb	r2, r1
 80049fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	3301      	adds	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	dbf0      	blt.n	80049ec <_read+0x12>
	}

return len;
 8004a0a:	687b      	ldr	r3, [r7, #4]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e009      	b.n	8004a3a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	60ba      	str	r2, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3301      	adds	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	dbf1      	blt.n	8004a26 <_write+0x12>
	}
	return len;
 8004a42:	687b      	ldr	r3, [r7, #4]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_close>:

int _close(int file)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	return -1;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a72:	605a      	str	r2, [r3, #4]
	return 0;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <_isatty>:

int _isatty(int file)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	return 1;
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <_sbrk+0x5c>)
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <_sbrk+0x60>)
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <_sbrk+0x64>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <_sbrk+0x64>)
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <_sbrk+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <_sbrk+0x64>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d207      	bcs.n	8004aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004adc:	f004 f93a 	bl	8008d54 <__errno>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	e009      	b.n	8004b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <_sbrk+0x64>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <_sbrk+0x64>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <_sbrk+0x64>)
 8004afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20010000 	.word	0x20010000
 8004b0c:	00000400 	.word	0x00000400
 8004b10:	200002b4 	.word	0x200002b4
 8004b14:	20001998 	.word	0x20001998

08004b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <Reset_Handler>:
 8004b24:	2100      	movs	r1, #0
 8004b26:	e003      	b.n	8004b30 <LoopCopyDataInit>

08004b28 <CopyDataInit>:
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <LoopFillZerobss+0x14>)
 8004b2a:	585b      	ldr	r3, [r3, r1]
 8004b2c:	5043      	str	r3, [r0, r1]
 8004b2e:	3104      	adds	r1, #4

08004b30 <LoopCopyDataInit>:
 8004b30:	480a      	ldr	r0, [pc, #40]	; (8004b5c <LoopFillZerobss+0x18>)
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <LoopFillZerobss+0x1c>)
 8004b34:	1842      	adds	r2, r0, r1
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d3f6      	bcc.n	8004b28 <CopyDataInit>
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <LoopFillZerobss+0x20>)
 8004b3c:	e002      	b.n	8004b44 <LoopFillZerobss>

08004b3e <FillZerobss>:
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f842 3b04 	str.w	r3, [r2], #4

08004b44 <LoopFillZerobss>:
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <LoopFillZerobss+0x24>)
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3f9      	bcc.n	8004b3e <FillZerobss>
 8004b4a:	f7ff ffe5 	bl	8004b18 <SystemInit>
 8004b4e:	f004 f907 	bl	8008d60 <__libc_init_array>
 8004b52:	f7ff f91f 	bl	8003d94 <main>
 8004b56:	4770      	bx	lr
 8004b58:	0800e298 	.word	0x0800e298
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	200001f8 	.word	0x200001f8
 8004b64:	200001f8 	.word	0x200001f8
 8004b68:	20001994 	.word	0x20001994

08004b6c <ADC1_2_IRQHandler>:
 8004b6c:	e7fe      	b.n	8004b6c <ADC1_2_IRQHandler>
	...

08004b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_Init+0x28>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <HAL_Init+0x28>)
 8004b7a:	f043 0310 	orr.w	r3, r3, #16
 8004b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b80:	2003      	movs	r0, #3
 8004b82:	f000 f947 	bl	8004e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f000 f808 	bl	8004b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b8c:	f7ff fda2 	bl	80046d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40022000 	.word	0x40022000

08004b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x54>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <HAL_InitTick+0x58>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f95f 	bl	8004e7e <HAL_SYSTICK_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00e      	b.n	8004be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d80a      	bhi.n	8004be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f000 f927 	bl	8004e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <HAL_InitTick+0x5c>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000004 	.word	0x20000004
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	20000008 	.word	0x20000008

08004bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_IncTick+0x1c>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_IncTick+0x20>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a03      	ldr	r2, [pc, #12]	; (8004c1c <HAL_IncTick+0x20>)
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	2000000c 	.word	0x2000000c
 8004c1c:	20001948 	.word	0x20001948

08004c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b02      	ldr	r3, [pc, #8]	; (8004c30 <HAL_GetTick+0x10>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	20001948 	.word	0x20001948

08004c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff fff0 	bl	8004c20 <HAL_GetTick>
 8004c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d005      	beq.n	8004c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <HAL_Delay+0x44>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c5a:	bf00      	nop
 8004c5c:	f7ff ffe0 	bl	8004c20 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d8f7      	bhi.n	8004c5c <HAL_Delay+0x28>
  {
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	2000000c 	.word	0x2000000c

08004c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cae:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	60d3      	str	r3, [r2, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <__NVIC_GetPriorityGrouping+0x18>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	f003 0307 	and.w	r3, r3, #7
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db0b      	blt.n	8004d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4906      	ldr	r1, [pc, #24]	; (8004d14 <__NVIC_EnableIRQ+0x34>)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2001      	movs	r0, #1
 8004d02:	fa00 f202 	lsl.w	r2, r0, r2
 8004d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	e000e100 	.word	0xe000e100

08004d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	6039      	str	r1, [r7, #0]
 8004d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	db0a      	blt.n	8004d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	490c      	ldr	r1, [pc, #48]	; (8004d64 <__NVIC_SetPriority+0x4c>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	0112      	lsls	r2, r2, #4
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d40:	e00a      	b.n	8004d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4908      	ldr	r1, [pc, #32]	; (8004d68 <__NVIC_SetPriority+0x50>)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	0112      	lsls	r2, r2, #4
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	440b      	add	r3, r1
 8004d56:	761a      	strb	r2, [r3, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	e000e100 	.word	0xe000e100
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f1c3 0307 	rsb	r3, r3, #7
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	bf28      	it	cs
 8004d8a:	2304      	movcs	r3, #4
 8004d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d902      	bls.n	8004d9c <NVIC_EncodePriority+0x30>
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3b03      	subs	r3, #3
 8004d9a:	e000      	b.n	8004d9e <NVIC_EncodePriority+0x32>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43da      	mvns	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	401a      	ands	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004db4:	f04f 31ff 	mov.w	r1, #4294967295
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	43d9      	mvns	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc4:	4313      	orrs	r3, r2
         );
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3724      	adds	r7, #36	; 0x24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004de0:	d301      	bcc.n	8004de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00f      	b.n	8004e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004de6:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <SysTick_Config+0x40>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dee:	210f      	movs	r1, #15
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	f7ff ff90 	bl	8004d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <SysTick_Config+0x40>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <SysTick_Config+0x40>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010

08004e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff2d 	bl	8004c7c <__NVIC_SetPriorityGrouping>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b086      	sub	sp, #24
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e3c:	f7ff ff42 	bl	8004cc4 <__NVIC_GetPriorityGrouping>
 8004e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f7ff ff90 	bl	8004d6c <NVIC_EncodePriority>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff5f 	bl	8004d18 <__NVIC_SetPriority>
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	4603      	mov	r3, r0
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff ff35 	bl	8004ce0 <__NVIC_EnableIRQ>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ffa2 	bl	8004dd0 <SysTick_Config>
 8004e8c:	4603      	mov	r3, r0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eaa:	e179      	b.n	80051a0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004eac:	2201      	movs	r2, #1
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f040 8168 	bne.w	800519a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4aa0      	ldr	r2, [pc, #640]	; (8005150 <HAL_GPIO_Init+0x2b8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d05e      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ed4:	4a9e      	ldr	r2, [pc, #632]	; (8005150 <HAL_GPIO_Init+0x2b8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d875      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004eda:	4a9e      	ldr	r2, [pc, #632]	; (8005154 <HAL_GPIO_Init+0x2bc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d058      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ee0:	4a9c      	ldr	r2, [pc, #624]	; (8005154 <HAL_GPIO_Init+0x2bc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d86f      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004ee6:	4a9c      	ldr	r2, [pc, #624]	; (8005158 <HAL_GPIO_Init+0x2c0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d052      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004eec:	4a9a      	ldr	r2, [pc, #616]	; (8005158 <HAL_GPIO_Init+0x2c0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d869      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004ef2:	4a9a      	ldr	r2, [pc, #616]	; (800515c <HAL_GPIO_Init+0x2c4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d04c      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ef8:	4a98      	ldr	r2, [pc, #608]	; (800515c <HAL_GPIO_Init+0x2c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d863      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004efe:	4a98      	ldr	r2, [pc, #608]	; (8005160 <HAL_GPIO_Init+0x2c8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d046      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004f04:	4a96      	ldr	r2, [pc, #600]	; (8005160 <HAL_GPIO_Init+0x2c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d85d      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004f0a:	2b12      	cmp	r3, #18
 8004f0c:	d82a      	bhi.n	8004f64 <HAL_GPIO_Init+0xcc>
 8004f0e:	2b12      	cmp	r3, #18
 8004f10:	d859      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_GPIO_Init+0x80>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f93 	.word	0x08004f93
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	08004f7f 	.word	0x08004f7f
 8004f24:	08004fc1 	.word	0x08004fc1
 8004f28:	08004fc7 	.word	0x08004fc7
 8004f2c:	08004fc7 	.word	0x08004fc7
 8004f30:	08004fc7 	.word	0x08004fc7
 8004f34:	08004fc7 	.word	0x08004fc7
 8004f38:	08004fc7 	.word	0x08004fc7
 8004f3c:	08004fc7 	.word	0x08004fc7
 8004f40:	08004fc7 	.word	0x08004fc7
 8004f44:	08004fc7 	.word	0x08004fc7
 8004f48:	08004fc7 	.word	0x08004fc7
 8004f4c:	08004fc7 	.word	0x08004fc7
 8004f50:	08004fc7 	.word	0x08004fc7
 8004f54:	08004fc7 	.word	0x08004fc7
 8004f58:	08004fc7 	.word	0x08004fc7
 8004f5c:	08004f75 	.word	0x08004f75
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	4a7f      	ldr	r2, [pc, #508]	; (8005164 <HAL_GPIO_Init+0x2cc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f6a:	e02c      	b.n	8004fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	623b      	str	r3, [r7, #32]
          break;
 8004f72:	e029      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	623b      	str	r3, [r7, #32]
          break;
 8004f7c:	e024      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	3308      	adds	r3, #8
 8004f84:	623b      	str	r3, [r7, #32]
          break;
 8004f86:	e01f      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	623b      	str	r3, [r7, #32]
          break;
 8004f90:	e01a      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	623b      	str	r3, [r7, #32]
          break;
 8004f9e:	e013      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fa8:	2308      	movs	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	611a      	str	r2, [r3, #16]
          break;
 8004fb2:	e009      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	615a      	str	r2, [r3, #20]
          break;
 8004fbe:	e003      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
          break;
 8004fc4:	e000      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          break;
 8004fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2bff      	cmp	r3, #255	; 0xff
 8004fcc:	d801      	bhi.n	8004fd2 <HAL_GPIO_Init+0x13a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	e001      	b.n	8004fd6 <HAL_GPIO_Init+0x13e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2bff      	cmp	r3, #255	; 0xff
 8004fdc:	d802      	bhi.n	8004fe4 <HAL_GPIO_Init+0x14c>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	e002      	b.n	8004fea <HAL_GPIO_Init+0x152>
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	3b08      	subs	r3, #8
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	210f      	movs	r1, #15
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	6a39      	ldr	r1, [r7, #32]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80c1 	beq.w	800519a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005018:	4b53      	ldr	r3, [pc, #332]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6193      	str	r3, [r2, #24]
 8005024:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005030:	4a4e      	ldr	r2, [pc, #312]	; (800516c <HAL_GPIO_Init+0x2d4>)
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	3302      	adds	r3, #2
 8005038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a46      	ldr	r2, [pc, #280]	; (8005170 <HAL_GPIO_Init+0x2d8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01f      	beq.n	800509c <HAL_GPIO_Init+0x204>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a45      	ldr	r2, [pc, #276]	; (8005174 <HAL_GPIO_Init+0x2dc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d019      	beq.n	8005098 <HAL_GPIO_Init+0x200>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a44      	ldr	r2, [pc, #272]	; (8005178 <HAL_GPIO_Init+0x2e0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <HAL_GPIO_Init+0x1fc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a43      	ldr	r2, [pc, #268]	; (800517c <HAL_GPIO_Init+0x2e4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00d      	beq.n	8005090 <HAL_GPIO_Init+0x1f8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a42      	ldr	r2, [pc, #264]	; (8005180 <HAL_GPIO_Init+0x2e8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <HAL_GPIO_Init+0x1f4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a41      	ldr	r2, [pc, #260]	; (8005184 <HAL_GPIO_Init+0x2ec>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_GPIO_Init+0x1f0>
 8005084:	2305      	movs	r3, #5
 8005086:	e00a      	b.n	800509e <HAL_GPIO_Init+0x206>
 8005088:	2306      	movs	r3, #6
 800508a:	e008      	b.n	800509e <HAL_GPIO_Init+0x206>
 800508c:	2304      	movs	r3, #4
 800508e:	e006      	b.n	800509e <HAL_GPIO_Init+0x206>
 8005090:	2303      	movs	r3, #3
 8005092:	e004      	b.n	800509e <HAL_GPIO_Init+0x206>
 8005094:	2302      	movs	r3, #2
 8005096:	e002      	b.n	800509e <HAL_GPIO_Init+0x206>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_GPIO_Init+0x206>
 800509c:	2300      	movs	r3, #0
 800509e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a0:	f002 0203 	and.w	r2, r2, #3
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	4093      	lsls	r3, r2
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050ae:	492f      	ldr	r1, [pc, #188]	; (800516c <HAL_GPIO_Init+0x2d4>)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	492e      	ldr	r1, [pc, #184]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
 80050d4:	e006      	b.n	80050e4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050d6:	4b2c      	ldr	r3, [pc, #176]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	43db      	mvns	r3, r3
 80050de:	492a      	ldr	r1, [pc, #168]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d006      	beq.n	80050fe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	4924      	ldr	r1, [pc, #144]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
 80050fc:	e006      	b.n	800510c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	43db      	mvns	r3, r3
 8005106:	4920      	ldr	r1, [pc, #128]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005108:	4013      	ands	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	491a      	ldr	r1, [pc, #104]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
 8005124:	e006      	b.n	8005134 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	43db      	mvns	r3, r3
 800512e:	4916      	ldr	r1, [pc, #88]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005130:	4013      	ands	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d025      	beq.n	800518c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	4910      	ldr	r1, [pc, #64]	; (8005188 <HAL_GPIO_Init+0x2f0>)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4313      	orrs	r3, r2
 800514a:	60cb      	str	r3, [r1, #12]
 800514c:	e025      	b.n	800519a <HAL_GPIO_Init+0x302>
 800514e:	bf00      	nop
 8005150:	10320000 	.word	0x10320000
 8005154:	10310000 	.word	0x10310000
 8005158:	10220000 	.word	0x10220000
 800515c:	10210000 	.word	0x10210000
 8005160:	10120000 	.word	0x10120000
 8005164:	10110000 	.word	0x10110000
 8005168:	40021000 	.word	0x40021000
 800516c:	40010000 	.word	0x40010000
 8005170:	40010800 	.word	0x40010800
 8005174:	40010c00 	.word	0x40010c00
 8005178:	40011000 	.word	0x40011000
 800517c:	40011400 	.word	0x40011400
 8005180:	40011800 	.word	0x40011800
 8005184:	40011c00 	.word	0x40011c00
 8005188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_GPIO_Init+0x324>)
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	43db      	mvns	r3, r3
 8005194:	4909      	ldr	r1, [pc, #36]	; (80051bc <HAL_GPIO_Init+0x324>)
 8005196:	4013      	ands	r3, r2
 8005198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f47f ae7e 	bne.w	8004eac <HAL_GPIO_Init+0x14>
  }
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	372c      	adds	r7, #44	; 0x2c
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40010400 	.word	0x40010400

080051c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	887b      	ldrh	r3, [r7, #2]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	e001      	b.n	80051e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	807b      	strh	r3, [r7, #2]
 80051fa:	4613      	mov	r3, r2
 80051fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051fe:	787b      	ldrb	r3, [r7, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005204:	887a      	ldrh	r2, [r7, #2]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800520a:	e003      	b.n	8005214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800520c:	887b      	ldrh	r3, [r7, #2]
 800520e:	041a      	lsls	r2, r3, #16
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	611a      	str	r2, [r3, #16]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005230:	887a      	ldrh	r2, [r7, #2]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	041a      	lsls	r2, r3, #16
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	43d9      	mvns	r1, r3
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	400b      	ands	r3, r1
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e12b      	b.n	80054ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fa5e 	bl	8004738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	; 0x24
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052b4:	f001 f91a 	bl	80064ec <HAL_RCC_GetPCLK1Freq>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4a81      	ldr	r2, [pc, #516]	; (80054c4 <HAL_I2C_Init+0x274>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d807      	bhi.n	80052d4 <HAL_I2C_Init+0x84>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a80      	ldr	r2, [pc, #512]	; (80054c8 <HAL_I2C_Init+0x278>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bf94      	ite	ls
 80052cc:	2301      	movls	r3, #1
 80052ce:	2300      	movhi	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e006      	b.n	80052e2 <HAL_I2C_Init+0x92>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a7d      	ldr	r2, [pc, #500]	; (80054cc <HAL_I2C_Init+0x27c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	bf94      	ite	ls
 80052dc:	2301      	movls	r3, #1
 80052de:	2300      	movhi	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e0e7      	b.n	80054ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a78      	ldr	r2, [pc, #480]	; (80054d0 <HAL_I2C_Init+0x280>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0c9b      	lsrs	r3, r3, #18
 80052f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4a6a      	ldr	r2, [pc, #424]	; (80054c4 <HAL_I2C_Init+0x274>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d802      	bhi.n	8005324 <HAL_I2C_Init+0xd4>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3301      	adds	r3, #1
 8005322:	e009      	b.n	8005338 <HAL_I2C_Init+0xe8>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	4a69      	ldr	r2, [pc, #420]	; (80054d4 <HAL_I2C_Init+0x284>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	099b      	lsrs	r3, r3, #6
 8005336:	3301      	adds	r3, #1
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800534a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	495c      	ldr	r1, [pc, #368]	; (80054c4 <HAL_I2C_Init+0x274>)
 8005354:	428b      	cmp	r3, r1
 8005356:	d819      	bhi.n	800538c <HAL_I2C_Init+0x13c>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e59      	subs	r1, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fbb1 f3f3 	udiv	r3, r1, r3
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800536c:	400b      	ands	r3, r1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_I2C_Init+0x138>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1e59      	subs	r1, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005380:	3301      	adds	r3, #1
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	e051      	b.n	800542c <HAL_I2C_Init+0x1dc>
 8005388:	2304      	movs	r3, #4
 800538a:	e04f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d111      	bne.n	80053b8 <HAL_I2C_Init+0x168>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1e58      	subs	r0, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	440b      	add	r3, r1
 80053a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a6:	3301      	adds	r3, #1
 80053a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e012      	b.n	80053de <HAL_I2C_Init+0x18e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1e58      	subs	r0, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	0099      	lsls	r1, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <HAL_I2C_Init+0x196>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e022      	b.n	800542c <HAL_I2C_Init+0x1dc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10e      	bne.n	800540c <HAL_I2C_Init+0x1bc>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e58      	subs	r0, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	440b      	add	r3, r1
 80053fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005400:	3301      	adds	r3, #1
 8005402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	e00f      	b.n	800542c <HAL_I2C_Init+0x1dc>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1e58      	subs	r0, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	0099      	lsls	r1, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005422:	3301      	adds	r3, #1
 8005424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6809      	ldr	r1, [r1, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800545a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6911      	ldr	r1, [r2, #16]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68d2      	ldr	r2, [r2, #12]
 8005466:	4311      	orrs	r1, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	430b      	orrs	r3, r1
 800546e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	000186a0 	.word	0x000186a0
 80054c8:	001e847f 	.word	0x001e847f
 80054cc:	003d08ff 	.word	0x003d08ff
 80054d0:	431bde83 	.word	0x431bde83
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	461a      	mov	r2, r3
 80054e4:	460b      	mov	r3, r1
 80054e6:	817b      	strh	r3, [r7, #10]
 80054e8:	4613      	mov	r3, r2
 80054ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7ff fb98 	bl	8004c20 <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	f040 80e0 	bne.w	80056c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2319      	movs	r3, #25
 8005506:	2201      	movs	r2, #1
 8005508:	4970      	ldr	r1, [pc, #448]	; (80056cc <HAL_I2C_Master_Transmit+0x1f4>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa92 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
 8005518:	e0d3      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_I2C_Master_Transmit+0x50>
 8005524:	2302      	movs	r3, #2
 8005526:	e0cc      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d007      	beq.n	800554e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2221      	movs	r2, #33	; 0x21
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2210      	movs	r2, #16
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	893a      	ldrh	r2, [r7, #8]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a50      	ldr	r2, [pc, #320]	; (80056d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005590:	8979      	ldrh	r1, [r7, #10]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f9ca 	bl	8005930 <I2C_MasterRequestWrite>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e08d      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055bc:	e066      	b.n	800568c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fb0c 	bl	8005be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d107      	bne.n	80055e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e06b      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d11b      	bne.n	8005660 <HAL_I2C_Master_Transmit+0x188>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	2b00      	cmp	r3, #0
 800562e:	d017      	beq.n	8005660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	6a39      	ldr	r1, [r7, #32]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fafc 	bl	8005c62 <I2C_WaitOnBTFFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b04      	cmp	r3, #4
 8005676:	d107      	bne.n	8005688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e01a      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d194      	bne.n	80055be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	00100002 	.word	0x00100002
 80056d0:	ffff0000 	.word	0xffff0000

080056d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	460b      	mov	r3, r1
 80056e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056e4:	f7ff fa9c 	bl	8004c20 <HAL_GetTick>
 80056e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	f040 8111 	bne.w	800591e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2319      	movs	r3, #25
 8005702:	2201      	movs	r2, #1
 8005704:	4988      	ldr	r1, [pc, #544]	; (8005928 <HAL_I2C_IsDeviceReady+0x254>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f994 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
 8005714:	e104      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_I2C_IsDeviceReady+0x50>
 8005720:	2302      	movs	r3, #2
 8005722:	e0fd      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d007      	beq.n	800574a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2224      	movs	r2, #36	; 0x24
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a70      	ldr	r2, [pc, #448]	; (800592c <HAL_I2C_IsDeviceReady+0x258>)
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2200      	movs	r2, #0
 8005786:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f952 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d103      	bne.n	80057ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0b6      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057b2:	897b      	ldrh	r3, [r7, #10]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057c2:	f7ff fa2d 	bl	8004c20 <HAL_GetTick>
 80057c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057f6:	e025      	b.n	8005844 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f8:	f7ff fa12 	bl	8004c20 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d302      	bcc.n	800580e <HAL_I2C_IsDeviceReady+0x13a>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	22a0      	movs	r2, #160	; 0xa0
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2ba0      	cmp	r3, #160	; 0xa0
 800584e:	d005      	beq.n	800585c <HAL_I2C_IsDeviceReady+0x188>
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <HAL_I2C_IsDeviceReady+0x188>
 8005856:	7dbb      	ldrb	r3, [r7, #22]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0cd      	beq.n	80057f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d129      	bne.n	80058c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005880:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2319      	movs	r3, #25
 800589e:	2201      	movs	r2, #1
 80058a0:	4921      	ldr	r1, [pc, #132]	; (8005928 <HAL_I2C_IsDeviceReady+0x254>)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8c6 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e036      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e02c      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	2201      	movs	r2, #1
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <HAL_I2C_IsDeviceReady+0x254>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f8a2 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e012      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	f4ff af32 	bcc.w	800576e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	00100002 	.word	0x00100002
 800592c:	ffff0000 	.word	0xffff0000

08005930 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	460b      	mov	r3, r1
 800593e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d006      	beq.n	800595a <I2C_MasterRequestWrite+0x2a>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d003      	beq.n	800595a <I2C_MasterRequestWrite+0x2a>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005958:	d108      	bne.n	800596c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e00b      	b.n	8005984 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005970:	2b12      	cmp	r3, #18
 8005972:	d107      	bne.n	8005984 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f84f 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00d      	beq.n	80059b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d103      	bne.n	80059b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e035      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d108      	bne.n	80059d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059c2:	897b      	ldrh	r3, [r7, #10]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e01b      	b.n	8005a0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059d4:	897b      	ldrh	r3, [r7, #10]
 80059d6:	11db      	asrs	r3, r3, #7
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 0306 	and.w	r3, r3, #6
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f063 030f 	orn	r3, r3, #15
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	490e      	ldr	r1, [pc, #56]	; (8005a2c <I2C_MasterRequestWrite+0xfc>)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f875 	bl	8005ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e010      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4907      	ldr	r1, [pc, #28]	; (8005a30 <I2C_MasterRequestWrite+0x100>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f865 	bl	8005ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	00010008 	.word	0x00010008
 8005a30:	00010002 	.word	0x00010002

08005a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a44:	e025      	b.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d021      	beq.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7ff f8e7 	bl	8004c20 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d116      	bne.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e023      	b.n	8005ada <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10d      	bne.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	43da      	mvns	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	e00c      	b.n	8005ad2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d0b6      	beq.n	8005a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005af0:	e051      	b.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d123      	bne.n	8005b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0204 	orr.w	r2, r3, #4
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e046      	b.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d021      	beq.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7ff f865 	bl	8004c20 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d116      	bne.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e020      	b.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10c      	bne.n	8005bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e00b      	b.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	43da      	mvns	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d18d      	bne.n	8005af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bec:	e02d      	b.n	8005c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f878 	bl	8005ce4 <I2C_IsAcknowledgeFailed>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e02d      	b.n	8005c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d021      	beq.n	8005c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7ff f80b 	bl	8004c20 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e007      	b.n	8005c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d1ca      	bne.n	8005bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c6e:	e02d      	b.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f837 	bl	8005ce4 <I2C_IsAcknowledgeFailed>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e02d      	b.n	8005cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d021      	beq.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c88:	f7fe ffca 	bl	8004c20 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d302      	bcc.n	8005c9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d116      	bne.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f043 0220 	orr.w	r2, r3, #32
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e007      	b.n	8005cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d1ca      	bne.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfa:	d11b      	bne.n	8005d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	f043 0204 	orr.w	r2, r3, #4
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e26c      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8087 	beq.w	8005e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d60:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d00c      	beq.n	8005d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d6c:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d112      	bne.n	8005d9e <HAL_RCC_OscConfig+0x5e>
 8005d78:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d86:	4b89      	ldr	r3, [pc, #548]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d06c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x12c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d168      	bne.n	8005e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e246      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da6:	d106      	bne.n	8005db6 <HAL_RCC_OscConfig+0x76>
 8005da8:	4b80      	ldr	r3, [pc, #512]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7f      	ldr	r2, [pc, #508]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e02e      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x98>
 8005dbe:	4b7b      	ldr	r3, [pc, #492]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a7a      	ldr	r2, [pc, #488]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b78      	ldr	r3, [pc, #480]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a77      	ldr	r2, [pc, #476]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e01d      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCC_OscConfig+0xbc>
 8005de2:	4b72      	ldr	r3, [pc, #456]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a71      	ldr	r2, [pc, #452]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6e      	ldr	r2, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e00b      	b.n	8005e14 <HAL_RCC_OscConfig+0xd4>
 8005dfc:	4b6b      	ldr	r3, [pc, #428]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a6a      	ldr	r2, [pc, #424]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4b68      	ldr	r3, [pc, #416]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a67      	ldr	r2, [pc, #412]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d013      	beq.n	8005e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fe ff00 	bl	8004c20 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e24:	f7fe fefc 	bl	8004c20 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	; 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e1fa      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0xe4>
 8005e42:	e014      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e44:	f7fe feec 	bl	8004c20 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e4c:	f7fe fee8 	bl	8004c20 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b64      	cmp	r3, #100	; 0x64
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e1e6      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x10c>
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d063      	beq.n	8005f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e7a:	4b4c      	ldr	r3, [pc, #304]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e86:	4b49      	ldr	r3, [pc, #292]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d11c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x18c>
 8005e92:	4b46      	ldr	r3, [pc, #280]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d116      	bne.n	8005ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9e:	4b43      	ldr	r3, [pc, #268]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x176>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e1ba      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4939      	ldr	r1, [pc, #228]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	e03a      	b.n	8005f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed4:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <HAL_RCC_OscConfig+0x270>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eda:	f7fe fea1 	bl	8004c20 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee2:	f7fe fe9d 	bl	8004c20 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e19b      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f00:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4927      	ldr	r1, [pc, #156]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	600b      	str	r3, [r1, #0]
 8005f14:	e015      	b.n	8005f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f16:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <HAL_RCC_OscConfig+0x270>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fe fe80 	bl	8004c20 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f24:	f7fe fe7c 	bl	8004c20 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e17a      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d03a      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d019      	beq.n	8005f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5c:	f7fe fe60 	bl	8004c20 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f64:	f7fe fe5c 	bl	8004c20 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e15a      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <HAL_RCC_OscConfig+0x26c>)
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f000 fac6 	bl	8006514 <RCC_Delay>
 8005f88:	e01c      	b.n	8005fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_RCC_OscConfig+0x274>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f90:	f7fe fe46 	bl	8004c20 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f96:	e00f      	b.n	8005fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fe fe42 	bl	8004c20 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d908      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e140      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	42420000 	.word	0x42420000
 8005fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	4b9e      	ldr	r3, [pc, #632]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e9      	bne.n	8005f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80a6 	beq.w	800611e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd6:	4b97      	ldr	r3, [pc, #604]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	4b94      	ldr	r3, [pc, #592]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4a93      	ldr	r2, [pc, #588]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8005fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fec:	61d3      	str	r3, [r2, #28]
 8005fee:	4b91      	ldr	r3, [pc, #580]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffe:	4b8e      	ldr	r3, [pc, #568]	; (8006238 <HAL_RCC_OscConfig+0x4f8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d118      	bne.n	800603c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600a:	4b8b      	ldr	r3, [pc, #556]	; (8006238 <HAL_RCC_OscConfig+0x4f8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a8a      	ldr	r2, [pc, #552]	; (8006238 <HAL_RCC_OscConfig+0x4f8>)
 8006010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006016:	f7fe fe03 	bl	8004c20 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fe fdff 	bl	8004c20 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b64      	cmp	r3, #100	; 0x64
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0fd      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006030:	4b81      	ldr	r3, [pc, #516]	; (8006238 <HAL_RCC_OscConfig+0x4f8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <HAL_RCC_OscConfig+0x312>
 8006044:	4b7b      	ldr	r3, [pc, #492]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	4a7a      	ldr	r2, [pc, #488]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6213      	str	r3, [r2, #32]
 8006050:	e02d      	b.n	80060ae <HAL_RCC_OscConfig+0x36e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10c      	bne.n	8006074 <HAL_RCC_OscConfig+0x334>
 800605a:	4b76      	ldr	r3, [pc, #472]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4a75      	ldr	r2, [pc, #468]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	6213      	str	r3, [r2, #32]
 8006066:	4b73      	ldr	r3, [pc, #460]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4a72      	ldr	r2, [pc, #456]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800606c:	f023 0304 	bic.w	r3, r3, #4
 8006070:	6213      	str	r3, [r2, #32]
 8006072:	e01c      	b.n	80060ae <HAL_RCC_OscConfig+0x36e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d10c      	bne.n	8006096 <HAL_RCC_OscConfig+0x356>
 800607c:	4b6d      	ldr	r3, [pc, #436]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4a6c      	ldr	r2, [pc, #432]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	6213      	str	r3, [r2, #32]
 8006088:	4b6a      	ldr	r3, [pc, #424]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	4a69      	ldr	r2, [pc, #420]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6213      	str	r3, [r2, #32]
 8006094:	e00b      	b.n	80060ae <HAL_RCC_OscConfig+0x36e>
 8006096:	4b67      	ldr	r3, [pc, #412]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4a66      	ldr	r2, [pc, #408]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6213      	str	r3, [r2, #32]
 80060a2:	4b64      	ldr	r3, [pc, #400]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	4a63      	ldr	r2, [pc, #396]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d015      	beq.n	80060e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b6:	f7fe fdb3 	bl	8004c20 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fe fdaf 	bl	8004c20 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e0ab      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d4:	4b57      	ldr	r3, [pc, #348]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ee      	beq.n	80060be <HAL_RCC_OscConfig+0x37e>
 80060e0:	e014      	b.n	800610c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e2:	f7fe fd9d 	bl	8004c20 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fe fd99 	bl	8004c20 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e095      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006100:	4b4c      	ldr	r3, [pc, #304]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ee      	bne.n	80060ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4b48      	ldr	r3, [pc, #288]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4a47      	ldr	r2, [pc, #284]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 8081 	beq.w	800622a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006128:	4b42      	ldr	r3, [pc, #264]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d061      	beq.n	80061f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d146      	bne.n	80061ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613c:	4b3f      	ldr	r3, [pc, #252]	; (800623c <HAL_RCC_OscConfig+0x4fc>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006142:	f7fe fd6d 	bl	8004c20 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614a:	f7fe fd69 	bl	8004c20 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e067      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800615c:	4b35      	ldr	r3, [pc, #212]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f0      	bne.n	800614a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006170:	d108      	bne.n	8006184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006172:	4b30      	ldr	r3, [pc, #192]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	492d      	ldr	r1, [pc, #180]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006180:	4313      	orrs	r3, r2
 8006182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006184:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a19      	ldr	r1, [r3, #32]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	430b      	orrs	r3, r1
 8006196:	4927      	ldr	r1, [pc, #156]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	4313      	orrs	r3, r2
 800619a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <HAL_RCC_OscConfig+0x4fc>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fe fd3d 	bl	8004c20 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061aa:	f7fe fd39 	bl	8004c20 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e037      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061bc:	4b1d      	ldr	r3, [pc, #116]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x46a>
 80061c8:	e02f      	b.n	800622a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ca:	4b1c      	ldr	r3, [pc, #112]	; (800623c <HAL_RCC_OscConfig+0x4fc>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d0:	f7fe fd26 	bl	8004c20 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d8:	f7fe fd22 	bl	8004c20 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e020      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ea:	4b12      	ldr	r3, [pc, #72]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f0      	bne.n	80061d8 <HAL_RCC_OscConfig+0x498>
 80061f6:	e018      	b.n	800622a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e013      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCC_OscConfig+0x4f4>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	429a      	cmp	r2, r3
 8006216:	d106      	bne.n	8006226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d001      	beq.n	800622a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40021000 	.word	0x40021000
 8006238:	40007000 	.word	0x40007000
 800623c:	42420060 	.word	0x42420060

08006240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0d0      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006254:	4b6a      	ldr	r3, [pc, #424]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d910      	bls.n	8006284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006262:	4b67      	ldr	r3, [pc, #412]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 0207 	bic.w	r2, r3, #7
 800626a:	4965      	ldr	r1, [pc, #404]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b63      	ldr	r3, [pc, #396]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0b8      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0304 	and.w	r3, r3, #4
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800629c:	4b59      	ldr	r3, [pc, #356]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a58      	ldr	r2, [pc, #352]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062b4:	4b53      	ldr	r3, [pc, #332]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a52      	ldr	r2, [pc, #328]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062c0:	4b50      	ldr	r3, [pc, #320]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	494d      	ldr	r1, [pc, #308]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d040      	beq.n	8006360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d107      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b47      	ldr	r3, [pc, #284]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d115      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07f      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fe:	4b41      	ldr	r3, [pc, #260]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e073      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630e:	4b3d      	ldr	r3, [pc, #244]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e06b      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800631e:	4b39      	ldr	r3, [pc, #228]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f023 0203 	bic.w	r2, r3, #3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4936      	ldr	r1, [pc, #216]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006330:	f7fe fc76 	bl	8004c20 <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006336:	e00a      	b.n	800634e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006338:	f7fe fc72 	bl	8004c20 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f241 3288 	movw	r2, #5000	; 0x1388
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e053      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f003 020c 	and.w	r2, r3, #12
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	429a      	cmp	r2, r3
 800635e:	d1eb      	bne.n	8006338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d210      	bcs.n	8006390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636e:	4b24      	ldr	r3, [pc, #144]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 0207 	bic.w	r2, r3, #7
 8006376:	4922      	ldr	r1, [pc, #136]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637e:	4b20      	ldr	r3, [pc, #128]	; (8006400 <HAL_RCC_ClockConfig+0x1c0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d001      	beq.n	8006390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e032      	b.n	80063f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639c:	4b19      	ldr	r3, [pc, #100]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4916      	ldr	r1, [pc, #88]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	490e      	ldr	r1, [pc, #56]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ce:	f000 f821 	bl	8006414 <HAL_RCC_GetSysClockFreq>
 80063d2:	4602      	mov	r2, r0
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_ClockConfig+0x1c4>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	490a      	ldr	r1, [pc, #40]	; (8006408 <HAL_RCC_ClockConfig+0x1c8>)
 80063e0:	5ccb      	ldrb	r3, [r1, r3]
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <HAL_RCC_ClockConfig+0x1cc>)
 80063e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <HAL_RCC_ClockConfig+0x1d0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fbd4 	bl	8004b9c <HAL_InitTick>

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40022000 	.word	0x40022000
 8006404:	40021000 	.word	0x40021000
 8006408:	0800dc78 	.word	0x0800dc78
 800640c:	20000004 	.word	0x20000004
 8006410:	20000008 	.word	0x20000008

08006414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006414:	b490      	push	{r4, r7}
 8006416:	b08a      	sub	sp, #40	; 0x28
 8006418:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800641a:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800641c:	1d3c      	adds	r4, r7, #4
 800641e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006424:	f240 2301 	movw	r3, #513	; 0x201
 8006428:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 030c 	and.w	r3, r3, #12
 800644a:	2b04      	cmp	r3, #4
 800644c:	d002      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x40>
 800644e:	2b08      	cmp	r3, #8
 8006450:	d003      	beq.n	800645a <HAL_RCC_GetSysClockFreq+0x46>
 8006452:	e02d      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006454:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006456:	623b      	str	r3, [r7, #32]
      break;
 8006458:	e02d      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	0c9b      	lsrs	r3, r3, #18
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006466:	4413      	add	r3, r2
 8006468:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800646c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d013      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	0c5b      	lsrs	r3, r3, #17
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006486:	4413      	add	r3, r2
 8006488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800648c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006492:	fb02 f203 	mul.w	r2, r2, r3
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	e004      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	623b      	str	r3, [r7, #32]
      break;
 80064ae:	e002      	b.n	80064b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064b0:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064b2:	623b      	str	r3, [r7, #32]
      break;
 80064b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b6:	6a3b      	ldr	r3, [r7, #32]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc90      	pop	{r4, r7}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	0800dc08 	.word	0x0800dc08
 80064c8:	40021000 	.word	0x40021000
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	007a1200 	.word	0x007a1200

080064d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064dc:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80064de:	681b      	ldr	r3, [r3, #0]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064f0:	f7ff fff2 	bl	80064d8 <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	; (8006510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40021000 	.word	0x40021000
 8006510:	0800dc88 	.word	0x0800dc88

08006514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <RCC_Delay+0x34>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0a      	ldr	r2, [pc, #40]	; (800654c <RCC_Delay+0x38>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	0a5b      	lsrs	r3, r3, #9
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006530:	bf00      	nop
  }
  while (Delay --);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	60fa      	str	r2, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f9      	bne.n	8006530 <RCC_Delay+0x1c>
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	20000004 	.word	0x20000004
 800654c:	10624dd3 	.word	0x10624dd3

08006550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e076      	b.n	8006650 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006572:	d009      	beq.n	8006588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	61da      	str	r2, [r3, #28]
 800657a:	e005      	b.n	8006588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fe f908 	bl	80047b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	ea42 0103 	orr.w	r1, r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0c1a      	lsrs	r2, r3, #16
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f002 0204 	and.w	r2, r2, #4
 800662e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	; 0x30
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006666:	2301      	movs	r3, #1
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_SPI_TransmitReceive+0x26>
 800667a:	2302      	movs	r3, #2
 800667c:	e18a      	b.n	8006994 <HAL_SPI_TransmitReceive+0x33c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006686:	f7fe facb 	bl	8004c20 <HAL_GetTick>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800669c:	887b      	ldrh	r3, [r7, #2]
 800669e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d00f      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x70>
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ae:	d107      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x68>
 80066b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d003      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066c6:	e15b      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_SPI_TransmitReceive+0x82>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_TransmitReceive+0x82>
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066e0:	e14e      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d003      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2205      	movs	r2, #5
 80066f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	887a      	ldrh	r2, [r7, #2]
 8006706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	887a      	ldrh	r2, [r7, #2]
 8006718:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	887a      	ldrh	r2, [r7, #2]
 800671e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b40      	cmp	r3, #64	; 0x40
 8006738:	d007      	beq.n	800674a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006752:	d178      	bne.n	8006846 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <HAL_SPI_TransmitReceive+0x10a>
 800675c:	8b7b      	ldrh	r3, [r7, #26]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d166      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	881a      	ldrh	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	1c9a      	adds	r2, r3, #2
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006786:	e053      	b.n	8006830 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d11b      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x176>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d016      	beq.n	80067ce <HAL_SPI_TransmitReceive+0x176>
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d113      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	881a      	ldrh	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	1c9a      	adds	r2, r3, #2
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d119      	bne.n	8006810 <HAL_SPI_TransmitReceive+0x1b8>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d014      	beq.n	8006810 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	b292      	uxth	r2, r2
 80067f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	1c9a      	adds	r2, r3, #2
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800680c:	2301      	movs	r3, #1
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006810:	f7fe fa06 	bl	8004c20 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800681c:	429a      	cmp	r2, r3
 800681e:	d807      	bhi.n	8006830 <HAL_SPI_TransmitReceive+0x1d8>
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d003      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800682e:	e0a7      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1a6      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x130>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1a1      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x130>
 8006844:	e07c      	b.n	8006940 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x1fc>
 800684e:	8b7b      	ldrh	r3, [r7, #26]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d16b      	bne.n	800692c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800687a:	e057      	b.n	800692c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d11c      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x26c>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x26c>
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b01      	cmp	r3, #1
 8006898:	d114      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	7812      	ldrb	r2, [r2, #0]
 80068a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d119      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x2ae>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d014      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006902:	2301      	movs	r3, #1
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006906:	f7fe f98b 	bl	8004c20 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006912:	429a      	cmp	r2, r3
 8006914:	d803      	bhi.n	800691e <HAL_SPI_TransmitReceive+0x2c6>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691c:	d102      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x2cc>
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d103      	bne.n	800692c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800692a:	e029      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1a2      	bne.n	800687c <HAL_SPI_TransmitReceive+0x224>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d19d      	bne.n	800687c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f8b1 	bl	8006aac <SPI_EndRxTxTransaction>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800695c:	e010      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	e000      	b.n	8006980 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800697e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	; 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069ac:	f7fe f938 	bl	8004c20 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4413      	add	r3, r2
 80069ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069bc:	f7fe f930 	bl	8004c20 <HAL_GetTick>
 80069c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069c2:	4b39      	ldr	r3, [pc, #228]	; (8006aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	015b      	lsls	r3, r3, #5
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d2:	e054      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d050      	beq.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069dc:	f7fe f920 	bl	8004c20 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d902      	bls.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d13d      	bne.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d111      	bne.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a14:	d004      	beq.n	8006a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1e:	d107      	bne.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a38:	d10f      	bne.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e017      	b.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d19b      	bne.n	80069d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000004 	.word	0x20000004

08006aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff6a 	bl	800699c <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e041      	b.n	8006b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fd fed8 	bl	80048c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fa88 	bl	800703c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e044      	b.n	8006c2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <HAL_TIM_Base_Start_IT+0xac>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1c      	ldr	r2, [pc, #112]	; (8006c38 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <HAL_TIM_Base_Start_IT+0xb4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <HAL_TIM_Base_Start_IT+0xb8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d111      	bne.n	8006c18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d010      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	e007      	b.n	8006c28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40000400 	.word	0x40000400
 8006c40:	40000800 	.word	0x40000800
 8006c44:	40000c00 	.word	0x40000c00

08006c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d122      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d11b      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0202 	mvn.w	r2, #2
 8006c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9ba 	bl	8007004 <HAL_TIM_IC_CaptureCallback>
 8006c90:	e005      	b.n	8006c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9ad 	bl	8006ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9bc 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d122      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0204 	mvn.w	r2, #4
 8006cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f990 	bl	8007004 <HAL_TIM_IC_CaptureCallback>
 8006ce4:	e005      	b.n	8006cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f983 	bl	8006ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f992 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d122      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d11b      	bne.n	8006d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0208 	mvn.w	r2, #8
 8006d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2204      	movs	r2, #4
 8006d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f966 	bl	8007004 <HAL_TIM_IC_CaptureCallback>
 8006d38:	e005      	b.n	8006d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f959 	bl	8006ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f968 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b10      	cmp	r3, #16
 8006d58:	d122      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 0310 	and.w	r3, r3, #16
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d11b      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f06f 0210 	mvn.w	r2, #16
 8006d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2208      	movs	r2, #8
 8006d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f93c 	bl	8007004 <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e005      	b.n	8006d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f92f 	bl	8006ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f93e 	bl	8007016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0201 	mvn.w	r2, #1
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f90a 	bl	8006fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 faa7 	bl	8007346 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f902 	bl	8007028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0220 	mvn.w	r2, #32
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa72 	bl	8007334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_ConfigClockSource+0x18>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0b3      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x180>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	d03e      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0xd0>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	f200 8087 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	f000 8085 	beq.w	8006fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebe:	d87f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d01a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xa2>
 8006ec4:	2b70      	cmp	r3, #112	; 0x70
 8006ec6:	d87b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d050      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x116>
 8006ecc:	2b60      	cmp	r3, #96	; 0x60
 8006ece:	d877      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ed0:	2b50      	cmp	r3, #80	; 0x50
 8006ed2:	d03c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xf6>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	d873      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d058      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x136>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d064      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006ee4:	2b30      	cmp	r3, #48	; 0x30
 8006ee6:	d86b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d060      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d867      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d05a      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ef8:	e062      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f000 f988 	bl	800721e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e04e      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f000 f971 	bl	800721e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f4a:	609a      	str	r2, [r3, #8]
      break;
 8006f4c:	e03b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 f8e8 	bl	8007130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2150      	movs	r1, #80	; 0x50
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f93f 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e02b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 f906 	bl	800718c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2160      	movs	r1, #96	; 0x60
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f92f 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e01b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 f8c8 	bl	8007130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f91f 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006fac:	e00b      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 f916 	bl	80071ea <TIM_ITRx_SetConfig>
        break;
 8006fbe:	e002      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
	...

0800703c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a33      	ldr	r2, [pc, #204]	; (800711c <TIM_Base_SetConfig+0xe0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a32      	ldr	r2, [pc, #200]	; (8007120 <TIM_Base_SetConfig+0xe4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00f      	beq.n	800707c <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d00b      	beq.n	800707c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a2f      	ldr	r2, [pc, #188]	; (8007124 <TIM_Base_SetConfig+0xe8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a2e      	ldr	r2, [pc, #184]	; (8007128 <TIM_Base_SetConfig+0xec>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a2d      	ldr	r2, [pc, #180]	; (800712c <TIM_Base_SetConfig+0xf0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d108      	bne.n	800708e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a22      	ldr	r2, [pc, #136]	; (800711c <TIM_Base_SetConfig+0xe0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <TIM_Base_SetConfig+0x82>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <TIM_Base_SetConfig+0xe4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00f      	beq.n	80070be <TIM_Base_SetConfig+0x82>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d00b      	beq.n	80070be <TIM_Base_SetConfig+0x82>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <TIM_Base_SetConfig+0xe8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d007      	beq.n	80070be <TIM_Base_SetConfig+0x82>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <TIM_Base_SetConfig+0xec>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_Base_SetConfig+0x82>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a1c      	ldr	r2, [pc, #112]	; (800712c <TIM_Base_SetConfig+0xf0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d108      	bne.n	80070d0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <TIM_Base_SetConfig+0xe0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a08      	ldr	r2, [pc, #32]	; (8007120 <TIM_Base_SetConfig+0xe4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d103      	bne.n	800710c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	615a      	str	r2, [r3, #20]
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40013400 	.word	0x40013400
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00

08007130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f023 0201 	bic.w	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800715a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 030a 	bic.w	r3, r3, #10
 800716c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4313      	orrs	r3, r2
 8007174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	f023 0210 	bic.w	r2, r3, #16
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	031b      	lsls	r3, r3, #12
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	621a      	str	r2, [r3, #32]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bc80      	pop	{r7}
 80071e8:	4770      	bx	lr

080071ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	f043 0307 	orr.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr

0800721e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800721e:	b480      	push	{r7}
 8007220:	b087      	sub	sp, #28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007238:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	021a      	lsls	r2, r3, #8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	431a      	orrs	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4313      	orrs	r3, r2
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	609a      	str	r2, [r3, #8]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	bc80      	pop	{r7}
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007270:	2302      	movs	r3, #2
 8007272:	e050      	b.n	8007316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ca:	d00e      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a15      	ldr	r2, [pc, #84]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a14      	ldr	r2, [pc, #80]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a12      	ldr	r2, [pc, #72]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d10c      	bne.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40013400 	.word	0x40013400
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00

08007334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <ubah_ke_523>:

float phi = 3.14159265359;
float omega, alpha, Ax, A0, A1, A2, B0, B1, B2;

uint32_t ubah_ke_523(float value)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	uint8_t safe_buffer[4];

	long first_operation  = value * 8388608;
 8007360:	f04f 4196 	mov.w	r1, #1258291200	; 0x4b000000
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7f9 fd59 	bl	8000e1c <__aeabi_fmul>
 800736a:	4603      	mov	r3, r0
 800736c:	4618      	mov	r0, r3
 800736e:	f7f9 ff1b 	bl	80011a8 <__aeabi_f2iz>
 8007372:	4603      	mov	r3, r0
 8007374:	617b      	str	r3, [r7, #20]
	long second_operation = first_operation + 134217728;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800737c:	613b      	str	r3, [r7, #16]

	safe_buffer[0] = (uint8_t)(second_operation >> 24);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	161b      	asrs	r3, r3, #24
 8007382:	b2db      	uxtb	r3, r3
 8007384:	733b      	strb	r3, [r7, #12]
	safe_buffer[1] = (uint8_t)(second_operation >> 16);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	141b      	asrs	r3, r3, #16
 800738a:	b2db      	uxtb	r3, r3
 800738c:	737b      	strb	r3, [r7, #13]
	safe_buffer[2] = (uint8_t)(second_operation >> 8 );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	121b      	asrs	r3, r3, #8
 8007392:	b2db      	uxtb	r3, r3
 8007394:	73bb      	strb	r3, [r7, #14]
	safe_buffer[3] = (uint8_t) second_operation;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	73fb      	strb	r3, [r7, #15]

	safe_buffer[0] = safe_buffer[0] ^ 0x08;
 800739c:	7b3b      	ldrb	r3, [r7, #12]
 800739e:	f083 0308 	eor.w	r3, r3, #8
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	733b      	strb	r3, [r7, #12]

	return (uint32_t)((safe_buffer[0] << 24) | (safe_buffer[1] << 16) | (safe_buffer[2] << 8) | safe_buffer[3]);
 80073a6:	7b3b      	ldrb	r3, [r7, #12]
 80073a8:	061a      	lsls	r2, r3, #24
 80073aa:	7b7b      	ldrb	r3, [r7, #13]
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	431a      	orrs	r2, r3
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	4313      	orrs	r3, r2
 80073b6:	7bfa      	ldrb	r2, [r7, #15]
 80073b8:	4313      	orrs	r3, r2
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <ubah_ke_hex>:

uint32_t ubah_ke_hex(float value)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	uint32_t segment1 = 0, segment2 = 0, decimal = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	2300      	movs	r3, #0
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
	if(value < 0)
 80073d8:	f04f 0100 	mov.w	r1, #0
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7f9 febb 	bl	8001158 <__aeabi_fcmplt>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01e      	beq.n	8007426 <ubah_ke_hex+0x62>
	{
	  decimal   = (uint16_t)(value*-1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f9 ff00 	bl	80011f4 <__aeabi_f2uiz>
 80073f4:	4603      	mov	r3, r0
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	60fb      	str	r3, [r7, #12]
	  segment1  = decimal;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	617b      	str	r3, [r7, #20]
	  segment1 |= 0x8000;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007404:	617b      	str	r3, [r7, #20]
	  segment2  = (uint32_t)(value*-100)-(decimal*100);
 8007406:	4917      	ldr	r1, [pc, #92]	; (8007464 <ubah_ke_hex+0xa0>)
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7f9 fd07 	bl	8000e1c <__aeabi_fmul>
 800740e:	4603      	mov	r3, r0
 8007410:	4618      	mov	r0, r3
 8007412:	f7f9 feef 	bl	80011f4 <__aeabi_f2uiz>
 8007416:	4602      	mov	r2, r0
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2164      	movs	r1, #100	; 0x64
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	e016      	b.n	8007454 <ubah_ke_hex+0x90>
	}
	else
	{
	  decimal  = (uint16_t)value;
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7f9 fee4 	bl	80011f4 <__aeabi_f2uiz>
 800742c:	4603      	mov	r3, r0
 800742e:	b29b      	uxth	r3, r3
 8007430:	60fb      	str	r3, [r7, #12]
	  segment1 = decimal;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	617b      	str	r3, [r7, #20]
	  segment2 = (uint32_t)(value*100)-(decimal*100);
 8007436:	490c      	ldr	r1, [pc, #48]	; (8007468 <ubah_ke_hex+0xa4>)
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7f9 fcef 	bl	8000e1c <__aeabi_fmul>
 800743e:	4603      	mov	r3, r0
 8007440:	4618      	mov	r0, r3
 8007442:	f7f9 fed7 	bl	80011f4 <__aeabi_f2uiz>
 8007446:	4602      	mov	r2, r0
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2164      	movs	r1, #100	; 0x64
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	613b      	str	r3, [r7, #16]
	}

	return (segment1<<16)|segment2;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	041a      	lsls	r2, r3, #16
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4313      	orrs	r3, r2
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	c2c80000 	.word	0xc2c80000
 8007468:	42c80000 	.word	0x42c80000

0800746c <ubah_ke_float>:

float ubah_ke_float(uint32_t value)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	uint16_t segment1 = (uint16_t)(value>>16);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	82fb      	strh	r3, [r7, #22]
	uint16_t segment2 = (uint16_t)value;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	82bb      	strh	r3, [r7, #20]

	float nilai1 = (float)(segment1&0x7fff);
 800747e:	8afb      	ldrh	r3, [r7, #22]
 8007480:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007484:	4618      	mov	r0, r3
 8007486:	f7f9 fc75 	bl	8000d74 <__aeabi_i2f>
 800748a:	4603      	mov	r3, r0
 800748c:	613b      	str	r3, [r7, #16]
	float nilai2 = (float)segment2/100;
 800748e:	8abb      	ldrh	r3, [r7, #20]
 8007490:	4618      	mov	r0, r3
 8007492:	f7f9 fc6b 	bl	8000d6c <__aeabi_ui2f>
 8007496:	4603      	mov	r3, r0
 8007498:	490d      	ldr	r1, [pc, #52]	; (80074d0 <ubah_ke_float+0x64>)
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 fd72 	bl	8000f84 <__aeabi_fdiv>
 80074a0:	4603      	mov	r3, r0
 80074a2:	60fb      	str	r3, [r7, #12]

	if(segment1&0x8000)
 80074a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da07      	bge.n	80074bc <ubah_ke_float+0x50>
	{
	  return (nilai1+nilai2)*-1;
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f7f9 fbac 	bl	8000c0c <__addsf3>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80074ba:	e004      	b.n	80074c6 <ubah_ke_float+0x5a>
	}
	else
	{
	  return nilai1+nilai2;
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	6938      	ldr	r0, [r7, #16]
 80074c0:	f7f9 fba4 	bl	8000c0c <__addsf3>
 80074c4:	4603      	mov	r3, r0
	}
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	42c80000 	.word	0x42c80000

080074d4 <hitung_gain>:

uint32_t hitung_gain(float gain_in_dB)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	float nilai_gain = pow(10,gain_in_dB/20);
 80074dc:	490f      	ldr	r1, [pc, #60]	; (800751c <hitung_gain+0x48>)
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7f9 fd50 	bl	8000f84 <__aeabi_fdiv>
 80074e4:	4603      	mov	r3, r0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f9 f80a 	bl	8000500 <__aeabi_f2d>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	f04f 0000 	mov.w	r0, #0
 80074f4:	490a      	ldr	r1, [pc, #40]	; (8007520 <hitung_gain+0x4c>)
 80074f6:	f004 fb81 	bl	800bbfc <pow>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	f7f9 fb2d 	bl	8000b60 <__aeabi_d2f>
 8007506:	4603      	mov	r3, r0
 8007508:	60fb      	str	r3, [r7, #12]
	return ubah_ke_523(nilai_gain);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff24 	bl	8007358 <ubah_ke_523>
 8007510:	4603      	mov	r3, r0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	41a00000 	.word	0x41a00000
 8007520:	40240000 	.word	0x40240000

08007524 <hitung_limiter>:

void hitung_limiter(float treshold, uint32_t *buffer_gain)
{
 8007524:	b5b0      	push	{r4, r5, r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
	int gain_point = -90;
 800752e:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8007532:	61fb      	str	r3, [r7, #28]
	float sinyal_out, penurunan_sinyal, gain_linier;

	for(int step=0; step<33; step++)
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e069      	b.n	800760e <hitung_limiter+0xea>
	{
		if(gain_point <= treshold)
 800753a:	69f8      	ldr	r0, [r7, #28]
 800753c:	f7f9 fc1a 	bl	8000d74 <__aeabi_i2f>
 8007540:	4603      	mov	r3, r0
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7f9 fe1b 	bl	8001180 <__aeabi_fcmpge>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <hitung_limiter+0x42>
		{
			buffer_gain[step] = ubah_ke_523(1);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	18d4      	adds	r4, r2, r3
 8007558:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800755c:	f7ff fefc 	bl	8007358 <ubah_ke_523>
 8007560:	4603      	mov	r3, r0
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	e04d      	b.n	8007602 <hitung_limiter+0xde>
		}
		else
		{
			sinyal_out = treshold + ((gain_point-treshold)/100.0);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7f8 ffca 	bl	8000500 <__aeabi_f2d>
 800756c:	4604      	mov	r4, r0
 800756e:	460d      	mov	r5, r1
 8007570:	69f8      	ldr	r0, [r7, #28]
 8007572:	f7f9 fbff 	bl	8000d74 <__aeabi_i2f>
 8007576:	4603      	mov	r3, r0
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4618      	mov	r0, r3
 800757c:	f7f9 fb44 	bl	8000c08 <__aeabi_fsub>
 8007580:	4603      	mov	r3, r0
 8007582:	4618      	mov	r0, r3
 8007584:	f7f8 ffbc 	bl	8000500 <__aeabi_f2d>
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	4b24      	ldr	r3, [pc, #144]	; (8007620 <hitung_limiter+0xfc>)
 800758e:	f7f9 f939 	bl	8000804 <__aeabi_ddiv>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f8 fe53 	bl	8000244 <__adddf3>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7f9 fadb 	bl	8000b60 <__aeabi_d2f>
 80075aa:	4603      	mov	r3, r0
 80075ac:	617b      	str	r3, [r7, #20]
			penurunan_sinyal = sinyal_out - gain_point;
 80075ae:	69f8      	ldr	r0, [r7, #28]
 80075b0:	f7f9 fbe0 	bl	8000d74 <__aeabi_i2f>
 80075b4:	4603      	mov	r3, r0
 80075b6:	4619      	mov	r1, r3
 80075b8:	6978      	ldr	r0, [r7, #20]
 80075ba:	f7f9 fb25 	bl	8000c08 <__aeabi_fsub>
 80075be:	4603      	mov	r3, r0
 80075c0:	613b      	str	r3, [r7, #16]
			gain_linier = pow(10,(penurunan_sinyal/20));
 80075c2:	4918      	ldr	r1, [pc, #96]	; (8007624 <hitung_limiter+0x100>)
 80075c4:	6938      	ldr	r0, [r7, #16]
 80075c6:	f7f9 fcdd 	bl	8000f84 <__aeabi_fdiv>
 80075ca:	4603      	mov	r3, r0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7f8 ff97 	bl	8000500 <__aeabi_f2d>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	f04f 0000 	mov.w	r0, #0
 80075da:	4913      	ldr	r1, [pc, #76]	; (8007628 <hitung_limiter+0x104>)
 80075dc:	f004 fb0e 	bl	800bbfc <pow>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4610      	mov	r0, r2
 80075e6:	4619      	mov	r1, r3
 80075e8:	f7f9 faba 	bl	8000b60 <__aeabi_d2f>
 80075ec:	4603      	mov	r3, r0
 80075ee:	60fb      	str	r3, [r7, #12]
			buffer_gain[step] = ubah_ke_523(gain_linier);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	18d4      	adds	r4, r2, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7ff fead 	bl	8007358 <ubah_ke_523>
 80075fe:	4603      	mov	r3, r0
 8007600:	6023      	str	r3, [r4, #0]
		}
		gain_point += 3;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3303      	adds	r3, #3
 8007606:	61fb      	str	r3, [r7, #28]
	for(int step=0; step<33; step++)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	3301      	adds	r3, #1
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b20      	cmp	r3, #32
 8007612:	dd92      	ble.n	800753a <hitung_limiter+0x16>
	}
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bdb0      	pop	{r4, r5, r7, pc}
 800761e:	bf00      	nop
 8007620:	40590000 	.word	0x40590000
 8007624:	41a00000 	.word	0x41a00000
 8007628:	40240000 	.word	0x40240000

0800762c <hitung_peq>:

void hitung_peq(float freq, float gain, float qual, uint32_t *buffer)
{
 800762c:	b5b0      	push	{r4, r5, r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	if(gain == 0)
 800763a:	f04f 0100 	mov.w	r1, #0
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f7f9 fd80 	bl	8001144 <__aeabi_fcmpeq>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01d      	beq.n	8007686 <hitung_peq+0x5a>
	{
		buffer[0] = ubah_ke_523(1);
 800764a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800764e:	f7ff fe83 	bl	8007358 <ubah_ke_523>
 8007652:	4602      	mov	r2, r0
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]
		buffer[1] = buffer[2] = buffer[3] = buffer[4] = ubah_ke_523(0);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f103 0410 	add.w	r4, r3, #16
 800765e:	f04f 0000 	mov.w	r0, #0
 8007662:	f7ff fe79 	bl	8007358 <ubah_ke_523>
 8007666:	4603      	mov	r3, r0
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f103 020c 	add.w	r2, r3, #12
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	3204      	adds	r2, #4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6013      	str	r3, [r2, #0]
		buffer[1] = ubah_ke_523(B1);
		buffer[2] = ubah_ke_523(B2);
		buffer[3] = ubah_ke_523(A1);
		buffer[4] = ubah_ke_523(A2);
	}
}
 8007684:	e13b      	b.n	80078fe <hitung_peq+0x2d2>
		omega = (2*phi*freq)/48000;
 8007686:	4ba0      	ldr	r3, [pc, #640]	; (8007908 <hitung_peq+0x2dc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4618      	mov	r0, r3
 800768e:	f7f9 fabd 	bl	8000c0c <__addsf3>
 8007692:	4603      	mov	r3, r0
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	4618      	mov	r0, r3
 8007698:	f7f9 fbc0 	bl	8000e1c <__aeabi_fmul>
 800769c:	4603      	mov	r3, r0
 800769e:	499b      	ldr	r1, [pc, #620]	; (800790c <hitung_peq+0x2e0>)
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f9 fc6f 	bl	8000f84 <__aeabi_fdiv>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	4b99      	ldr	r3, [pc, #612]	; (8007910 <hitung_peq+0x2e4>)
 80076ac:	601a      	str	r2, [r3, #0]
		Ax    = pow(10,(gain/40));
 80076ae:	4999      	ldr	r1, [pc, #612]	; (8007914 <hitung_peq+0x2e8>)
 80076b0:	68b8      	ldr	r0, [r7, #8]
 80076b2:	f7f9 fc67 	bl	8000f84 <__aeabi_fdiv>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7f8 ff21 	bl	8000500 <__aeabi_f2d>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	4994      	ldr	r1, [pc, #592]	; (8007918 <hitung_peq+0x2ec>)
 80076c8:	f004 fa98 	bl	800bbfc <pow>
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4619      	mov	r1, r3
 80076d4:	f7f9 fa44 	bl	8000b60 <__aeabi_d2f>
 80076d8:	4603      	mov	r3, r0
 80076da:	4a90      	ldr	r2, [pc, #576]	; (800791c <hitung_peq+0x2f0>)
 80076dc:	6013      	str	r3, [r2, #0]
		alpha = sin(omega)/(qual*2);
 80076de:	4b8c      	ldr	r3, [pc, #560]	; (8007910 <hitung_peq+0x2e4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7f8 ff0c 	bl	8000500 <__aeabi_f2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4610      	mov	r0, r2
 80076ee:	4619      	mov	r1, r3
 80076f0:	f004 fa3e 	bl	800bb70 <sin>
 80076f4:	4604      	mov	r4, r0
 80076f6:	460d      	mov	r5, r1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4619      	mov	r1, r3
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7f9 fa85 	bl	8000c0c <__addsf3>
 8007702:	4603      	mov	r3, r0
 8007704:	4618      	mov	r0, r3
 8007706:	f7f8 fefb 	bl	8000500 <__aeabi_f2d>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f877 	bl	8000804 <__aeabi_ddiv>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4610      	mov	r0, r2
 800771c:	4619      	mov	r1, r3
 800771e:	f7f9 fa1f 	bl	8000b60 <__aeabi_d2f>
 8007722:	4603      	mov	r3, r0
 8007724:	4a7e      	ldr	r2, [pc, #504]	; (8007920 <hitung_peq+0x2f4>)
 8007726:	6013      	str	r3, [r2, #0]
		A0 = 1 + (alpha / Ax);
 8007728:	4b7d      	ldr	r3, [pc, #500]	; (8007920 <hitung_peq+0x2f4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a7b      	ldr	r2, [pc, #492]	; (800791c <hitung_peq+0x2f0>)
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7f9 fc26 	bl	8000f84 <__aeabi_fdiv>
 8007738:	4603      	mov	r3, r0
 800773a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800773e:	4618      	mov	r0, r3
 8007740:	f7f9 fa64 	bl	8000c0c <__addsf3>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	4b76      	ldr	r3, [pc, #472]	; (8007924 <hitung_peq+0x2f8>)
 800774a:	601a      	str	r2, [r3, #0]
		A1 = -1 * (2 * cos(omega));
 800774c:	4b70      	ldr	r3, [pc, #448]	; (8007910 <hitung_peq+0x2e4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f7f8 fed5 	bl	8000500 <__aeabi_f2d>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4610      	mov	r0, r2
 800775c:	4619      	mov	r1, r3
 800775e:	f004 f9c5 	bl	800baec <cos>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	f7f8 fd6d 	bl	8000244 <__adddf3>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	4610      	mov	r0, r2
 8007770:	4619      	mov	r1, r3
 8007772:	f7f9 f9f5 	bl	8000b60 <__aeabi_d2f>
 8007776:	4603      	mov	r3, r0
 8007778:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800777c:	4a6a      	ldr	r2, [pc, #424]	; (8007928 <hitung_peq+0x2fc>)
 800777e:	6013      	str	r3, [r2, #0]
		A2 = 1 - (alpha / Ax);
 8007780:	4b67      	ldr	r3, [pc, #412]	; (8007920 <hitung_peq+0x2f4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a65      	ldr	r2, [pc, #404]	; (800791c <hitung_peq+0x2f0>)
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7f9 fbfa 	bl	8000f84 <__aeabi_fdiv>
 8007790:	4603      	mov	r3, r0
 8007792:	4619      	mov	r1, r3
 8007794:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007798:	f7f9 fa36 	bl	8000c08 <__aeabi_fsub>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	4b62      	ldr	r3, [pc, #392]	; (800792c <hitung_peq+0x300>)
 80077a2:	601a      	str	r2, [r3, #0]
		B0 = 1 + (alpha * Ax);
 80077a4:	4b5e      	ldr	r3, [pc, #376]	; (8007920 <hitung_peq+0x2f4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a5c      	ldr	r2, [pc, #368]	; (800791c <hitung_peq+0x2f0>)
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7f9 fb34 	bl	8000e1c <__aeabi_fmul>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7f9 fa26 	bl	8000c0c <__addsf3>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	4b5a      	ldr	r3, [pc, #360]	; (8007930 <hitung_peq+0x304>)
 80077c6:	601a      	str	r2, [r3, #0]
		B1 = -1 * (2 * cos(omega));
 80077c8:	4b51      	ldr	r3, [pc, #324]	; (8007910 <hitung_peq+0x2e4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7f8 fe97 	bl	8000500 <__aeabi_f2d>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4610      	mov	r0, r2
 80077d8:	4619      	mov	r1, r3
 80077da:	f004 f987 	bl	800baec <cos>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	f7f8 fd2f 	bl	8000244 <__adddf3>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	f7f9 f9b7 	bl	8000b60 <__aeabi_d2f>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80077f8:	4a4e      	ldr	r2, [pc, #312]	; (8007934 <hitung_peq+0x308>)
 80077fa:	6013      	str	r3, [r2, #0]
		B2 = 1 - (alpha * Ax);
 80077fc:	4b48      	ldr	r3, [pc, #288]	; (8007920 <hitung_peq+0x2f4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a46      	ldr	r2, [pc, #280]	; (800791c <hitung_peq+0x2f0>)
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7f9 fb08 	bl	8000e1c <__aeabi_fmul>
 800780c:	4603      	mov	r3, r0
 800780e:	4619      	mov	r1, r3
 8007810:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007814:	f7f9 f9f8 	bl	8000c08 <__aeabi_fsub>
 8007818:	4603      	mov	r3, r0
 800781a:	461a      	mov	r2, r3
 800781c:	4b46      	ldr	r3, [pc, #280]	; (8007938 <hitung_peq+0x30c>)
 800781e:	601a      	str	r2, [r3, #0]
		B0 /= A0;
 8007820:	4b43      	ldr	r3, [pc, #268]	; (8007930 <hitung_peq+0x304>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a3f      	ldr	r2, [pc, #252]	; (8007924 <hitung_peq+0x2f8>)
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f7f9 fbaa 	bl	8000f84 <__aeabi_fdiv>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <hitung_peq+0x304>)
 8007836:	601a      	str	r2, [r3, #0]
		B1 /= A0;
 8007838:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <hitung_peq+0x308>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a39      	ldr	r2, [pc, #228]	; (8007924 <hitung_peq+0x2f8>)
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7f9 fb9e 	bl	8000f84 <__aeabi_fdiv>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	4b39      	ldr	r3, [pc, #228]	; (8007934 <hitung_peq+0x308>)
 800784e:	601a      	str	r2, [r3, #0]
		B2 /= A0;
 8007850:	4b39      	ldr	r3, [pc, #228]	; (8007938 <hitung_peq+0x30c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	; (8007924 <hitung_peq+0x2f8>)
 8007856:	6812      	ldr	r2, [r2, #0]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7f9 fb92 	bl	8000f84 <__aeabi_fdiv>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	4b34      	ldr	r3, [pc, #208]	; (8007938 <hitung_peq+0x30c>)
 8007866:	601a      	str	r2, [r3, #0]
		A1 /= -1*A0;
 8007868:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <hitung_peq+0x2fc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007870:	4a2c      	ldr	r2, [pc, #176]	; (8007924 <hitung_peq+0x2f8>)
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	4611      	mov	r1, r2
 8007876:	4618      	mov	r0, r3
 8007878:	f7f9 fb84 	bl	8000f84 <__aeabi_fdiv>
 800787c:	4603      	mov	r3, r0
 800787e:	461a      	mov	r2, r3
 8007880:	4b29      	ldr	r3, [pc, #164]	; (8007928 <hitung_peq+0x2fc>)
 8007882:	601a      	str	r2, [r3, #0]
		A2 /= -1*A0;
 8007884:	4b29      	ldr	r3, [pc, #164]	; (800792c <hitung_peq+0x300>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800788c:	4a25      	ldr	r2, [pc, #148]	; (8007924 <hitung_peq+0x2f8>)
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7f9 fb76 	bl	8000f84 <__aeabi_fdiv>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	4b23      	ldr	r3, [pc, #140]	; (800792c <hitung_peq+0x300>)
 800789e:	601a      	str	r2, [r3, #0]
		buffer[0] = ubah_ke_523(B0);
 80078a0:	4b23      	ldr	r3, [pc, #140]	; (8007930 <hitung_peq+0x304>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fd57 	bl	8007358 <ubah_ke_523>
 80078aa:	4602      	mov	r2, r0
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	601a      	str	r2, [r3, #0]
		buffer[1] = ubah_ke_523(B1);
 80078b0:	4b20      	ldr	r3, [pc, #128]	; (8007934 <hitung_peq+0x308>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	1d1c      	adds	r4, r3, #4
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7ff fd4d 	bl	8007358 <ubah_ke_523>
 80078be:	4603      	mov	r3, r0
 80078c0:	6023      	str	r3, [r4, #0]
		buffer[2] = ubah_ke_523(B2);
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <hitung_peq+0x30c>)
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	f103 0408 	add.w	r4, r3, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	f7ff fd43 	bl	8007358 <ubah_ke_523>
 80078d2:	4603      	mov	r3, r0
 80078d4:	6023      	str	r3, [r4, #0]
		buffer[3] = ubah_ke_523(A1);
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <hitung_peq+0x2fc>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	f103 040c 	add.w	r4, r3, #12
 80078e0:	4610      	mov	r0, r2
 80078e2:	f7ff fd39 	bl	8007358 <ubah_ke_523>
 80078e6:	4603      	mov	r3, r0
 80078e8:	6023      	str	r3, [r4, #0]
		buffer[4] = ubah_ke_523(A2);
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <hitung_peq+0x300>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f103 0410 	add.w	r4, r3, #16
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7ff fd2f 	bl	8007358 <ubah_ke_523>
 80078fa:	4603      	mov	r3, r0
 80078fc:	6023      	str	r3, [r4, #0]
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bdb0      	pop	{r4, r5, r7, pc}
 8007906:	bf00      	nop
 8007908:	20000010 	.word	0x20000010
 800790c:	473b8000 	.word	0x473b8000
 8007910:	20001960 	.word	0x20001960
 8007914:	42200000 	.word	0x42200000
 8007918:	40240000 	.word	0x40240000
 800791c:	20001958 	.word	0x20001958
 8007920:	20001968 	.word	0x20001968
 8007924:	20001950 	.word	0x20001950
 8007928:	2000196c 	.word	0x2000196c
 800792c:	2000195c 	.word	0x2000195c
 8007930:	2000194c 	.word	0x2000194c
 8007934:	20001964 	.word	0x20001964
 8007938:	20001954 	.word	0x20001954
 800793c:	00000000 	.word	0x00000000

08007940 <hitung_lpf>:

void hitung_lpf(int freq, uint8_t tipe, uint32_t *buffer)
{
 8007940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	460b      	mov	r3, r1
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	72fb      	strb	r3, [r7, #11]
	if(freq >= 19999)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8007956:	4293      	cmp	r3, r2
 8007958:	dd1d      	ble.n	8007996 <hitung_lpf+0x56>
	{
		buffer[0] = ubah_ke_523(1);
 800795a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800795e:	f7ff fcfb 	bl	8007358 <ubah_ke_523>
 8007962:	4602      	mov	r2, r0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
		buffer[1] = buffer[2] = buffer[3] = buffer[4] = ubah_ke_523(0);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f103 0410 	add.w	r4, r3, #16
 800796e:	f04f 0000 	mov.w	r0, #0
 8007972:	f7ff fcf1 	bl	8007358 <ubah_ke_523>
 8007976:	4603      	mov	r3, r0
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 020c 	add.w	r2, r3, #12
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3308      	adds	r3, #8
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	3204      	adds	r2, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6013      	str	r3, [r2, #0]
		buffer[1] = ubah_ke_523(B1);
		buffer[2] = ubah_ke_523(B2);
		buffer[3] = ubah_ke_523(A1);
		buffer[4] = ubah_ke_523(A2);
	}
}
 8007994:	e1a6      	b.n	8007ce4 <hitung_lpf+0x3a4>
		omega = (2*phi*freq)/48000;
 8007996:	4b5e      	ldr	r3, [pc, #376]	; (8007b10 <hitung_lpf+0x1d0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4619      	mov	r1, r3
 800799c:	4618      	mov	r0, r3
 800799e:	f7f9 f935 	bl	8000c0c <__addsf3>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461e      	mov	r6, r3
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7f9 f9e4 	bl	8000d74 <__aeabi_i2f>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4619      	mov	r1, r3
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7f9 fa33 	bl	8000e1c <__aeabi_fmul>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4956      	ldr	r1, [pc, #344]	; (8007b14 <hitung_lpf+0x1d4>)
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f9 fae2 	bl	8000f84 <__aeabi_fdiv>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	4b54      	ldr	r3, [pc, #336]	; (8007b18 <hitung_lpf+0x1d8>)
 80079c6:	601a      	str	r2, [r3, #0]
		switch(tipe)
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <hitung_lpf+0x96>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	f000 80b4 	beq.w	8007b3c <hitung_lpf+0x1fc>
 80079d4:	e14b      	b.n	8007c6e <hitung_lpf+0x32e>
				alpha = sin(omega)/(2*(1/pow(2,0.5)));
 80079d6:	4b50      	ldr	r3, [pc, #320]	; (8007b18 <hitung_lpf+0x1d8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7f8 fd90 	bl	8000500 <__aeabi_f2d>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4610      	mov	r0, r2
 80079e6:	4619      	mov	r1, r3
 80079e8:	f004 f8c2 	bl	800bb70 <sin>
 80079ec:	a346      	add	r3, pc, #280	; (adr r3, 8007b08 <hitung_lpf+0x1c8>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 ff07 	bl	8000804 <__aeabi_ddiv>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4610      	mov	r0, r2
 80079fc:	4619      	mov	r1, r3
 80079fe:	f7f9 f8af 	bl	8000b60 <__aeabi_d2f>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4a45      	ldr	r2, [pc, #276]	; (8007b1c <hitung_lpf+0x1dc>)
 8007a06:	6013      	str	r3, [r2, #0]
				A0 = 1 + alpha;
 8007a08:	4b44      	ldr	r3, [pc, #272]	; (8007b1c <hitung_lpf+0x1dc>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f9 f8fb 	bl	8000c0c <__addsf3>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b41      	ldr	r3, [pc, #260]	; (8007b20 <hitung_lpf+0x1e0>)
 8007a1c:	601a      	str	r2, [r3, #0]
				A1 = -1*(2*cos(omega))/A0;
 8007a1e:	4b3e      	ldr	r3, [pc, #248]	; (8007b18 <hitung_lpf+0x1d8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f8 fd6c 	bl	8000500 <__aeabi_f2d>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	f004 f85c 	bl	800baec <cos>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	f7f8 fc04 	bl	8000244 <__adddf3>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4690      	mov	r8, r2
 8007a42:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007a46:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <hitung_lpf+0x1e0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7f8 fd58 	bl	8000500 <__aeabi_f2d>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	f7f8 fed4 	bl	8000804 <__aeabi_ddiv>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4610      	mov	r0, r2
 8007a62:	4619      	mov	r1, r3
 8007a64:	f7f9 f87c 	bl	8000b60 <__aeabi_d2f>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <hitung_lpf+0x1e4>)
 8007a6c:	6013      	str	r3, [r2, #0]
				A2 = (1-alpha)/A0;
 8007a6e:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <hitung_lpf+0x1dc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4619      	mov	r1, r3
 8007a74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007a78:	f7f9 f8c6 	bl	8000c08 <__aeabi_fsub>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <hitung_lpf+0x1e0>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7f9 fa7c 	bl	8000f84 <__aeabi_fdiv>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <hitung_lpf+0x1e8>)
 8007a92:	601a      	str	r2, [r3, #0]
				B1 = (1-cos(omega))/A0;
 8007a94:	4b20      	ldr	r3, [pc, #128]	; (8007b18 <hitung_lpf+0x1d8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7f8 fd31 	bl	8000500 <__aeabi_f2d>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f004 f821 	bl	800baec <cos>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	f04f 0000 	mov.w	r0, #0
 8007ab2:	491e      	ldr	r1, [pc, #120]	; (8007b2c <hitung_lpf+0x1ec>)
 8007ab4:	f7f8 fbc4 	bl	8000240 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	461d      	mov	r5, r3
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <hitung_lpf+0x1e0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7f8 fd1b 	bl	8000500 <__aeabi_f2d>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 fe97 	bl	8000804 <__aeabi_ddiv>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	f7f9 f83f 	bl	8000b60 <__aeabi_d2f>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <hitung_lpf+0x1f0>)
 8007ae6:	6013      	str	r3, [r2, #0]
				B0 = B1/2;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <hitung_lpf+0x1f0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7f9 fa47 	bl	8000f84 <__aeabi_fdiv>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <hitung_lpf+0x1f4>)
 8007afc:	601a      	str	r2, [r3, #0]
				B2 = B0;
 8007afe:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <hitung_lpf+0x1f4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a0d      	ldr	r2, [pc, #52]	; (8007b38 <hitung_lpf+0x1f8>)
 8007b04:	6013      	str	r3, [r2, #0]
			break;
 8007b06:	e0b2      	b.n	8007c6e <hitung_lpf+0x32e>
 8007b08:	667f3bcc 	.word	0x667f3bcc
 8007b0c:	3ff6a09e 	.word	0x3ff6a09e
 8007b10:	20000010 	.word	0x20000010
 8007b14:	473b8000 	.word	0x473b8000
 8007b18:	20001960 	.word	0x20001960
 8007b1c:	20001968 	.word	0x20001968
 8007b20:	20001950 	.word	0x20001950
 8007b24:	2000196c 	.word	0x2000196c
 8007b28:	2000195c 	.word	0x2000195c
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	20001964 	.word	0x20001964
 8007b34:	2000194c 	.word	0x2000194c
 8007b38:	20001954 	.word	0x20001954
				alpha = sin(omega)/(2*(1/pow(3,0.5)));
 8007b3c:	4b6e      	ldr	r3, [pc, #440]	; (8007cf8 <hitung_lpf+0x3b8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f8 fcdd 	bl	8000500 <__aeabi_f2d>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f004 f80f 	bl	800bb70 <sin>
 8007b52:	a367      	add	r3, pc, #412	; (adr r3, 8007cf0 <hitung_lpf+0x3b0>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fe54 	bl	8000804 <__aeabi_ddiv>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4610      	mov	r0, r2
 8007b62:	4619      	mov	r1, r3
 8007b64:	f7f8 fffc 	bl	8000b60 <__aeabi_d2f>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4a64      	ldr	r2, [pc, #400]	; (8007cfc <hitung_lpf+0x3bc>)
 8007b6c:	6013      	str	r3, [r2, #0]
				A0 = 1 + alpha;
 8007b6e:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <hitung_lpf+0x3bc>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f9 f848 	bl	8000c0c <__addsf3>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4b5f      	ldr	r3, [pc, #380]	; (8007d00 <hitung_lpf+0x3c0>)
 8007b82:	601a      	str	r2, [r3, #0]
				A1 = -1*(2*cos(omega))/A0;
 8007b84:	4b5c      	ldr	r3, [pc, #368]	; (8007cf8 <hitung_lpf+0x3b8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7f8 fcb9 	bl	8000500 <__aeabi_f2d>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	f003 ffa9 	bl	800baec <cos>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	f7f8 fb51 	bl	8000244 <__adddf3>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007bac:	4b54      	ldr	r3, [pc, #336]	; (8007d00 <hitung_lpf+0x3c0>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7f8 fca5 	bl	8000500 <__aeabi_f2d>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4620      	mov	r0, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7f8 fe21 	bl	8000804 <__aeabi_ddiv>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f7f8 ffc9 	bl	8000b60 <__aeabi_d2f>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4a4c      	ldr	r2, [pc, #304]	; (8007d04 <hitung_lpf+0x3c4>)
 8007bd2:	6013      	str	r3, [r2, #0]
				A2 = (1-alpha)/A0;
 8007bd4:	4b49      	ldr	r3, [pc, #292]	; (8007cfc <hitung_lpf+0x3bc>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007bde:	f7f9 f813 	bl	8000c08 <__aeabi_fsub>
 8007be2:	4603      	mov	r3, r0
 8007be4:	461a      	mov	r2, r3
 8007be6:	4b46      	ldr	r3, [pc, #280]	; (8007d00 <hitung_lpf+0x3c0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f7f9 f9c9 	bl	8000f84 <__aeabi_fdiv>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	4b44      	ldr	r3, [pc, #272]	; (8007d08 <hitung_lpf+0x3c8>)
 8007bf8:	601a      	str	r2, [r3, #0]
				B1 = (1-cos(omega))/A0;
 8007bfa:	4b3f      	ldr	r3, [pc, #252]	; (8007cf8 <hitung_lpf+0x3b8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7f8 fc7e 	bl	8000500 <__aeabi_f2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f003 ff6e 	bl	800baec <cos>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	493c      	ldr	r1, [pc, #240]	; (8007d0c <hitung_lpf+0x3cc>)
 8007c1a:	f7f8 fb11 	bl	8000240 <__aeabi_dsub>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4614      	mov	r4, r2
 8007c24:	461d      	mov	r5, r3
 8007c26:	4b36      	ldr	r3, [pc, #216]	; (8007d00 <hitung_lpf+0x3c0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7f8 fc68 	bl	8000500 <__aeabi_f2d>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fde4 	bl	8000804 <__aeabi_ddiv>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4610      	mov	r0, r2
 8007c42:	4619      	mov	r1, r3
 8007c44:	f7f8 ff8c 	bl	8000b60 <__aeabi_d2f>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	4a31      	ldr	r2, [pc, #196]	; (8007d10 <hitung_lpf+0x3d0>)
 8007c4c:	6013      	str	r3, [r2, #0]
				B0 = B1/2;
 8007c4e:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <hitung_lpf+0x3d0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7f9 f994 	bl	8000f84 <__aeabi_fdiv>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <hitung_lpf+0x3d4>)
 8007c62:	601a      	str	r2, [r3, #0]
				B2 = B0;
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <hitung_lpf+0x3d4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a2b      	ldr	r2, [pc, #172]	; (8007d18 <hitung_lpf+0x3d8>)
 8007c6a:	6013      	str	r3, [r2, #0]
			break;
 8007c6c:	bf00      	nop
		A1 *= -1;
 8007c6e:	4b25      	ldr	r3, [pc, #148]	; (8007d04 <hitung_lpf+0x3c4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c76:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <hitung_lpf+0x3c4>)
 8007c78:	6013      	str	r3, [r2, #0]
		A2 *= -1;
 8007c7a:	4b23      	ldr	r3, [pc, #140]	; (8007d08 <hitung_lpf+0x3c8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007c82:	4a21      	ldr	r2, [pc, #132]	; (8007d08 <hitung_lpf+0x3c8>)
 8007c84:	6013      	str	r3, [r2, #0]
		buffer[0] = ubah_ke_523(B0);
 8007c86:	4b23      	ldr	r3, [pc, #140]	; (8007d14 <hitung_lpf+0x3d4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fb64 	bl	8007358 <ubah_ke_523>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
		buffer[1] = ubah_ke_523(B1);
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <hitung_lpf+0x3d0>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	1d1c      	adds	r4, r3, #4
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f7ff fb5a 	bl	8007358 <ubah_ke_523>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	6023      	str	r3, [r4, #0]
		buffer[2] = ubah_ke_523(B2);
 8007ca8:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <hitung_lpf+0x3d8>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 0408 	add.w	r4, r3, #8
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f7ff fb50 	bl	8007358 <ubah_ke_523>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	6023      	str	r3, [r4, #0]
		buffer[3] = ubah_ke_523(A1);
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <hitung_lpf+0x3c4>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f103 040c 	add.w	r4, r3, #12
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7ff fb46 	bl	8007358 <ubah_ke_523>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	6023      	str	r3, [r4, #0]
		buffer[4] = ubah_ke_523(A2);
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <hitung_lpf+0x3c8>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f103 0410 	add.w	r4, r3, #16
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7ff fb3c 	bl	8007358 <ubah_ke_523>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	6023      	str	r3, [r4, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cee:	bf00      	nop
 8007cf0:	4590331d 	.word	0x4590331d
 8007cf4:	3ff279a7 	.word	0x3ff279a7
 8007cf8:	20001960 	.word	0x20001960
 8007cfc:	20001968 	.word	0x20001968
 8007d00:	20001950 	.word	0x20001950
 8007d04:	2000196c 	.word	0x2000196c
 8007d08:	2000195c 	.word	0x2000195c
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	20001964 	.word	0x20001964
 8007d14:	2000194c 	.word	0x2000194c
 8007d18:	20001954 	.word	0x20001954
 8007d1c:	00000000 	.word	0x00000000

08007d20 <hitung_hpf>:

void hitung_hpf(int freq, uint8_t tipe, uint32_t *buffer)
{
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6178      	str	r0, [r7, #20]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	60fa      	str	r2, [r7, #12]
 8007d2e:	74fb      	strb	r3, [r7, #19]
	if(freq <= 21)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b15      	cmp	r3, #21
 8007d34:	dc1d      	bgt.n	8007d72 <hitung_hpf+0x52>
	{
		buffer[0] = ubah_ke_523(1);
 8007d36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d3a:	f7ff fb0d 	bl	8007358 <ubah_ke_523>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	601a      	str	r2, [r3, #0]
		buffer[1] = buffer[2] = buffer[3] = buffer[4] = ubah_ke_523(0);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f103 0410 	add.w	r4, r3, #16
 8007d4a:	f04f 0000 	mov.w	r0, #0
 8007d4e:	f7ff fb03 	bl	8007358 <ubah_ke_523>
 8007d52:	4603      	mov	r3, r0
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f103 020c 	add.w	r2, r3, #12
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3308      	adds	r3, #8
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	3204      	adds	r2, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6013      	str	r3, [r2, #0]
		buffer[1] = ubah_ke_523(B1);
		buffer[2] = ubah_ke_523(B2);
		buffer[3] = ubah_ke_523(A1);
		buffer[4] = ubah_ke_523(A2);
	}
}
 8007d70:	e1a9      	b.n	80080c6 <hitung_hpf+0x3a6>
		omega = (2*phi*freq)/48000; 
 8007d72:	4b5f      	ldr	r3, [pc, #380]	; (8007ef0 <hitung_hpf+0x1d0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4619      	mov	r1, r3
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7f8 ff47 	bl	8000c0c <__addsf3>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461e      	mov	r6, r3
 8007d82:	6978      	ldr	r0, [r7, #20]
 8007d84:	f7f8 fff6 	bl	8000d74 <__aeabi_i2f>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7f9 f845 	bl	8000e1c <__aeabi_fmul>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4957      	ldr	r1, [pc, #348]	; (8007ef4 <hitung_hpf+0x1d4>)
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7f9 f8f4 	bl	8000f84 <__aeabi_fdiv>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <hitung_hpf+0x1d8>)
 8007da2:	601a      	str	r2, [r3, #0]
		switch(tipe)
 8007da4:	7cfb      	ldrb	r3, [r7, #19]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <hitung_hpf+0x92>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	f000 80b6 	beq.w	8007f1c <hitung_hpf+0x1fc>
 8007db0:	e14e      	b.n	8008050 <hitung_hpf+0x330>
				alpha = sin(omega)/(2*(1/pow(2,0.5)));
 8007db2:	4b51      	ldr	r3, [pc, #324]	; (8007ef8 <hitung_hpf+0x1d8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7f8 fba2 	bl	8000500 <__aeabi_f2d>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f003 fed4 	bl	800bb70 <sin>
 8007dc8:	a347      	add	r3, pc, #284	; (adr r3, 8007ee8 <hitung_hpf+0x1c8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fd19 	bl	8000804 <__aeabi_ddiv>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f7f8 fec1 	bl	8000b60 <__aeabi_d2f>
 8007dde:	4603      	mov	r3, r0
 8007de0:	4a46      	ldr	r2, [pc, #280]	; (8007efc <hitung_hpf+0x1dc>)
 8007de2:	6013      	str	r3, [r2, #0]
				A0 = 1 + alpha;
 8007de4:	4b45      	ldr	r3, [pc, #276]	; (8007efc <hitung_hpf+0x1dc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 ff0d 	bl	8000c0c <__addsf3>
 8007df2:	4603      	mov	r3, r0
 8007df4:	461a      	mov	r2, r3
 8007df6:	4b42      	ldr	r3, [pc, #264]	; (8007f00 <hitung_hpf+0x1e0>)
 8007df8:	601a      	str	r2, [r3, #0]
				A1 = -1*(2*cos(omega))/A0;
 8007dfa:	4b3f      	ldr	r3, [pc, #252]	; (8007ef8 <hitung_hpf+0x1d8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f8 fb7e 	bl	8000500 <__aeabi_f2d>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	f003 fe6e 	bl	800baec <cos>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	f7f8 fa16 	bl	8000244 <__adddf3>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	603a      	str	r2, [r7, #0]
 8007e1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <hitung_hpf+0x1e0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7f8 fb69 	bl	8000500 <__aeabi_f2d>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e36:	f7f8 fce5 	bl	8000804 <__aeabi_ddiv>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4619      	mov	r1, r3
 8007e42:	f7f8 fe8d 	bl	8000b60 <__aeabi_d2f>
 8007e46:	4603      	mov	r3, r0
 8007e48:	4a2e      	ldr	r2, [pc, #184]	; (8007f04 <hitung_hpf+0x1e4>)
 8007e4a:	6013      	str	r3, [r2, #0]
				A2 = (1-alpha)/A0;
 8007e4c:	4b2b      	ldr	r3, [pc, #172]	; (8007efc <hitung_hpf+0x1dc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e56:	f7f8 fed7 	bl	8000c08 <__aeabi_fsub>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <hitung_hpf+0x1e0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7f9 f88d 	bl	8000f84 <__aeabi_fdiv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <hitung_hpf+0x1e8>)
 8007e70:	601a      	str	r2, [r3, #0]
				B1 = -1*(1+cos(omega))/A0;
 8007e72:	4b21      	ldr	r3, [pc, #132]	; (8007ef8 <hitung_hpf+0x1d8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7f8 fb42 	bl	8000500 <__aeabi_f2d>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	f003 fe32 	bl	800baec <cos>
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <hitung_hpf+0x1ec>)
 8007e8e:	f7f8 f9d9 	bl	8000244 <__adddf3>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4692      	mov	sl, r2
 8007e98:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8007e9c:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <hitung_hpf+0x1e0>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7f8 fb2d 	bl	8000500 <__aeabi_f2d>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 fca9 	bl	8000804 <__aeabi_ddiv>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7f8 fe51 	bl	8000b60 <__aeabi_d2f>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <hitung_hpf+0x1f0>)
 8007ec2:	6013      	str	r3, [r2, #0]
				B0 = -1*B1/2;
 8007ec4:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <hitung_hpf+0x1f0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7f9 f857 	bl	8000f84 <__aeabi_fdiv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <hitung_hpf+0x1f4>)
 8007edc:	601a      	str	r2, [r3, #0]
				B2 = B0;
 8007ede:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <hitung_hpf+0x1f4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <hitung_hpf+0x1f8>)
 8007ee4:	6013      	str	r3, [r2, #0]
			break;
 8007ee6:	e0b3      	b.n	8008050 <hitung_hpf+0x330>
 8007ee8:	667f3bcc 	.word	0x667f3bcc
 8007eec:	3ff6a09e 	.word	0x3ff6a09e
 8007ef0:	20000010 	.word	0x20000010
 8007ef4:	473b8000 	.word	0x473b8000
 8007ef8:	20001960 	.word	0x20001960
 8007efc:	20001968 	.word	0x20001968
 8007f00:	20001950 	.word	0x20001950
 8007f04:	2000196c 	.word	0x2000196c
 8007f08:	2000195c 	.word	0x2000195c
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	20001964 	.word	0x20001964
 8007f14:	2000194c 	.word	0x2000194c
 8007f18:	20001954 	.word	0x20001954
				alpha = sin(omega)/(2*(1/pow(3,0.5)));
 8007f1c:	4b6e      	ldr	r3, [pc, #440]	; (80080d8 <hitung_hpf+0x3b8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7f8 faed 	bl	8000500 <__aeabi_f2d>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f003 fe1f 	bl	800bb70 <sin>
 8007f32:	a367      	add	r3, pc, #412	; (adr r3, 80080d0 <hitung_hpf+0x3b0>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fc64 	bl	8000804 <__aeabi_ddiv>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4610      	mov	r0, r2
 8007f42:	4619      	mov	r1, r3
 8007f44:	f7f8 fe0c 	bl	8000b60 <__aeabi_d2f>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4a64      	ldr	r2, [pc, #400]	; (80080dc <hitung_hpf+0x3bc>)
 8007f4c:	6013      	str	r3, [r2, #0]
				A0 = 1 + alpha;
 8007f4e:	4b63      	ldr	r3, [pc, #396]	; (80080dc <hitung_hpf+0x3bc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f8 fe58 	bl	8000c0c <__addsf3>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4b5f      	ldr	r3, [pc, #380]	; (80080e0 <hitung_hpf+0x3c0>)
 8007f62:	601a      	str	r2, [r3, #0]
				A1 = -1*(2*cos(omega))/A0;
 8007f64:	4b5c      	ldr	r3, [pc, #368]	; (80080d8 <hitung_hpf+0x3b8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f8 fac9 	bl	8000500 <__aeabi_f2d>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4610      	mov	r0, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	f003 fdb9 	bl	800baec <cos>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	f7f8 f961 	bl	8000244 <__adddf3>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4690      	mov	r8, r2
 8007f88:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8007f8c:	4b54      	ldr	r3, [pc, #336]	; (80080e0 <hitung_hpf+0x3c0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7f8 fab5 	bl	8000500 <__aeabi_f2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fc31 	bl	8000804 <__aeabi_ddiv>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f7f8 fdd9 	bl	8000b60 <__aeabi_d2f>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4a4c      	ldr	r2, [pc, #304]	; (80080e4 <hitung_hpf+0x3c4>)
 8007fb2:	6013      	str	r3, [r2, #0]
				A2 = (1-alpha)/A0;
 8007fb4:	4b49      	ldr	r3, [pc, #292]	; (80080dc <hitung_hpf+0x3bc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007fbe:	f7f8 fe23 	bl	8000c08 <__aeabi_fsub>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b46      	ldr	r3, [pc, #280]	; (80080e0 <hitung_hpf+0x3c0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7f8 ffd9 	bl	8000f84 <__aeabi_fdiv>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4b44      	ldr	r3, [pc, #272]	; (80080e8 <hitung_hpf+0x3c8>)
 8007fd8:	601a      	str	r2, [r3, #0]
				B1 = -1*(1+cos(omega))/A0;
 8007fda:	4b3f      	ldr	r3, [pc, #252]	; (80080d8 <hitung_hpf+0x3b8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 fa8e 	bl	8000500 <__aeabi_f2d>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	f003 fd7e 	bl	800baec <cos>
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	4b3d      	ldr	r3, [pc, #244]	; (80080ec <hitung_hpf+0x3cc>)
 8007ff6:	f7f8 f925 	bl	8000244 <__adddf3>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4614      	mov	r4, r2
 8008000:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008004:	4b36      	ldr	r3, [pc, #216]	; (80080e0 <hitung_hpf+0x3c0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7f8 fa79 	bl	8000500 <__aeabi_f2d>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fbf5 	bl	8000804 <__aeabi_ddiv>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	f7f8 fd9d 	bl	8000b60 <__aeabi_d2f>
 8008026:	4603      	mov	r3, r0
 8008028:	4a31      	ldr	r2, [pc, #196]	; (80080f0 <hitung_hpf+0x3d0>)
 800802a:	6013      	str	r3, [r2, #0]
				B0 = -1*B1/2;
 800802c:	4b30      	ldr	r3, [pc, #192]	; (80080f0 <hitung_hpf+0x3d0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008038:	4618      	mov	r0, r3
 800803a:	f7f8 ffa3 	bl	8000f84 <__aeabi_fdiv>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	4b2c      	ldr	r3, [pc, #176]	; (80080f4 <hitung_hpf+0x3d4>)
 8008044:	601a      	str	r2, [r3, #0]
				B2 = B0;
 8008046:	4b2b      	ldr	r3, [pc, #172]	; (80080f4 <hitung_hpf+0x3d4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <hitung_hpf+0x3d8>)
 800804c:	6013      	str	r3, [r2, #0]
			break;
 800804e:	bf00      	nop
		A1 *= -1;
 8008050:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <hitung_hpf+0x3c4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008058:	4a22      	ldr	r2, [pc, #136]	; (80080e4 <hitung_hpf+0x3c4>)
 800805a:	6013      	str	r3, [r2, #0]
		A2 *= -1;
 800805c:	4b22      	ldr	r3, [pc, #136]	; (80080e8 <hitung_hpf+0x3c8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008064:	4a20      	ldr	r2, [pc, #128]	; (80080e8 <hitung_hpf+0x3c8>)
 8008066:	6013      	str	r3, [r2, #0]
		buffer[0] = ubah_ke_523(B0);
 8008068:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <hitung_hpf+0x3d4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff f973 	bl	8007358 <ubah_ke_523>
 8008072:	4602      	mov	r2, r0
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]
		buffer[1] = ubah_ke_523(B1);
 8008078:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <hitung_hpf+0x3d0>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	1d1c      	adds	r4, r3, #4
 8008080:	4610      	mov	r0, r2
 8008082:	f7ff f969 	bl	8007358 <ubah_ke_523>
 8008086:	4603      	mov	r3, r0
 8008088:	6023      	str	r3, [r4, #0]
		buffer[2] = ubah_ke_523(B2);
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <hitung_hpf+0x3d8>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f103 0408 	add.w	r4, r3, #8
 8008094:	4610      	mov	r0, r2
 8008096:	f7ff f95f 	bl	8007358 <ubah_ke_523>
 800809a:	4603      	mov	r3, r0
 800809c:	6023      	str	r3, [r4, #0]
		buffer[3] = ubah_ke_523(A1);
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <hitung_hpf+0x3c4>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f103 040c 	add.w	r4, r3, #12
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7ff f955 	bl	8007358 <ubah_ke_523>
 80080ae:	4603      	mov	r3, r0
 80080b0:	6023      	str	r3, [r4, #0]
		buffer[4] = ubah_ke_523(A2);
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <hitung_hpf+0x3c8>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f103 0410 	add.w	r4, r3, #16
 80080bc:	4610      	mov	r0, r2
 80080be:	f7ff f94b 	bl	8007358 <ubah_ke_523>
 80080c2:	4603      	mov	r3, r0
 80080c4:	6023      	str	r3, [r4, #0]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	4590331d 	.word	0x4590331d
 80080d4:	3ff279a7 	.word	0x3ff279a7
 80080d8:	20001960 	.word	0x20001960
 80080dc:	20001968 	.word	0x20001968
 80080e0:	20001950 	.word	0x20001950
 80080e4:	2000196c 	.word	0x2000196c
 80080e8:	2000195c 	.word	0x2000195c
 80080ec:	3ff00000 	.word	0x3ff00000
 80080f0:	20001964 	.word	0x20001964
 80080f4:	2000194c 	.word	0x2000194c
 80080f8:	20001954 	.word	0x20001954

080080fc <dsp_spi>:

uint8_t buffer[3];
SPI_HandleTypeDef *dsp;

uint8_t dsp_spi(uint8_t data)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af02      	add	r7, sp, #8
 8008102:	4603      	mov	r3, r0
 8008104:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(dsp, &data, &ret, 1, 20);
 8008106:	4b07      	ldr	r3, [pc, #28]	; (8008124 <dsp_spi+0x28>)
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	f107 020f 	add.w	r2, r7, #15
 800810e:	1df9      	adds	r1, r7, #7
 8008110:	2314      	movs	r3, #20
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2301      	movs	r3, #1
 8008116:	f7fe fa9f 	bl	8006658 <HAL_SPI_TransmitReceive>
	return ret;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20001974 	.word	0x20001974

08008128 <dsp_begin>:

void dsp_begin(SPI_HandleTypeDef *SPI)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	dsp = SPI;
 8008130:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <dsp_begin+0x40>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6013      	str	r3, [r2, #0]

	for(uint8_t i=0; i<7; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
 800813a:	e00a      	b.n	8008152 <dsp_begin+0x2a>
	{
		HAL_GPIO_TogglePin(HCS_Port, HCS_Pin);
 800813c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008140:	480a      	ldr	r0, [pc, #40]	; (800816c <dsp_begin+0x44>)
 8008142:	f7fd f86c 	bl	800521e <HAL_GPIO_TogglePin>
		HAL_Delay(1);
 8008146:	2001      	movs	r0, #1
 8008148:	f7fc fd74 	bl	8004c34 <HAL_Delay>
	for(uint8_t i=0; i<7; i++)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	3301      	adds	r3, #1
 8008150:	73fb      	strb	r3, [r7, #15]
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b06      	cmp	r3, #6
 8008156:	d9f1      	bls.n	800813c <dsp_begin+0x14>
	}

	dsp_spi(0x00);
 8008158:	2000      	movs	r0, #0
 800815a:	f7ff ffcf 	bl	80080fc <dsp_spi>
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20001974 	.word	0x20001974
 800816c:	40010c00 	.word	0x40010c00

08008170 <dsp_load_data>:

void dsp_load_data(uint8_t device_address, uint32_t memory_address, uint8_t *pData, uint16_t length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	461a      	mov	r2, r3
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	4613      	mov	r3, r2
 8008182:	81bb      	strh	r3, [r7, #12]
	buffer[0] = (uint8_t)(device_address << 1) | 0x00;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	b2da      	uxtb	r2, r3
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <dsp_load_data+0x90>)
 800818c:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memory_address >> 8);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	b2da      	uxtb	r2, r3
 8008194:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <dsp_load_data+0x90>)
 8008196:	705a      	strb	r2, [r3, #1]
	buffer[2] = memory_address & 0xFF;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	4b18      	ldr	r3, [pc, #96]	; (8008200 <dsp_load_data+0x90>)
 800819e:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 80081a0:	2200      	movs	r2, #0
 80081a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081a6:	4817      	ldr	r0, [pc, #92]	; (8008204 <dsp_load_data+0x94>)
 80081a8:	f7fd f821 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	e008      	b.n	80081c4 <dsp_load_data+0x54>
	{
		dsp_spi(buffer[i]);
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	4a12      	ldr	r2, [pc, #72]	; (8008200 <dsp_load_data+0x90>)
 80081b6:	5cd3      	ldrb	r3, [r2, r3]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff ff9f 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	3301      	adds	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d9f3      	bls.n	80081b2 <dsp_load_data+0x42>
	}

	for(unsigned int i=0; i<length; i++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	e009      	b.n	80081e4 <dsp_load_data+0x74>
	{
		dsp_spi(pData[i]);
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	4413      	add	r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff ff8f 	bl	80080fc <dsp_spi>
	for(unsigned int i=0; i<length; i++)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3301      	adds	r3, #1
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	89bb      	ldrh	r3, [r7, #12]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3f1      	bcc.n	80081d0 <dsp_load_data+0x60>
	}

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 80081ec:	2201      	movs	r2, #1
 80081ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081f2:	4804      	ldr	r0, [pc, #16]	; (8008204 <dsp_load_data+0x94>)
 80081f4:	f7fc fffb 	bl	80051ee <HAL_GPIO_WritePin>
}
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20001970 	.word	0x20001970
 8008204:	40010c00 	.word	0x40010c00

08008208 <dsp_read_data>:

void dsp_read_data(uint8_t device_address, uint32_t memory_address, uint8_t *pData, uint16_t length)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	461a      	mov	r2, r3
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	4613      	mov	r3, r2
 800821a:	81bb      	strh	r3, [r7, #12]
	buffer[0] = (uint8_t)(device_address << 1)|0x01;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <dsp_read_data+0x98>)
 800822a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memory_address >> 8);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <dsp_read_data+0x98>)
 8008234:	705a      	strb	r2, [r3, #1]
	buffer[2] = memory_address & 0xFF;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <dsp_read_data+0x98>)
 800823c:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 800823e:	2200      	movs	r2, #0
 8008240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008244:	4817      	ldr	r0, [pc, #92]	; (80082a4 <dsp_read_data+0x9c>)
 8008246:	f7fc ffd2 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]
 800824e:	e008      	b.n	8008262 <dsp_read_data+0x5a>
	{
		dsp_spi(buffer[i]);
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	4a13      	ldr	r2, [pc, #76]	; (80082a0 <dsp_read_data+0x98>)
 8008254:	5cd3      	ldrb	r3, [r2, r3]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff ff50 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	3301      	adds	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
 8008262:	7dfb      	ldrb	r3, [r7, #23]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d9f3      	bls.n	8008250 <dsp_read_data+0x48>
	}

	for(unsigned int i=0; i<length; i++)
 8008268:	2300      	movs	r3, #0
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	e00a      	b.n	8008284 <dsp_read_data+0x7c>
	{
		pData[i] = dsp_spi(0x00);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	18d4      	adds	r4, r2, r3
 8008274:	2000      	movs	r0, #0
 8008276:	f7ff ff41 	bl	80080fc <dsp_spi>
 800827a:	4603      	mov	r3, r0
 800827c:	7023      	strb	r3, [r4, #0]
	for(unsigned int i=0; i<length; i++)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	3301      	adds	r3, #1
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	89bb      	ldrh	r3, [r7, #12]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	d3f0      	bcc.n	800826e <dsp_read_data+0x66>
	}

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 800828c:	2201      	movs	r2, #1
 800828e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008292:	4804      	ldr	r0, [pc, #16]	; (80082a4 <dsp_read_data+0x9c>)
 8008294:	f7fc ffab 	bl	80051ee <HAL_GPIO_WritePin>
}
 8008298:	bf00      	nop
 800829a:	371c      	adds	r7, #28
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}
 80082a0:	20001970 	.word	0x20001970
 80082a4:	40010c00 	.word	0x40010c00

080082a8 <dsp_mute>:

void dsp_mute(uint8_t device_address)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
	buffer[0] = (uint8_t)(device_address << 1)|0x00;
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <dsp_mute+0x6c>)
 80082ba:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(core_register >> 8);
 80082bc:	4b15      	ldr	r3, [pc, #84]	; (8008314 <dsp_mute+0x6c>)
 80082be:	2208      	movs	r2, #8
 80082c0:	705a      	strb	r2, [r3, #1]
	buffer[2] = core_register & 0xFF;
 80082c2:	4b14      	ldr	r3, [pc, #80]	; (8008314 <dsp_mute+0x6c>)
 80082c4:	221c      	movs	r2, #28
 80082c6:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 80082c8:	2200      	movs	r2, #0
 80082ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082ce:	4812      	ldr	r0, [pc, #72]	; (8008318 <dsp_mute+0x70>)
 80082d0:	f7fc ff8d 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e008      	b.n	80082ec <dsp_mute+0x44>
	{
		dsp_spi(buffer[i]);
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	4a0d      	ldr	r2, [pc, #52]	; (8008314 <dsp_mute+0x6c>)
 80082de:	5cd3      	ldrb	r3, [r2, r3]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff ff0b 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	3301      	adds	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d9f3      	bls.n	80082da <dsp_mute+0x32>
	}

	dsp_spi(0x00);
 80082f2:	2000      	movs	r0, #0
 80082f4:	f7ff ff02 	bl	80080fc <dsp_spi>
	dsp_spi(0x18);
 80082f8:	2018      	movs	r0, #24
 80082fa:	f7ff feff 	bl	80080fc <dsp_spi>

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 80082fe:	2201      	movs	r2, #1
 8008300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008304:	4804      	ldr	r0, [pc, #16]	; (8008318 <dsp_mute+0x70>)
 8008306:	f7fc ff72 	bl	80051ee <HAL_GPIO_WritePin>
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001970 	.word	0x20001970
 8008318:	40010c00 	.word	0x40010c00

0800831c <dsp_unmute>:

void dsp_unmute(uint8_t device_address)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	71fb      	strb	r3, [r7, #7]
	buffer[0] = (uint8_t)(device_address << 1)|0x00;
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	b2da      	uxtb	r2, r3
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <dsp_unmute+0x6c>)
 800832e:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(core_register >> 8);
 8008330:	4b15      	ldr	r3, [pc, #84]	; (8008388 <dsp_unmute+0x6c>)
 8008332:	2208      	movs	r2, #8
 8008334:	705a      	strb	r2, [r3, #1]
	buffer[2] = core_register & 0xFF;
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <dsp_unmute+0x6c>)
 8008338:	221c      	movs	r2, #28
 800833a:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 800833c:	2200      	movs	r2, #0
 800833e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008342:	4812      	ldr	r0, [pc, #72]	; (800838c <dsp_unmute+0x70>)
 8008344:	f7fc ff53 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e008      	b.n	8008360 <dsp_unmute+0x44>
	{
		dsp_spi(buffer[i]);
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	4a0d      	ldr	r2, [pc, #52]	; (8008388 <dsp_unmute+0x6c>)
 8008352:	5cd3      	ldrb	r3, [r2, r3]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fed1 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	3301      	adds	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d9f3      	bls.n	800834e <dsp_unmute+0x32>
	}

	dsp_spi(0x00);
 8008366:	2000      	movs	r0, #0
 8008368:	f7ff fec8 	bl	80080fc <dsp_spi>
	dsp_spi(0x1C);
 800836c:	201c      	movs	r0, #28
 800836e:	f7ff fec5 	bl	80080fc <dsp_spi>

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 8008372:	2201      	movs	r2, #1
 8008374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008378:	4804      	ldr	r0, [pc, #16]	; (800838c <dsp_unmute+0x70>)
 800837a:	f7fc ff38 	bl	80051ee <HAL_GPIO_WritePin>
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001970 	.word	0x20001970
 800838c:	40010c00 	.word	0x40010c00

08008390 <dsp_load_address>:

void dsp_load_address(uint8_t device_address, uint16_t location, uint16_t value)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
 800839a:	460b      	mov	r3, r1
 800839c:	80bb      	strh	r3, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	807b      	strh	r3, [r7, #2]
	buffer[0] = (uint8_t)(device_address << 1)|0x00;
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <dsp_load_address+0x88>)
 80083aa:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(location >> 8);
 80083ac:	88bb      	ldrh	r3, [r7, #4]
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	4b18      	ldr	r3, [pc, #96]	; (8008418 <dsp_load_address+0x88>)
 80083b6:	705a      	strb	r2, [r3, #1]
	buffer[2] = location & 0xFF;
 80083b8:	88bb      	ldrh	r3, [r7, #4]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	4b16      	ldr	r3, [pc, #88]	; (8008418 <dsp_load_address+0x88>)
 80083be:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 80083c0:	2200      	movs	r2, #0
 80083c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083c6:	4815      	ldr	r0, [pc, #84]	; (800841c <dsp_load_address+0x8c>)
 80083c8:	f7fc ff11 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e008      	b.n	80083e4 <dsp_load_address+0x54>
	{
		dsp_spi(buffer[i]);
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	4a10      	ldr	r2, [pc, #64]	; (8008418 <dsp_load_address+0x88>)
 80083d6:	5cd3      	ldrb	r3, [r2, r3]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fe8f 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	3301      	adds	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d9f3      	bls.n	80083d2 <dsp_load_address+0x42>
	}

	dsp_spi((uint8_t)(value >> 8));
 80083ea:	887b      	ldrh	r3, [r7, #2]
 80083ec:	0a1b      	lsrs	r3, r3, #8
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff fe82 	bl	80080fc <dsp_spi>
	dsp_spi((uint8_t)(value & 0xFF));
 80083f8:	887b      	ldrh	r3, [r7, #2]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff fe7d 	bl	80080fc <dsp_spi>

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 8008402:	2201      	movs	r2, #1
 8008404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008408:	4804      	ldr	r0, [pc, #16]	; (800841c <dsp_load_address+0x8c>)
 800840a:	f7fc fef0 	bl	80051ee <HAL_GPIO_WritePin>
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20001970 	.word	0x20001970
 800841c:	40010c00 	.word	0x40010c00

08008420 <dsp_load_parameter>:

void dsp_load_parameter(uint8_t device_address, uint16_t location, uint32_t value)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	603a      	str	r2, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
 800842c:	460b      	mov	r3, r1
 800842e:	80bb      	strh	r3, [r7, #4]
	buffer[0] = (uint8_t)(device_address << 1)|0x00;
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <dsp_load_parameter+0x98>)
 8008438:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(location >> 8);
 800843a:	88bb      	ldrh	r3, [r7, #4]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	b29b      	uxth	r3, r3
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <dsp_load_parameter+0x98>)
 8008444:	705a      	strb	r2, [r3, #1]
	buffer[2] = location & 0xFF;
 8008446:	88bb      	ldrh	r3, [r7, #4]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <dsp_load_parameter+0x98>)
 800844c:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 800844e:	2200      	movs	r2, #0
 8008450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008454:	4819      	ldr	r0, [pc, #100]	; (80084bc <dsp_load_parameter+0x9c>)
 8008456:	f7fc feca 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e008      	b.n	8008472 <dsp_load_parameter+0x52>
	{
		dsp_spi(buffer[i]);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <dsp_load_parameter+0x98>)
 8008464:	5cd3      	ldrb	r3, [r2, r3]
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fe48 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	3301      	adds	r3, #1
 8008470:	73fb      	strb	r3, [r7, #15]
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d9f3      	bls.n	8008460 <dsp_load_parameter+0x40>
	}

	dsp_spi(0x00);
 8008478:	2000      	movs	r0, #0
 800847a:	f7ff fe3f 	bl	80080fc <dsp_spi>

	for(uint8_t i=4; i>0; i--)
 800847e:	2304      	movs	r3, #4
 8008480:	73bb      	strb	r3, [r7, #14]
 8008482:	e00c      	b.n	800849e <dsp_load_parameter+0x7e>
	{
		dsp_spi((uint8_t)(value >> (8*(i-1))));
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	3b01      	subs	r3, #1
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fe32 	bl	80080fc <dsp_spi>
	for(uint8_t i=4; i>0; i--)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	3b01      	subs	r3, #1
 800849c:	73bb      	strb	r3, [r7, #14]
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1ef      	bne.n	8008484 <dsp_load_parameter+0x64>
	}

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 80084a4:	2201      	movs	r2, #1
 80084a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084aa:	4804      	ldr	r0, [pc, #16]	; (80084bc <dsp_load_parameter+0x9c>)
 80084ac:	f7fc fe9f 	bl	80051ee <HAL_GPIO_WritePin>
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20001970 	.word	0x20001970
 80084bc:	40010c00 	.word	0x40010c00

080084c0 <dsp_safe_flag>:

void dsp_safe_flag(uint8_t device_address)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
	buffer[0] = (uint8_t)(device_address << 1)|0x00;
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	4b16      	ldr	r3, [pc, #88]	; (800852c <dsp_safe_flag+0x6c>)
 80084d2:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(core_register >> 8);
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <dsp_safe_flag+0x6c>)
 80084d6:	2208      	movs	r2, #8
 80084d8:	705a      	strb	r2, [r3, #1]
	buffer[2] = core_register & 0xFF;
 80084da:	4b14      	ldr	r3, [pc, #80]	; (800852c <dsp_safe_flag+0x6c>)
 80084dc:	221c      	movs	r2, #28
 80084de:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_RESET);
 80084e0:	2200      	movs	r2, #0
 80084e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084e6:	4812      	ldr	r0, [pc, #72]	; (8008530 <dsp_safe_flag+0x70>)
 80084e8:	f7fc fe81 	bl	80051ee <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<3; i++)
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
 80084f0:	e008      	b.n	8008504 <dsp_safe_flag+0x44>
	{
		dsp_spi(buffer[i]);
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	4a0d      	ldr	r2, [pc, #52]	; (800852c <dsp_safe_flag+0x6c>)
 80084f6:	5cd3      	ldrb	r3, [r2, r3]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fdff 	bl	80080fc <dsp_spi>
	for(uint8_t i=0; i<3; i++)
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	3301      	adds	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d9f3      	bls.n	80084f2 <dsp_safe_flag+0x32>
	}

	dsp_spi(0x00);
 800850a:	2000      	movs	r0, #0
 800850c:	f7ff fdf6 	bl	80080fc <dsp_spi>
	dsp_spi(0x3C);
 8008510:	203c      	movs	r0, #60	; 0x3c
 8008512:	f7ff fdf3 	bl	80080fc <dsp_spi>

	HAL_GPIO_WritePin(HCS_Port, HCS_Pin, GPIO_PIN_SET);
 8008516:	2201      	movs	r2, #1
 8008518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800851c:	4804      	ldr	r0, [pc, #16]	; (8008530 <dsp_safe_flag+0x70>)
 800851e:	f7fc fe66 	bl	80051ee <HAL_GPIO_WritePin>
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20001970 	.word	0x20001970
 8008530:	40010c00 	.word	0x40010c00

08008534 <dsp_check_connection>:

HAL_StatusTypeDef dsp_check_connection(uint8_t device_address)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0,0};
 800853e:	2300      	movs	r3, #0
 8008540:	81bb      	strh	r3, [r7, #12]

	dsp_mute(0);
 8008542:	2000      	movs	r0, #0
 8008544:	f7ff feb0 	bl	80082a8 <dsp_mute>
	dsp_read_data(0, 0x081C, data, 2);
 8008548:	f107 020c 	add.w	r2, r7, #12
 800854c:	2302      	movs	r3, #2
 800854e:	f640 011c 	movw	r1, #2076	; 0x81c
 8008552:	2000      	movs	r0, #0
 8008554:	f7ff fe58 	bl	8008208 <dsp_read_data>

	if(data[0] != 0x00 || data[1] != 0x18)
 8008558:	7b3b      	ldrb	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <dsp_check_connection+0x30>
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2b18      	cmp	r3, #24
 8008562:	d001      	beq.n	8008568 <dsp_check_connection+0x34>
	{
		return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <dsp_check_connection+0x36>
	}

	return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <flash_begin>:
#define flash_dummy 0xA5

SPI_HandleTypeDef *external_flash;

void flash_begin(SPI_HandleTypeDef *SPI)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	external_flash = SPI;
 800857c:	4a03      	ldr	r2, [pc, #12]	; (800858c <flash_begin+0x18>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6013      	str	r3, [r2, #0]
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr
 800858c:	20001978 	.word	0x20001978

08008590 <flash_spi>:

uint8_t flash_spi(uint8_t data)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af02      	add	r7, sp, #8
 8008596:	4603      	mov	r3, r0
 8008598:	71fb      	strb	r3, [r7, #7]
	uint8_t data_return;
	HAL_SPI_TransmitReceive(external_flash, &data, &data_return, 1, 100);
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <flash_spi+0x28>)
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f107 020f 	add.w	r2, r7, #15
 80085a2:	1df9      	adds	r1, r7, #7
 80085a4:	2364      	movs	r3, #100	; 0x64
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2301      	movs	r3, #1
 80085aa:	f7fe f855 	bl	8006658 <HAL_SPI_TransmitReceive>

	return data_return;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20001978 	.word	0x20001978

080085bc <flash_write_enable>:

void flash_write_enable(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 80085c0:	2200      	movs	r2, #0
 80085c2:	2110      	movs	r1, #16
 80085c4:	4807      	ldr	r0, [pc, #28]	; (80085e4 <flash_write_enable+0x28>)
 80085c6:	f7fc fe12 	bl	80051ee <HAL_GPIO_WritePin>
	flash_spi(0x06);
 80085ca:	2006      	movs	r0, #6
 80085cc:	f7ff ffe0 	bl	8008590 <flash_spi>
	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 80085d0:	2201      	movs	r2, #1
 80085d2:	2110      	movs	r1, #16
 80085d4:	4803      	ldr	r0, [pc, #12]	; (80085e4 <flash_write_enable+0x28>)
 80085d6:	f7fc fe0a 	bl	80051ee <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80085da:	2002      	movs	r0, #2
 80085dc:	f7fc fb2a 	bl	8004c34 <HAL_Delay>
}
 80085e0:	bf00      	nop
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40010800 	.word	0x40010800

080085e8 <flash_wait_end>:
	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
	HAL_Delay(2);
}

void flash_wait_end(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
	HAL_Delay(2);
 80085ee:	2002      	movs	r0, #2
 80085f0:	f7fc fb20 	bl	8004c34 <HAL_Delay>

	uint8_t status_register;

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 80085f4:	2200      	movs	r2, #0
 80085f6:	2110      	movs	r1, #16
 80085f8:	480d      	ldr	r0, [pc, #52]	; (8008630 <flash_wait_end+0x48>)
 80085fa:	f7fc fdf8 	bl	80051ee <HAL_GPIO_WritePin>
	flash_spi(0x05);
 80085fe:	2005      	movs	r0, #5
 8008600:	f7ff ffc6 	bl	8008590 <flash_spi>

	do
	{
		status_register = flash_spi(flash_dummy);
 8008604:	20a5      	movs	r0, #165	; 0xa5
 8008606:	f7ff ffc3 	bl	8008590 <flash_spi>
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1);
 800860e:	2001      	movs	r0, #1
 8008610:	f7fc fb10 	bl	8004c34 <HAL_Delay>
	}
	while((status_register & 0x01) == 0x01);
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f2      	bne.n	8008604 <flash_wait_end+0x1c>

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 800861e:	2201      	movs	r2, #1
 8008620:	2110      	movs	r1, #16
 8008622:	4803      	ldr	r0, [pc, #12]	; (8008630 <flash_wait_end+0x48>)
 8008624:	f7fc fde3 	bl	80051ee <HAL_GPIO_WritePin>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40010800 	.word	0x40010800

08008634 <flash_read_byte>:

uint8_t flash_read_byte(uint32_t address)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
	uint8_t returned_byte = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 8008640:	2200      	movs	r2, #0
 8008642:	2110      	movs	r1, #16
 8008644:	4814      	ldr	r0, [pc, #80]	; (8008698 <flash_read_byte+0x64>)
 8008646:	f7fc fdd2 	bl	80051ee <HAL_GPIO_WritePin>

	flash_spi(0x0B);
 800864a:	200b      	movs	r0, #11
 800864c:	f7ff ffa0 	bl	8008590 <flash_spi>

	flash_spi((address & 0xFF0000) >> 16);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ff9a 	bl	8008590 <flash_spi>
	flash_spi((address & 0xFF00  ) >> 8 );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff ff94 	bl	8008590 <flash_spi>
	flash_spi((address & 0xFF    ) >> 0 );
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff ff8f 	bl	8008590 <flash_spi>

	flash_spi(0x00);
 8008672:	2000      	movs	r0, #0
 8008674:	f7ff ff8c 	bl	8008590 <flash_spi>

	returned_byte = flash_spi(flash_dummy);
 8008678:	20a5      	movs	r0, #165	; 0xa5
 800867a:	f7ff ff89 	bl	8008590 <flash_spi>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 8008682:	2201      	movs	r2, #1
 8008684:	2110      	movs	r1, #16
 8008686:	4804      	ldr	r0, [pc, #16]	; (8008698 <flash_read_byte+0x64>)
 8008688:	f7fc fdb1 	bl	80051ee <HAL_GPIO_WritePin>

	return returned_byte;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40010800 	.word	0x40010800

0800869c <flash_write_byte>:

void flash_write_byte(uint8_t Data, uint32_t address)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
	flash_wait_end();
 80086a8:	f7ff ff9e 	bl	80085e8 <flash_wait_end>
	flash_write_enable();
 80086ac:	f7ff ff86 	bl	80085bc <flash_write_enable>

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 80086b0:	2200      	movs	r2, #0
 80086b2:	2110      	movs	r1, #16
 80086b4:	4812      	ldr	r0, [pc, #72]	; (8008700 <flash_write_byte+0x64>)
 80086b6:	f7fc fd9a 	bl	80051ee <HAL_GPIO_WritePin>

	flash_spi(0x02);
 80086ba:	2002      	movs	r0, #2
 80086bc:	f7ff ff68 	bl	8008590 <flash_spi>

	flash_spi((address & 0xFF0000) >> 16);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff ff62 	bl	8008590 <flash_spi>
	flash_spi((address & 0xFF00  ) >> 8 );
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	0a1b      	lsrs	r3, r3, #8
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff ff5c 	bl	8008590 <flash_spi>
	flash_spi((address & 0xFF    ) >> 0 );
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff ff57 	bl	8008590 <flash_spi>

	flash_spi(Data);
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff ff53 	bl	8008590 <flash_spi>

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 80086ea:	2201      	movs	r2, #1
 80086ec:	2110      	movs	r1, #16
 80086ee:	4804      	ldr	r0, [pc, #16]	; (8008700 <flash_write_byte+0x64>)
 80086f0:	f7fc fd7d 	bl	80051ee <HAL_GPIO_WritePin>

	flash_wait_end();
 80086f4:	f7ff ff78 	bl	80085e8 <flash_wait_end>
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40010800 	.word	0x40010800

08008704 <flash_erase_block>:
	flash_wait_end();
}

/* 64KB block erase */
void flash_erase_block(uint32_t block_address)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	flash_wait_end();
 800870c:	f7ff ff6c 	bl	80085e8 <flash_wait_end>
	flash_write_enable();
 8008710:	f7ff ff54 	bl	80085bc <flash_write_enable>

	block_address *= 0x10000;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 800871a:	2200      	movs	r2, #0
 800871c:	2110      	movs	r1, #16
 800871e:	4811      	ldr	r0, [pc, #68]	; (8008764 <flash_erase_block+0x60>)
 8008720:	f7fc fd65 	bl	80051ee <HAL_GPIO_WritePin>

	flash_spi(0xD8);
 8008724:	20d8      	movs	r0, #216	; 0xd8
 8008726:	f7ff ff33 	bl	8008590 <flash_spi>

	flash_spi((block_address & 0xFF0000) >> 16);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	b2db      	uxtb	r3, r3
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff ff2d 	bl	8008590 <flash_spi>
	flash_spi((block_address & 0xFF00  ) >> 8 );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	b2db      	uxtb	r3, r3
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff ff27 	bl	8008590 <flash_spi>
	flash_spi((block_address & 0xFF    ) >> 0 );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff ff22 	bl	8008590 <flash_spi>

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 800874c:	2201      	movs	r2, #1
 800874e:	2110      	movs	r1, #16
 8008750:	4804      	ldr	r0, [pc, #16]	; (8008764 <flash_erase_block+0x60>)
 8008752:	f7fc fd4c 	bl	80051ee <HAL_GPIO_WritePin>

	flash_wait_end();
 8008756:	f7ff ff47 	bl	80085e8 <flash_wait_end>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	40010800 	.word	0x40010800

08008768 <flash_read_id>:

uint16_t flash_read_id(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
	uint8_t temp_0 = 0, temp_1 = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	71fb      	strb	r3, [r7, #7]
 8008772:	2300      	movs	r3, #0
 8008774:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_RESET);
 8008776:	2200      	movs	r2, #0
 8008778:	2110      	movs	r1, #16
 800877a:	4815      	ldr	r0, [pc, #84]	; (80087d0 <flash_read_id+0x68>)
 800877c:	f7fc fd37 	bl	80051ee <HAL_GPIO_WritePin>

	flash_spi(0x90);
 8008780:	2090      	movs	r0, #144	; 0x90
 8008782:	f7ff ff05 	bl	8008590 <flash_spi>
	flash_spi(0x00);
 8008786:	2000      	movs	r0, #0
 8008788:	f7ff ff02 	bl	8008590 <flash_spi>
	flash_spi(0x00);
 800878c:	2000      	movs	r0, #0
 800878e:	f7ff feff 	bl	8008590 <flash_spi>
	flash_spi(0x00);
 8008792:	2000      	movs	r0, #0
 8008794:	f7ff fefc 	bl	8008590 <flash_spi>

	temp_0 = flash_spi(flash_dummy);
 8008798:	20a5      	movs	r0, #165	; 0xa5
 800879a:	f7ff fef9 	bl	8008590 <flash_spi>
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
	temp_1 = flash_spi(flash_dummy);
 80087a2:	20a5      	movs	r0, #165	; 0xa5
 80087a4:	f7ff fef4 	bl	8008590 <flash_spi>
 80087a8:	4603      	mov	r3, r0
 80087aa:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(_CS_Port, _CS_Pin, GPIO_PIN_SET);
 80087ac:	2201      	movs	r2, #1
 80087ae:	2110      	movs	r1, #16
 80087b0:	4807      	ldr	r0, [pc, #28]	; (80087d0 <flash_read_id+0x68>)
 80087b2:	f7fc fd1c 	bl	80051ee <HAL_GPIO_WritePin>

	return (temp_0<<8) | temp_1;
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b21a      	sxth	r2, r3
 80087bc:	79bb      	ldrb	r3, [r7, #6]
 80087be:	b21b      	sxth	r3, r3
 80087c0:	4313      	orrs	r3, r2
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	b29b      	uxth	r3, r3
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	40010800 	.word	0x40010800

080087d4 <i2c_send>:
#include "stdio.h"

I2C_HandleTypeDef *lcd_i2c;

void i2c_send(uint8_t lcd_data)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af02      	add	r7, sp, #8
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = 0x27;
 80087de:	2327      	movs	r3, #39	; 0x27
 80087e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd_i2c, (addr<<1), &lcd_data, 1, 1);
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <i2c_send+0x30>)
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	005b      	lsls	r3, r3, #1
 80087ec:	b299      	uxth	r1, r3
 80087ee:	1dfa      	adds	r2, r7, #7
 80087f0:	2301      	movs	r3, #1
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	2301      	movs	r3, #1
 80087f6:	f7fc fe6f 	bl	80054d8 <HAL_I2C_Master_Transmit>
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	2000197c 	.word	0x2000197c

08008808 <clock>:

void clock(uint8_t lcd_data)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
	i2c_send(lcd_data|0x04);
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	f043 0304 	orr.w	r3, r3, #4
 8008818:	b2db      	uxtb	r3, r3
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ffda 	bl	80087d4 <i2c_send>
	i2c_send(lcd_data|0x00);
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff ffd6 	bl	80087d4 <i2c_send>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <lcd_command>:

void lcd_command(uint8_t cmd)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd & 0xf0;
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	f023 030f 	bic.w	r3, r3, #15
 8008840:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = (cmd << 4) & 0xf0;
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	73bb      	strb	r3, [r7, #14]

	i2c_send(upper_nibble | 0x08);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	f043 0308 	orr.w	r3, r3, #8
 800884e:	b2db      	uxtb	r3, r3
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff ffbf 	bl	80087d4 <i2c_send>
	clock   (upper_nibble | 0x08);
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	f043 0308 	orr.w	r3, r3, #8
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ffd2 	bl	8008808 <clock>

	i2c_send(lower_nibble | 0x08);
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	f043 0308 	orr.w	r3, r3, #8
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff ffb1 	bl	80087d4 <i2c_send>
	clock   (lower_nibble | 0x08);
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	b2db      	uxtb	r3, r3
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff ffc4 	bl	8008808 <clock>
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <lcd_data>:

void lcd_data(uint8_t lcd_data)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = lcd_data & 0xf0;
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f023 030f 	bic.w	r3, r3, #15
 8008898:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = (lcd_data << 4) & 0xf0;
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	73bb      	strb	r3, [r7, #14]

	i2c_send(upper_nibble | 0x09);
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	f043 0309 	orr.w	r3, r3, #9
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ff93 	bl	80087d4 <i2c_send>
	clock   (upper_nibble | 0x09);
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	f043 0309 	orr.w	r3, r3, #9
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff ffa6 	bl	8008808 <clock>

	i2c_send(lower_nibble | 0x09);
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	f043 0309 	orr.w	r3, r3, #9
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff ff85 	bl	80087d4 <i2c_send>
	clock   (lower_nibble | 0x09);
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	f043 0309 	orr.w	r3, r3, #9
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff ff98 	bl	8008808 <clock>
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <lcd_begin>:

void lcd_begin(I2C_HandleTypeDef *lcd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	lcd_i2c = lcd;
 80088e8:	4a26      	ldr	r2, [pc, #152]	; (8008984 <lcd_begin+0xa4>)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6013      	str	r3, [r2, #0]

	HAL_Delay(500);
 80088ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088f2:	f7fc f99f 	bl	8004c34 <HAL_Delay>

	i2c_send(0x08);	HAL_Delay(500);
 80088f6:	2008      	movs	r0, #8
 80088f8:	f7ff ff6c 	bl	80087d4 <i2c_send>
 80088fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008900:	f7fc f998 	bl	8004c34 <HAL_Delay>

	clock(0x30); HAL_Delay(5);
 8008904:	2030      	movs	r0, #48	; 0x30
 8008906:	f7ff ff7f 	bl	8008808 <clock>
 800890a:	2005      	movs	r0, #5
 800890c:	f7fc f992 	bl	8004c34 <HAL_Delay>
	clock(0x30); HAL_Delay(5);
 8008910:	2030      	movs	r0, #48	; 0x30
 8008912:	f7ff ff79 	bl	8008808 <clock>
 8008916:	2005      	movs	r0, #5
 8008918:	f7fc f98c 	bl	8004c34 <HAL_Delay>
	clock(0x30); HAL_Delay(5);
 800891c:	2030      	movs	r0, #48	; 0x30
 800891e:	f7ff ff73 	bl	8008808 <clock>
 8008922:	2005      	movs	r0, #5
 8008924:	f7fc f986 	bl	8004c34 <HAL_Delay>
	clock(0x20); HAL_Delay(5);
 8008928:	2020      	movs	r0, #32
 800892a:	f7ff ff6d 	bl	8008808 <clock>
 800892e:	2005      	movs	r0, #5
 8008930:	f7fc f980 	bl	8004c34 <HAL_Delay>

	lcd_command(0x28); HAL_Delay(5);
 8008934:	2028      	movs	r0, #40	; 0x28
 8008936:	f7ff ff7b 	bl	8008830 <lcd_command>
 800893a:	2005      	movs	r0, #5
 800893c:	f7fc f97a 	bl	8004c34 <HAL_Delay>
	lcd_command(0x0C); HAL_Delay(5);
 8008940:	200c      	movs	r0, #12
 8008942:	f7ff ff75 	bl	8008830 <lcd_command>
 8008946:	2005      	movs	r0, #5
 8008948:	f7fc f974 	bl	8004c34 <HAL_Delay>
	lcd_command(0x01); HAL_Delay(5);
 800894c:	2001      	movs	r0, #1
 800894e:	f7ff ff6f 	bl	8008830 <lcd_command>
 8008952:	2005      	movs	r0, #5
 8008954:	f7fc f96e 	bl	8004c34 <HAL_Delay>
	lcd_command(0x06); HAL_Delay(5);
 8008958:	2006      	movs	r0, #6
 800895a:	f7ff ff69 	bl	8008830 <lcd_command>
 800895e:	2005      	movs	r0, #5
 8008960:	f7fc f968 	bl	8004c34 <HAL_Delay>
	lcd_command(0x02); HAL_Delay(5);
 8008964:	2002      	movs	r0, #2
 8008966:	f7ff ff63 	bl	8008830 <lcd_command>
 800896a:	2005      	movs	r0, #5
 800896c:	f7fc f962 	bl	8004c34 <HAL_Delay>

	lcd_clear(); HAL_Delay(500);
 8008970:	f000 f8b8 	bl	8008ae4 <lcd_clear>
 8008974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008978:	f7fc f95c 	bl	8004c34 <HAL_Delay>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	2000197c 	.word	0x2000197c

08008988 <lcd_print>:

void lcd_print(char *str)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	for(int i = 0; str[i] != 0; i++)
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e009      	b.n	80089aa <lcd_print+0x22>
	{
		lcd_data(str[i]);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ff72 	bl	8008888 <lcd_data>
	for(int i = 0; str[i] != 0; i++)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1ef      	bne.n	8008996 <lcd_print+0xe>
	}
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t x, uint8_t y)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	460a      	mov	r2, r1
 80089ca:	71fb      	strb	r3, [r7, #7]
 80089cc:	4613      	mov	r3, r2
 80089ce:	71bb      	strb	r3, [r7, #6]
	if(y == 0) lcd_command(0x80 + x);
 80089d0:	79bb      	ldrb	r3, [r7, #6]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <lcd_set_cursor+0x22>
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	3b80      	subs	r3, #128	; 0x80
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff ff27 	bl	8008830 <lcd_command>
	if(y == 1) lcd_command(0xC0 + x);
 80089e2:	79bb      	ldrb	r3, [r7, #6]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d105      	bne.n	80089f4 <lcd_set_cursor+0x34>
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	3b40      	subs	r3, #64	; 0x40
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff ff1e 	bl	8008830 <lcd_command>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <lcd_int>:

void lcd_int(int angka)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	char buff[11];
	sprintf(buff, "%d", angka);
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4906      	ldr	r1, [pc, #24]	; (8008a24 <lcd_int+0x28>)
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fe33 	bl	8009678 <siprintf>
	lcd_print(buff);
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff ffb6 	bl	8008988 <lcd_print>
}
 8008a1c:	bf00      	nop
 8008a1e:	3718      	adds	r7, #24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	0800dc18 	.word	0x0800dc18

08008a28 <lcd_float>:

void lcd_float(float nilai, int koma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
	if(koma == 0)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d107      	bne.n	8008a48 <lcd_float+0x20>
	{
		lcd_int(nilai);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7f8 fbb5 	bl	80011a8 <__aeabi_f2iz>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff ffdb 	bl	80089fc <lcd_int>
			case 3 : sprintf(buff, "%.3f", nilai); break;
			case 4 : sprintf(buff, "%.4f", nilai); break;
		}
		lcd_print(buff);
	}
}
 8008a46:	e040      	b.n	8008aca <lcd_float+0xa2>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d837      	bhi.n	8008ac0 <lcd_float+0x98>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <lcd_float+0x30>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a7f 	.word	0x08008a7f
 8008a60:	08008a95 	.word	0x08008a95
 8008a64:	08008aab 	.word	0x08008aab
			case 1 : sprintf(buff, "%.1f", nilai); break;
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f7 fd49 	bl	8000500 <__aeabi_f2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	f107 000c 	add.w	r0, r7, #12
 8008a76:	4917      	ldr	r1, [pc, #92]	; (8008ad4 <lcd_float+0xac>)
 8008a78:	f000 fdfe 	bl	8009678 <siprintf>
 8008a7c:	e020      	b.n	8008ac0 <lcd_float+0x98>
			case 2 : sprintf(buff, "%.2f", nilai); break;
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f7 fd3e 	bl	8000500 <__aeabi_f2d>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	f107 000c 	add.w	r0, r7, #12
 8008a8c:	4912      	ldr	r1, [pc, #72]	; (8008ad8 <lcd_float+0xb0>)
 8008a8e:	f000 fdf3 	bl	8009678 <siprintf>
 8008a92:	e015      	b.n	8008ac0 <lcd_float+0x98>
			case 3 : sprintf(buff, "%.3f", nilai); break;
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f7 fd33 	bl	8000500 <__aeabi_f2d>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	f107 000c 	add.w	r0, r7, #12
 8008aa2:	490e      	ldr	r1, [pc, #56]	; (8008adc <lcd_float+0xb4>)
 8008aa4:	f000 fde8 	bl	8009678 <siprintf>
 8008aa8:	e00a      	b.n	8008ac0 <lcd_float+0x98>
			case 4 : sprintf(buff, "%.4f", nilai); break;
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7f7 fd28 	bl	8000500 <__aeabi_f2d>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	f107 000c 	add.w	r0, r7, #12
 8008ab8:	4909      	ldr	r1, [pc, #36]	; (8008ae0 <lcd_float+0xb8>)
 8008aba:	f000 fddd 	bl	8009678 <siprintf>
 8008abe:	bf00      	nop
		lcd_print(buff);
 8008ac0:	f107 030c 	add.w	r3, r7, #12
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff ff5f 	bl	8008988 <lcd_print>
}
 8008aca:	bf00      	nop
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0800dc1c 	.word	0x0800dc1c
 8008ad8:	0800dc24 	.word	0x0800dc24
 8008adc:	0800dc2c 	.word	0x0800dc2c
 8008ae0:	0800dc34 	.word	0x0800dc34

08008ae4 <lcd_clear>:

void lcd_clear(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
	lcd_command(0x01);
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7ff fea1 	bl	8008830 <lcd_command>
}
 8008aee:	bf00      	nop
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <encoder_read>:
static uint8_t Memo = 0;

uint16_t waktu, factor;

int8_t encoder_read()
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
	static int8_t valid[] = {0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0};
	Prev <<= 2;
 8008af8:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <encoder_read+0xa0>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <encoder_read+0xa0>)
 8008b02:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(encoder_a_port, encoder_a_pin) == 1){ Prev |= 0x02; }
 8008b04:	2101      	movs	r1, #1
 8008b06:	4824      	ldr	r0, [pc, #144]	; (8008b98 <encoder_read+0xa4>)
 8008b08:	f7fc fb5a 	bl	80051c0 <HAL_GPIO_ReadPin>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d106      	bne.n	8008b20 <encoder_read+0x2c>
 8008b12:	4b20      	ldr	r3, [pc, #128]	; (8008b94 <encoder_read+0xa0>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f043 0302 	orr.w	r3, r3, #2
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <encoder_read+0xa0>)
 8008b1e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(encoder_b_port, encoder_b_pin) == 1){ Prev |= 0x01; }
 8008b20:	2102      	movs	r1, #2
 8008b22:	481d      	ldr	r0, [pc, #116]	; (8008b98 <encoder_read+0xa4>)
 8008b24:	f7fc fb4c 	bl	80051c0 <HAL_GPIO_ReadPin>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d106      	bne.n	8008b3c <encoder_read+0x48>
 8008b2e:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <encoder_read+0xa0>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	4b16      	ldr	r3, [pc, #88]	; (8008b94 <encoder_read+0xa0>)
 8008b3a:	701a      	strb	r2, [r3, #0]
	Prev &= 0x0f;
 8008b3c:	4b15      	ldr	r3, [pc, #84]	; (8008b94 <encoder_read+0xa0>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <encoder_read+0xa0>)
 8008b48:	701a      	strb	r2, [r3, #0]

	if(valid[Prev])
 8008b4a:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <encoder_read+0xa0>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <encoder_read+0xa8>)
 8008b52:	569b      	ldrsb	r3, [r3, r2]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01a      	beq.n	8008b8e <encoder_read+0x9a>
	{
		Memo <<= 4;
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <encoder_read+0xac>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <encoder_read+0xac>)
 8008b62:	701a      	strb	r2, [r3, #0]
		Memo |= Prev;
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <encoder_read+0xac>)
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <encoder_read+0xa0>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <encoder_read+0xac>)
 8008b72:	701a      	strb	r2, [r3, #0]
		if((Memo & 0xff) == 0x2b){return -1;}
 8008b74:	4b0a      	ldr	r3, [pc, #40]	; (8008ba0 <encoder_read+0xac>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b2b      	cmp	r3, #43	; 0x2b
 8008b7a:	d102      	bne.n	8008b82 <encoder_read+0x8e>
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e006      	b.n	8008b90 <encoder_read+0x9c>
		if((Memo & 0xff) == 0x17){return  1;}
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <encoder_read+0xac>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b17      	cmp	r3, #23
 8008b88:	d101      	bne.n	8008b8e <encoder_read+0x9a>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e000      	b.n	8008b90 <encoder_read+0x9c>
    }
	return 0;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200002b8 	.word	0x200002b8
 8008b98:	40010c00 	.word	0x40010c00
 8008b9c:	20000014 	.word	0x20000014
 8008ba0:	200002b9 	.word	0x200002b9

08008ba4 <encoder_handler>:

void encoder_handler(int8_t flag, float *buffer, float min, float max, float increment)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
	*buffer += flag*increment;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	681c      	ldr	r4, [r3, #0]
 8008bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f8 f8d9 	bl	8000d74 <__aeabi_i2f>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6a39      	ldr	r1, [r7, #32]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f8 f928 	bl	8000e1c <__aeabi_fmul>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7f8 f81b 	bl	8000c0c <__addsf3>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	601a      	str	r2, [r3, #0]
	     if(*buffer >= max){ *buffer = max; }
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6838      	ldr	r0, [r7, #0]
 8008be6:	f7f8 fac1 	bl	800116c <__aeabi_fcmple>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <encoder_handler+0x54>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	601a      	str	r2, [r3, #0]
	else if(*buffer <= min){ *buffer = min; }
}
 8008bf6:	e00c      	b.n	8008c12 <encoder_handler+0x6e>
	else if(*buffer <= min){ *buffer = min; }
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7f8 fabe 	bl	8001180 <__aeabi_fcmpge>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d100      	bne.n	8008c0c <encoder_handler+0x68>
}
 8008c0a:	e002      	b.n	8008c12 <encoder_handler+0x6e>
	else if(*buffer <= min){ *buffer = min; }
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd90      	pop	{r4, r7, pc}

08008c1a <encoder_change>:

bool encoder_change(int flag)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
	if(flag != 0){ return true;  }
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <encoder_change+0x12>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <encoder_change+0x14>
	else         { return false; }
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bc80      	pop	{r7}
 8008c36:	4770      	bx	lr

08008c38 <encoder_push>:

bool encoder_push(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENSW_GPIO_Port, ENSW_Pin) == GPIO_PIN_RESET)
 8008c3c:	2120      	movs	r1, #32
 8008c3e:	4809      	ldr	r0, [pc, #36]	; (8008c64 <encoder_push+0x2c>)
 8008c40:	f7fc fabe 	bl	80051c0 <HAL_GPIO_ReadPin>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <encoder_push+0x26>
	{
		while(HAL_GPIO_ReadPin(ENSW_GPIO_Port, ENSW_Pin) == GPIO_PIN_RESET);
 8008c4a:	bf00      	nop
 8008c4c:	2120      	movs	r1, #32
 8008c4e:	4805      	ldr	r0, [pc, #20]	; (8008c64 <encoder_push+0x2c>)
 8008c50:	f7fc fab6 	bl	80051c0 <HAL_GPIO_ReadPin>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0f8      	beq.n	8008c4c <encoder_push+0x14>
		return true;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <encoder_push+0x28>
	}
	else
	{
		return false;
 8008c5e:	2300      	movs	r3, #0
	}
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	40011000 	.word	0x40011000

08008c68 <encoder_adaptive_handler>:

void encoder_adaptive_handler(int8_t flag, float *buffer, int min, int max)
{
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
	waktu = __HAL_TIM_GET_COUNTER(&htim2);
 8008c78:	4b32      	ldr	r3, [pc, #200]	; (8008d44 <encoder_adaptive_handler+0xdc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	4b31      	ldr	r3, [pc, #196]	; (8008d48 <encoder_adaptive_handler+0xe0>)
 8008c82:	801a      	strh	r2, [r3, #0]

	if(waktu > 1380){ factor = 1; }
 8008c84:	4b30      	ldr	r3, [pc, #192]	; (8008d48 <encoder_adaptive_handler+0xe0>)
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	f240 5264 	movw	r2, #1380	; 0x564
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d903      	bls.n	8008c98 <encoder_adaptive_handler+0x30>
 8008c90:	4b2e      	ldr	r3, [pc, #184]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	e00e      	b.n	8008cb6 <encoder_adaptive_handler+0x4e>
	else{ factor = ((1500-waktu)/120); }
 8008c98:	4b2b      	ldr	r3, [pc, #172]	; (8008d48 <encoder_adaptive_handler+0xe0>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4a2b      	ldr	r2, [pc, #172]	; (8008d50 <encoder_adaptive_handler+0xe8>)
 8008ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8008ca8:	441a      	add	r2, r3
 8008caa:	1192      	asrs	r2, r2, #6
 8008cac:	17db      	asrs	r3, r3, #31
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008cb4:	801a      	strh	r2, [r3, #0]
	factor *= factor;
 8008cb6:	4b25      	ldr	r3, [pc, #148]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	4a24      	ldr	r2, [pc, #144]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008cbc:	8812      	ldrh	r2, [r2, #0]
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	4b21      	ldr	r3, [pc, #132]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008cc6:	801a      	strh	r2, [r3, #0]

	*buffer += flag*factor;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	681c      	ldr	r4, [r3, #0]
 8008ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cd0:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <encoder_adaptive_handler+0xe4>)
 8008cd2:	8812      	ldrh	r2, [r2, #0]
 8008cd4:	fb02 f303 	mul.w	r3, r2, r3
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f8 f84b 	bl	8000d74 <__aeabi_i2f>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7f7 ff92 	bl	8000c0c <__addsf3>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	601a      	str	r2, [r3, #0]

	     if((int)*buffer >= max){ *buffer = max; }
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f8 fa57 	bl	80011a8 <__aeabi_f2iz>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	dc06      	bgt.n	8008d10 <encoder_adaptive_handler+0xa8>
 8008d02:	6838      	ldr	r0, [r7, #0]
 8008d04:	f7f8 f836 	bl	8000d74 <__aeabi_i2f>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	e00e      	b.n	8008d2e <encoder_adaptive_handler+0xc6>
	else if((int)*buffer <= min){ *buffer = min; }
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7f8 fa47 	bl	80011a8 <__aeabi_f2iz>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	db05      	blt.n	8008d2e <encoder_adaptive_handler+0xc6>
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7f8 f826 	bl	8000d74 <__aeabi_i2f>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim2,0);
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <encoder_adaptive_handler+0xdc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim2);
 8008d36:	4803      	ldr	r0, [pc, #12]	; (8008d44 <encoder_adaptive_handler+0xdc>)
 8008d38:	f7fd ff26 	bl	8006b88 <HAL_TIM_Base_Start_IT>
}
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd90      	pop	{r4, r7, pc}
 8008d44:	20001900 	.word	0x20001900
 8008d48:	20001980 	.word	0x20001980
 8008d4c:	20001982 	.word	0x20001982
 8008d50:	88888889 	.word	0x88888889

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000024 	.word	0x20000024

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	2600      	movs	r6, #0
 8008d64:	4d0c      	ldr	r5, [pc, #48]	; (8008d98 <__libc_init_array+0x38>)
 8008d66:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d68:	1b64      	subs	r4, r4, r5
 8008d6a:	10a4      	asrs	r4, r4, #2
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	f004 fe04 	bl	800d97c <_init>
 8008d74:	2600      	movs	r6, #0
 8008d76:	4d0a      	ldr	r5, [pc, #40]	; (8008da0 <__libc_init_array+0x40>)
 8008d78:	4c0a      	ldr	r4, [pc, #40]	; (8008da4 <__libc_init_array+0x44>)
 8008d7a:	1b64      	subs	r4, r4, r5
 8008d7c:	10a4      	asrs	r4, r4, #2
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800e290 	.word	0x0800e290
 8008d9c:	0800e290 	.word	0x0800e290
 8008da0:	0800e290 	.word	0x0800e290
 8008da4:	0800e294 	.word	0x0800e294

08008da8 <memset>:
 8008da8:	4603      	mov	r3, r0
 8008daa:	4402      	add	r2, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <__cvt>:
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	bfbb      	ittet	lt
 8008dc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008dc6:	461f      	movlt	r7, r3
 8008dc8:	2300      	movge	r3, #0
 8008dca:	232d      	movlt	r3, #45	; 0x2d
 8008dcc:	b088      	sub	sp, #32
 8008dce:	4614      	mov	r4, r2
 8008dd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008dd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008dd4:	7013      	strb	r3, [r2, #0]
 8008dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008ddc:	f023 0820 	bic.w	r8, r3, #32
 8008de0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008de4:	d005      	beq.n	8008df2 <__cvt+0x3a>
 8008de6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dea:	d100      	bne.n	8008dee <__cvt+0x36>
 8008dec:	3501      	adds	r5, #1
 8008dee:	2302      	movs	r3, #2
 8008df0:	e000      	b.n	8008df4 <__cvt+0x3c>
 8008df2:	2303      	movs	r3, #3
 8008df4:	aa07      	add	r2, sp, #28
 8008df6:	9204      	str	r2, [sp, #16]
 8008df8:	aa06      	add	r2, sp, #24
 8008dfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008dfe:	e9cd 3500 	strd	r3, r5, [sp]
 8008e02:	4622      	mov	r2, r4
 8008e04:	463b      	mov	r3, r7
 8008e06:	f000 fce7 	bl	80097d8 <_dtoa_r>
 8008e0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e0e:	4606      	mov	r6, r0
 8008e10:	d102      	bne.n	8008e18 <__cvt+0x60>
 8008e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e14:	07db      	lsls	r3, r3, #31
 8008e16:	d522      	bpl.n	8008e5e <__cvt+0xa6>
 8008e18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e1c:	eb06 0905 	add.w	r9, r6, r5
 8008e20:	d110      	bne.n	8008e44 <__cvt+0x8c>
 8008e22:	7833      	ldrb	r3, [r6, #0]
 8008e24:	2b30      	cmp	r3, #48	; 0x30
 8008e26:	d10a      	bne.n	8008e3e <__cvt+0x86>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fe26 	bl	8000a80 <__aeabi_dcmpeq>
 8008e34:	b918      	cbnz	r0, 8008e3e <__cvt+0x86>
 8008e36:	f1c5 0501 	rsb	r5, r5, #1
 8008e3a:	f8ca 5000 	str.w	r5, [sl]
 8008e3e:	f8da 3000 	ldr.w	r3, [sl]
 8008e42:	4499      	add	r9, r3
 8008e44:	2200      	movs	r2, #0
 8008e46:	2300      	movs	r3, #0
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe18 	bl	8000a80 <__aeabi_dcmpeq>
 8008e50:	b108      	cbz	r0, 8008e56 <__cvt+0x9e>
 8008e52:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e56:	2230      	movs	r2, #48	; 0x30
 8008e58:	9b07      	ldr	r3, [sp, #28]
 8008e5a:	454b      	cmp	r3, r9
 8008e5c:	d307      	bcc.n	8008e6e <__cvt+0xb6>
 8008e5e:	4630      	mov	r0, r6
 8008e60:	9b07      	ldr	r3, [sp, #28]
 8008e62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e64:	1b9b      	subs	r3, r3, r6
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	b008      	add	sp, #32
 8008e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6e:	1c59      	adds	r1, r3, #1
 8008e70:	9107      	str	r1, [sp, #28]
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	e7f0      	b.n	8008e58 <__cvt+0xa0>

08008e76 <__exponent>:
 8008e76:	4603      	mov	r3, r0
 8008e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	f803 2b02 	strb.w	r2, [r3], #2
 8008e80:	bfb6      	itet	lt
 8008e82:	222d      	movlt	r2, #45	; 0x2d
 8008e84:	222b      	movge	r2, #43	; 0x2b
 8008e86:	4249      	neglt	r1, r1
 8008e88:	2909      	cmp	r1, #9
 8008e8a:	7042      	strb	r2, [r0, #1]
 8008e8c:	dd2b      	ble.n	8008ee6 <__exponent+0x70>
 8008e8e:	f10d 0407 	add.w	r4, sp, #7
 8008e92:	46a4      	mov	ip, r4
 8008e94:	270a      	movs	r7, #10
 8008e96:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	46a6      	mov	lr, r4
 8008e9e:	fb07 1516 	mls	r5, r7, r6, r1
 8008ea2:	2a63      	cmp	r2, #99	; 0x63
 8008ea4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	f104 34ff 	add.w	r4, r4, #4294967295
 8008eae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008eb2:	dcf0      	bgt.n	8008e96 <__exponent+0x20>
 8008eb4:	3130      	adds	r1, #48	; 0x30
 8008eb6:	f1ae 0502 	sub.w	r5, lr, #2
 8008eba:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	1c44      	adds	r4, r0, #1
 8008ec2:	4561      	cmp	r1, ip
 8008ec4:	d30a      	bcc.n	8008edc <__exponent+0x66>
 8008ec6:	f10d 0209 	add.w	r2, sp, #9
 8008eca:	eba2 020e 	sub.w	r2, r2, lr
 8008ece:	4565      	cmp	r5, ip
 8008ed0:	bf88      	it	hi
 8008ed2:	2200      	movhi	r2, #0
 8008ed4:	4413      	add	r3, r2
 8008ed6:	1a18      	subs	r0, r3, r0
 8008ed8:	b003      	add	sp, #12
 8008eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ee0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ee4:	e7ed      	b.n	8008ec2 <__exponent+0x4c>
 8008ee6:	2330      	movs	r3, #48	; 0x30
 8008ee8:	3130      	adds	r1, #48	; 0x30
 8008eea:	7083      	strb	r3, [r0, #2]
 8008eec:	70c1      	strb	r1, [r0, #3]
 8008eee:	1d03      	adds	r3, r0, #4
 8008ef0:	e7f1      	b.n	8008ed6 <__exponent+0x60>
	...

08008ef4 <_printf_float>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	b091      	sub	sp, #68	; 0x44
 8008efa:	460c      	mov	r4, r1
 8008efc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008f00:	4616      	mov	r6, r2
 8008f02:	461f      	mov	r7, r3
 8008f04:	4605      	mov	r5, r0
 8008f06:	f001 fa55 	bl	800a3b4 <_localeconv_r>
 8008f0a:	6803      	ldr	r3, [r0, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	f7f7 f98a 	bl	8000228 <strlen>
 8008f14:	2300      	movs	r3, #0
 8008f16:	930e      	str	r3, [sp, #56]	; 0x38
 8008f18:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1c:	900a      	str	r0, [sp, #40]	; 0x28
 8008f1e:	3307      	adds	r3, #7
 8008f20:	f023 0307 	bic.w	r3, r3, #7
 8008f24:	f103 0208 	add.w	r2, r3, #8
 8008f28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008f2c:	f8d4 b000 	ldr.w	fp, [r4]
 8008f30:	f8c8 2000 	str.w	r2, [r8]
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008f40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4b9c      	ldr	r3, [pc, #624]	; (80091c0 <_printf_float+0x2cc>)
 8008f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f50:	f7f7 fdc8 	bl	8000ae4 <__aeabi_dcmpun>
 8008f54:	bb70      	cbnz	r0, 8008fb4 <_printf_float+0xc0>
 8008f56:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4b98      	ldr	r3, [pc, #608]	; (80091c0 <_printf_float+0x2cc>)
 8008f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f60:	f7f7 fda2 	bl	8000aa8 <__aeabi_dcmple>
 8008f64:	bb30      	cbnz	r0, 8008fb4 <_printf_float+0xc0>
 8008f66:	2200      	movs	r2, #0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4651      	mov	r1, sl
 8008f6e:	f7f7 fd91 	bl	8000a94 <__aeabi_dcmplt>
 8008f72:	b110      	cbz	r0, 8008f7a <_printf_float+0x86>
 8008f74:	232d      	movs	r3, #45	; 0x2d
 8008f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f7a:	4b92      	ldr	r3, [pc, #584]	; (80091c4 <_printf_float+0x2d0>)
 8008f7c:	4892      	ldr	r0, [pc, #584]	; (80091c8 <_printf_float+0x2d4>)
 8008f7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f82:	bf94      	ite	ls
 8008f84:	4698      	movls	r8, r3
 8008f86:	4680      	movhi	r8, r0
 8008f88:	2303      	movs	r3, #3
 8008f8a:	f04f 0a00 	mov.w	sl, #0
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	f02b 0304 	bic.w	r3, fp, #4
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	4633      	mov	r3, r6
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	9700      	str	r7, [sp, #0]
 8008f9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008fa0:	f000 f9d4 	bl	800934c <_printf_common>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f040 8090 	bne.w	80090ca <_printf_float+0x1d6>
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	b011      	add	sp, #68	; 0x44
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb4:	4642      	mov	r2, r8
 8008fb6:	4653      	mov	r3, sl
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4651      	mov	r1, sl
 8008fbc:	f7f7 fd92 	bl	8000ae4 <__aeabi_dcmpun>
 8008fc0:	b148      	cbz	r0, 8008fd6 <_printf_float+0xe2>
 8008fc2:	f1ba 0f00 	cmp.w	sl, #0
 8008fc6:	bfb8      	it	lt
 8008fc8:	232d      	movlt	r3, #45	; 0x2d
 8008fca:	4880      	ldr	r0, [pc, #512]	; (80091cc <_printf_float+0x2d8>)
 8008fcc:	bfb8      	it	lt
 8008fce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fd2:	4b7f      	ldr	r3, [pc, #508]	; (80091d0 <_printf_float+0x2dc>)
 8008fd4:	e7d3      	b.n	8008f7e <_printf_float+0x8a>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	d142      	bne.n	8009066 <_printf_float+0x172>
 8008fe0:	2306      	movs	r3, #6
 8008fe2:	6063      	str	r3, [r4, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	9206      	str	r2, [sp, #24]
 8008fe8:	aa0e      	add	r2, sp, #56	; 0x38
 8008fea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008fee:	aa0d      	add	r2, sp, #52	; 0x34
 8008ff0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008ff4:	9203      	str	r2, [sp, #12]
 8008ff6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008ffa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	6863      	ldr	r3, [r4, #4]
 8009002:	4642      	mov	r2, r8
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4628      	mov	r0, r5
 8009008:	4653      	mov	r3, sl
 800900a:	910b      	str	r1, [sp, #44]	; 0x2c
 800900c:	f7ff fed4 	bl	8008db8 <__cvt>
 8009010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009012:	4680      	mov	r8, r0
 8009014:	2947      	cmp	r1, #71	; 0x47
 8009016:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009018:	d108      	bne.n	800902c <_printf_float+0x138>
 800901a:	1cc8      	adds	r0, r1, #3
 800901c:	db02      	blt.n	8009024 <_printf_float+0x130>
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	4299      	cmp	r1, r3
 8009022:	dd40      	ble.n	80090a6 <_printf_float+0x1b2>
 8009024:	f1a9 0902 	sub.w	r9, r9, #2
 8009028:	fa5f f989 	uxtb.w	r9, r9
 800902c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009030:	d81f      	bhi.n	8009072 <_printf_float+0x17e>
 8009032:	464a      	mov	r2, r9
 8009034:	3901      	subs	r1, #1
 8009036:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800903a:	910d      	str	r1, [sp, #52]	; 0x34
 800903c:	f7ff ff1b 	bl	8008e76 <__exponent>
 8009040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009042:	4682      	mov	sl, r0
 8009044:	1813      	adds	r3, r2, r0
 8009046:	2a01      	cmp	r2, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	dc02      	bgt.n	8009052 <_printf_float+0x15e>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	07d2      	lsls	r2, r2, #31
 8009050:	d501      	bpl.n	8009056 <_printf_float+0x162>
 8009052:	3301      	adds	r3, #1
 8009054:	6123      	str	r3, [r4, #16]
 8009056:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800905a:	2b00      	cmp	r3, #0
 800905c:	d09b      	beq.n	8008f96 <_printf_float+0xa2>
 800905e:	232d      	movs	r3, #45	; 0x2d
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009064:	e797      	b.n	8008f96 <_printf_float+0xa2>
 8009066:	2947      	cmp	r1, #71	; 0x47
 8009068:	d1bc      	bne.n	8008fe4 <_printf_float+0xf0>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ba      	bne.n	8008fe4 <_printf_float+0xf0>
 800906e:	2301      	movs	r3, #1
 8009070:	e7b7      	b.n	8008fe2 <_printf_float+0xee>
 8009072:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009076:	d118      	bne.n	80090aa <_printf_float+0x1b6>
 8009078:	2900      	cmp	r1, #0
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	dd0b      	ble.n	8009096 <_printf_float+0x1a2>
 800907e:	6121      	str	r1, [r4, #16]
 8009080:	b913      	cbnz	r3, 8009088 <_printf_float+0x194>
 8009082:	6822      	ldr	r2, [r4, #0]
 8009084:	07d0      	lsls	r0, r2, #31
 8009086:	d502      	bpl.n	800908e <_printf_float+0x19a>
 8009088:	3301      	adds	r3, #1
 800908a:	440b      	add	r3, r1
 800908c:	6123      	str	r3, [r4, #16]
 800908e:	f04f 0a00 	mov.w	sl, #0
 8009092:	65a1      	str	r1, [r4, #88]	; 0x58
 8009094:	e7df      	b.n	8009056 <_printf_float+0x162>
 8009096:	b913      	cbnz	r3, 800909e <_printf_float+0x1aa>
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	07d2      	lsls	r2, r2, #31
 800909c:	d501      	bpl.n	80090a2 <_printf_float+0x1ae>
 800909e:	3302      	adds	r3, #2
 80090a0:	e7f4      	b.n	800908c <_printf_float+0x198>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e7f2      	b.n	800908c <_printf_float+0x198>
 80090a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80090aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ac:	4299      	cmp	r1, r3
 80090ae:	db05      	blt.n	80090bc <_printf_float+0x1c8>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	6121      	str	r1, [r4, #16]
 80090b4:	07d8      	lsls	r0, r3, #31
 80090b6:	d5ea      	bpl.n	800908e <_printf_float+0x19a>
 80090b8:	1c4b      	adds	r3, r1, #1
 80090ba:	e7e7      	b.n	800908c <_printf_float+0x198>
 80090bc:	2900      	cmp	r1, #0
 80090be:	bfcc      	ite	gt
 80090c0:	2201      	movgt	r2, #1
 80090c2:	f1c1 0202 	rsble	r2, r1, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	e7e0      	b.n	800908c <_printf_float+0x198>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	055a      	lsls	r2, r3, #21
 80090ce:	d407      	bmi.n	80090e0 <_printf_float+0x1ec>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	4642      	mov	r2, r8
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	d12b      	bne.n	8009136 <_printf_float+0x242>
 80090de:	e764      	b.n	8008faa <_printf_float+0xb6>
 80090e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80090e4:	f240 80dd 	bls.w	80092a2 <_printf_float+0x3ae>
 80090e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ec:	2200      	movs	r2, #0
 80090ee:	2300      	movs	r3, #0
 80090f0:	f7f7 fcc6 	bl	8000a80 <__aeabi_dcmpeq>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d033      	beq.n	8009160 <_printf_float+0x26c>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	4a35      	ldr	r2, [pc, #212]	; (80091d4 <_printf_float+0x2e0>)
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	f43f af51 	beq.w	8008faa <_printf_float+0xb6>
 8009108:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800910c:	429a      	cmp	r2, r3
 800910e:	db02      	blt.n	8009116 <_printf_float+0x222>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	07d8      	lsls	r0, r3, #31
 8009114:	d50f      	bpl.n	8009136 <_printf_float+0x242>
 8009116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f af42 	beq.w	8008faa <_printf_float+0xb6>
 8009126:	f04f 0800 	mov.w	r8, #0
 800912a:	f104 091a 	add.w	r9, r4, #26
 800912e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009130:	3b01      	subs	r3, #1
 8009132:	4543      	cmp	r3, r8
 8009134:	dc09      	bgt.n	800914a <_printf_float+0x256>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	079b      	lsls	r3, r3, #30
 800913a:	f100 8102 	bmi.w	8009342 <_printf_float+0x44e>
 800913e:	68e0      	ldr	r0, [r4, #12]
 8009140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009142:	4298      	cmp	r0, r3
 8009144:	bfb8      	it	lt
 8009146:	4618      	movlt	r0, r3
 8009148:	e731      	b.n	8008fae <_printf_float+0xba>
 800914a:	2301      	movs	r3, #1
 800914c:	464a      	mov	r2, r9
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f af28 	beq.w	8008faa <_printf_float+0xb6>
 800915a:	f108 0801 	add.w	r8, r8, #1
 800915e:	e7e6      	b.n	800912e <_printf_float+0x23a>
 8009160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009162:	2b00      	cmp	r3, #0
 8009164:	dc38      	bgt.n	80091d8 <_printf_float+0x2e4>
 8009166:	2301      	movs	r3, #1
 8009168:	4631      	mov	r1, r6
 800916a:	4628      	mov	r0, r5
 800916c:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <_printf_float+0x2e0>)
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	f43f af1a 	beq.w	8008faa <_printf_float+0xb6>
 8009176:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800917a:	4313      	orrs	r3, r2
 800917c:	d102      	bne.n	8009184 <_printf_float+0x290>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	07d9      	lsls	r1, r3, #31
 8009182:	d5d8      	bpl.n	8009136 <_printf_float+0x242>
 8009184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009188:	4631      	mov	r1, r6
 800918a:	4628      	mov	r0, r5
 800918c:	47b8      	blx	r7
 800918e:	3001      	adds	r0, #1
 8009190:	f43f af0b 	beq.w	8008faa <_printf_float+0xb6>
 8009194:	f04f 0900 	mov.w	r9, #0
 8009198:	f104 0a1a 	add.w	sl, r4, #26
 800919c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800919e:	425b      	negs	r3, r3
 80091a0:	454b      	cmp	r3, r9
 80091a2:	dc01      	bgt.n	80091a8 <_printf_float+0x2b4>
 80091a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a6:	e794      	b.n	80090d2 <_printf_float+0x1de>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4652      	mov	r2, sl
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f aef9 	beq.w	8008faa <_printf_float+0xb6>
 80091b8:	f109 0901 	add.w	r9, r9, #1
 80091bc:	e7ee      	b.n	800919c <_printf_float+0x2a8>
 80091be:	bf00      	nop
 80091c0:	7fefffff 	.word	0x7fefffff
 80091c4:	0800dc94 	.word	0x0800dc94
 80091c8:	0800dc98 	.word	0x0800dc98
 80091cc:	0800dca0 	.word	0x0800dca0
 80091d0:	0800dc9c 	.word	0x0800dc9c
 80091d4:	0800dca4 	.word	0x0800dca4
 80091d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091dc:	429a      	cmp	r2, r3
 80091de:	bfa8      	it	ge
 80091e0:	461a      	movge	r2, r3
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	4691      	mov	r9, r2
 80091e6:	dc37      	bgt.n	8009258 <_printf_float+0x364>
 80091e8:	f04f 0b00 	mov.w	fp, #0
 80091ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091f0:	f104 021a 	add.w	r2, r4, #26
 80091f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091f8:	ebaa 0309 	sub.w	r3, sl, r9
 80091fc:	455b      	cmp	r3, fp
 80091fe:	dc33      	bgt.n	8009268 <_printf_float+0x374>
 8009200:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009204:	429a      	cmp	r2, r3
 8009206:	db3b      	blt.n	8009280 <_printf_float+0x38c>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d438      	bmi.n	8009280 <_printf_float+0x38c>
 800920e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009210:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009212:	eba2 030a 	sub.w	r3, r2, sl
 8009216:	eba2 0901 	sub.w	r9, r2, r1
 800921a:	4599      	cmp	r9, r3
 800921c:	bfa8      	it	ge
 800921e:	4699      	movge	r9, r3
 8009220:	f1b9 0f00 	cmp.w	r9, #0
 8009224:	dc34      	bgt.n	8009290 <_printf_float+0x39c>
 8009226:	f04f 0800 	mov.w	r8, #0
 800922a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800922e:	f104 0a1a 	add.w	sl, r4, #26
 8009232:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	eba3 0309 	sub.w	r3, r3, r9
 800923c:	4543      	cmp	r3, r8
 800923e:	f77f af7a 	ble.w	8009136 <_printf_float+0x242>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f43f aeac 	beq.w	8008faa <_printf_float+0xb6>
 8009252:	f108 0801 	add.w	r8, r8, #1
 8009256:	e7ec      	b.n	8009232 <_printf_float+0x33e>
 8009258:	4613      	mov	r3, r2
 800925a:	4631      	mov	r1, r6
 800925c:	4642      	mov	r2, r8
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	d1c0      	bne.n	80091e8 <_printf_float+0x2f4>
 8009266:	e6a0      	b.n	8008faa <_printf_float+0xb6>
 8009268:	2301      	movs	r3, #1
 800926a:	4631      	mov	r1, r6
 800926c:	4628      	mov	r0, r5
 800926e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f ae99 	beq.w	8008faa <_printf_float+0xb6>
 8009278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800927a:	f10b 0b01 	add.w	fp, fp, #1
 800927e:	e7b9      	b.n	80091f4 <_printf_float+0x300>
 8009280:	4631      	mov	r1, r6
 8009282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	d1bf      	bne.n	800920e <_printf_float+0x31a>
 800928e:	e68c      	b.n	8008faa <_printf_float+0xb6>
 8009290:	464b      	mov	r3, r9
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	eb08 020a 	add.w	r2, r8, sl
 800929a:	47b8      	blx	r7
 800929c:	3001      	adds	r0, #1
 800929e:	d1c2      	bne.n	8009226 <_printf_float+0x332>
 80092a0:	e683      	b.n	8008faa <_printf_float+0xb6>
 80092a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092a4:	2a01      	cmp	r2, #1
 80092a6:	dc01      	bgt.n	80092ac <_printf_float+0x3b8>
 80092a8:	07db      	lsls	r3, r3, #31
 80092aa:	d537      	bpl.n	800931c <_printf_float+0x428>
 80092ac:	2301      	movs	r3, #1
 80092ae:	4642      	mov	r2, r8
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f ae77 	beq.w	8008faa <_printf_float+0xb6>
 80092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f ae6f 	beq.w	8008faa <_printf_float+0xb6>
 80092cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092d0:	2200      	movs	r2, #0
 80092d2:	2300      	movs	r3, #0
 80092d4:	f7f7 fbd4 	bl	8000a80 <__aeabi_dcmpeq>
 80092d8:	b9d8      	cbnz	r0, 8009312 <_printf_float+0x41e>
 80092da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092dc:	f108 0201 	add.w	r2, r8, #1
 80092e0:	3b01      	subs	r3, #1
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	d10e      	bne.n	800930a <_printf_float+0x416>
 80092ec:	e65d      	b.n	8008faa <_printf_float+0xb6>
 80092ee:	2301      	movs	r3, #1
 80092f0:	464a      	mov	r2, r9
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	f43f ae56 	beq.w	8008faa <_printf_float+0xb6>
 80092fe:	f108 0801 	add.w	r8, r8, #1
 8009302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009304:	3b01      	subs	r3, #1
 8009306:	4543      	cmp	r3, r8
 8009308:	dcf1      	bgt.n	80092ee <_printf_float+0x3fa>
 800930a:	4653      	mov	r3, sl
 800930c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009310:	e6e0      	b.n	80090d4 <_printf_float+0x1e0>
 8009312:	f04f 0800 	mov.w	r8, #0
 8009316:	f104 091a 	add.w	r9, r4, #26
 800931a:	e7f2      	b.n	8009302 <_printf_float+0x40e>
 800931c:	2301      	movs	r3, #1
 800931e:	4642      	mov	r2, r8
 8009320:	e7df      	b.n	80092e2 <_printf_float+0x3ee>
 8009322:	2301      	movs	r3, #1
 8009324:	464a      	mov	r2, r9
 8009326:	4631      	mov	r1, r6
 8009328:	4628      	mov	r0, r5
 800932a:	47b8      	blx	r7
 800932c:	3001      	adds	r0, #1
 800932e:	f43f ae3c 	beq.w	8008faa <_printf_float+0xb6>
 8009332:	f108 0801 	add.w	r8, r8, #1
 8009336:	68e3      	ldr	r3, [r4, #12]
 8009338:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800933a:	1a5b      	subs	r3, r3, r1
 800933c:	4543      	cmp	r3, r8
 800933e:	dcf0      	bgt.n	8009322 <_printf_float+0x42e>
 8009340:	e6fd      	b.n	800913e <_printf_float+0x24a>
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	f104 0919 	add.w	r9, r4, #25
 800934a:	e7f4      	b.n	8009336 <_printf_float+0x442>

0800934c <_printf_common>:
 800934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	4616      	mov	r6, r2
 8009352:	4699      	mov	r9, r3
 8009354:	688a      	ldr	r2, [r1, #8]
 8009356:	690b      	ldr	r3, [r1, #16]
 8009358:	4607      	mov	r7, r0
 800935a:	4293      	cmp	r3, r2
 800935c:	bfb8      	it	lt
 800935e:	4613      	movlt	r3, r2
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009366:	460c      	mov	r4, r1
 8009368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800936c:	b10a      	cbz	r2, 8009372 <_printf_common+0x26>
 800936e:	3301      	adds	r3, #1
 8009370:	6033      	str	r3, [r6, #0]
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	0699      	lsls	r1, r3, #26
 8009376:	bf42      	ittt	mi
 8009378:	6833      	ldrmi	r3, [r6, #0]
 800937a:	3302      	addmi	r3, #2
 800937c:	6033      	strmi	r3, [r6, #0]
 800937e:	6825      	ldr	r5, [r4, #0]
 8009380:	f015 0506 	ands.w	r5, r5, #6
 8009384:	d106      	bne.n	8009394 <_printf_common+0x48>
 8009386:	f104 0a19 	add.w	sl, r4, #25
 800938a:	68e3      	ldr	r3, [r4, #12]
 800938c:	6832      	ldr	r2, [r6, #0]
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	42ab      	cmp	r3, r5
 8009392:	dc28      	bgt.n	80093e6 <_printf_common+0x9a>
 8009394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009398:	1e13      	subs	r3, r2, #0
 800939a:	6822      	ldr	r2, [r4, #0]
 800939c:	bf18      	it	ne
 800939e:	2301      	movne	r3, #1
 80093a0:	0692      	lsls	r2, r2, #26
 80093a2:	d42d      	bmi.n	8009400 <_printf_common+0xb4>
 80093a4:	4649      	mov	r1, r9
 80093a6:	4638      	mov	r0, r7
 80093a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ac:	47c0      	blx	r8
 80093ae:	3001      	adds	r0, #1
 80093b0:	d020      	beq.n	80093f4 <_printf_common+0xa8>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	68e5      	ldr	r5, [r4, #12]
 80093b6:	f003 0306 	and.w	r3, r3, #6
 80093ba:	2b04      	cmp	r3, #4
 80093bc:	bf18      	it	ne
 80093be:	2500      	movne	r5, #0
 80093c0:	6832      	ldr	r2, [r6, #0]
 80093c2:	f04f 0600 	mov.w	r6, #0
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	bf08      	it	eq
 80093ca:	1aad      	subeq	r5, r5, r2
 80093cc:	6922      	ldr	r2, [r4, #16]
 80093ce:	bf08      	it	eq
 80093d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d4:	4293      	cmp	r3, r2
 80093d6:	bfc4      	itt	gt
 80093d8:	1a9b      	subgt	r3, r3, r2
 80093da:	18ed      	addgt	r5, r5, r3
 80093dc:	341a      	adds	r4, #26
 80093de:	42b5      	cmp	r5, r6
 80093e0:	d11a      	bne.n	8009418 <_printf_common+0xcc>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e008      	b.n	80093f8 <_printf_common+0xac>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4652      	mov	r2, sl
 80093ea:	4649      	mov	r1, r9
 80093ec:	4638      	mov	r0, r7
 80093ee:	47c0      	blx	r8
 80093f0:	3001      	adds	r0, #1
 80093f2:	d103      	bne.n	80093fc <_printf_common+0xb0>
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fc:	3501      	adds	r5, #1
 80093fe:	e7c4      	b.n	800938a <_printf_common+0x3e>
 8009400:	2030      	movs	r0, #48	; 0x30
 8009402:	18e1      	adds	r1, r4, r3
 8009404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800940e:	4422      	add	r2, r4
 8009410:	3302      	adds	r3, #2
 8009412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009416:	e7c5      	b.n	80093a4 <_printf_common+0x58>
 8009418:	2301      	movs	r3, #1
 800941a:	4622      	mov	r2, r4
 800941c:	4649      	mov	r1, r9
 800941e:	4638      	mov	r0, r7
 8009420:	47c0      	blx	r8
 8009422:	3001      	adds	r0, #1
 8009424:	d0e6      	beq.n	80093f4 <_printf_common+0xa8>
 8009426:	3601      	adds	r6, #1
 8009428:	e7d9      	b.n	80093de <_printf_common+0x92>
	...

0800942c <_printf_i>:
 800942c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	7e27      	ldrb	r7, [r4, #24]
 8009434:	4691      	mov	r9, r2
 8009436:	2f78      	cmp	r7, #120	; 0x78
 8009438:	4680      	mov	r8, r0
 800943a:	469a      	mov	sl, r3
 800943c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800943e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009442:	d807      	bhi.n	8009454 <_printf_i+0x28>
 8009444:	2f62      	cmp	r7, #98	; 0x62
 8009446:	d80a      	bhi.n	800945e <_printf_i+0x32>
 8009448:	2f00      	cmp	r7, #0
 800944a:	f000 80d9 	beq.w	8009600 <_printf_i+0x1d4>
 800944e:	2f58      	cmp	r7, #88	; 0x58
 8009450:	f000 80a4 	beq.w	800959c <_printf_i+0x170>
 8009454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800945c:	e03a      	b.n	80094d4 <_printf_i+0xa8>
 800945e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009462:	2b15      	cmp	r3, #21
 8009464:	d8f6      	bhi.n	8009454 <_printf_i+0x28>
 8009466:	a001      	add	r0, pc, #4	; (adr r0, 800946c <_printf_i+0x40>)
 8009468:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800946c:	080094c5 	.word	0x080094c5
 8009470:	080094d9 	.word	0x080094d9
 8009474:	08009455 	.word	0x08009455
 8009478:	08009455 	.word	0x08009455
 800947c:	08009455 	.word	0x08009455
 8009480:	08009455 	.word	0x08009455
 8009484:	080094d9 	.word	0x080094d9
 8009488:	08009455 	.word	0x08009455
 800948c:	08009455 	.word	0x08009455
 8009490:	08009455 	.word	0x08009455
 8009494:	08009455 	.word	0x08009455
 8009498:	080095e7 	.word	0x080095e7
 800949c:	08009509 	.word	0x08009509
 80094a0:	080095c9 	.word	0x080095c9
 80094a4:	08009455 	.word	0x08009455
 80094a8:	08009455 	.word	0x08009455
 80094ac:	08009609 	.word	0x08009609
 80094b0:	08009455 	.word	0x08009455
 80094b4:	08009509 	.word	0x08009509
 80094b8:	08009455 	.word	0x08009455
 80094bc:	08009455 	.word	0x08009455
 80094c0:	080095d1 	.word	0x080095d1
 80094c4:	680b      	ldr	r3, [r1, #0]
 80094c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094ca:	1d1a      	adds	r2, r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	600a      	str	r2, [r1, #0]
 80094d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094d4:	2301      	movs	r3, #1
 80094d6:	e0a4      	b.n	8009622 <_printf_i+0x1f6>
 80094d8:	6825      	ldr	r5, [r4, #0]
 80094da:	6808      	ldr	r0, [r1, #0]
 80094dc:	062e      	lsls	r6, r5, #24
 80094de:	f100 0304 	add.w	r3, r0, #4
 80094e2:	d50a      	bpl.n	80094fa <_printf_i+0xce>
 80094e4:	6805      	ldr	r5, [r0, #0]
 80094e6:	600b      	str	r3, [r1, #0]
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	da03      	bge.n	80094f4 <_printf_i+0xc8>
 80094ec:	232d      	movs	r3, #45	; 0x2d
 80094ee:	426d      	negs	r5, r5
 80094f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f4:	230a      	movs	r3, #10
 80094f6:	485e      	ldr	r0, [pc, #376]	; (8009670 <_printf_i+0x244>)
 80094f8:	e019      	b.n	800952e <_printf_i+0x102>
 80094fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094fe:	6805      	ldr	r5, [r0, #0]
 8009500:	600b      	str	r3, [r1, #0]
 8009502:	bf18      	it	ne
 8009504:	b22d      	sxthne	r5, r5
 8009506:	e7ef      	b.n	80094e8 <_printf_i+0xbc>
 8009508:	680b      	ldr	r3, [r1, #0]
 800950a:	6825      	ldr	r5, [r4, #0]
 800950c:	1d18      	adds	r0, r3, #4
 800950e:	6008      	str	r0, [r1, #0]
 8009510:	0628      	lsls	r0, r5, #24
 8009512:	d501      	bpl.n	8009518 <_printf_i+0xec>
 8009514:	681d      	ldr	r5, [r3, #0]
 8009516:	e002      	b.n	800951e <_printf_i+0xf2>
 8009518:	0669      	lsls	r1, r5, #25
 800951a:	d5fb      	bpl.n	8009514 <_printf_i+0xe8>
 800951c:	881d      	ldrh	r5, [r3, #0]
 800951e:	2f6f      	cmp	r7, #111	; 0x6f
 8009520:	bf0c      	ite	eq
 8009522:	2308      	moveq	r3, #8
 8009524:	230a      	movne	r3, #10
 8009526:	4852      	ldr	r0, [pc, #328]	; (8009670 <_printf_i+0x244>)
 8009528:	2100      	movs	r1, #0
 800952a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800952e:	6866      	ldr	r6, [r4, #4]
 8009530:	2e00      	cmp	r6, #0
 8009532:	bfa8      	it	ge
 8009534:	6821      	ldrge	r1, [r4, #0]
 8009536:	60a6      	str	r6, [r4, #8]
 8009538:	bfa4      	itt	ge
 800953a:	f021 0104 	bicge.w	r1, r1, #4
 800953e:	6021      	strge	r1, [r4, #0]
 8009540:	b90d      	cbnz	r5, 8009546 <_printf_i+0x11a>
 8009542:	2e00      	cmp	r6, #0
 8009544:	d04d      	beq.n	80095e2 <_printf_i+0x1b6>
 8009546:	4616      	mov	r6, r2
 8009548:	fbb5 f1f3 	udiv	r1, r5, r3
 800954c:	fb03 5711 	mls	r7, r3, r1, r5
 8009550:	5dc7      	ldrb	r7, [r0, r7]
 8009552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009556:	462f      	mov	r7, r5
 8009558:	42bb      	cmp	r3, r7
 800955a:	460d      	mov	r5, r1
 800955c:	d9f4      	bls.n	8009548 <_printf_i+0x11c>
 800955e:	2b08      	cmp	r3, #8
 8009560:	d10b      	bne.n	800957a <_printf_i+0x14e>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	07df      	lsls	r7, r3, #31
 8009566:	d508      	bpl.n	800957a <_printf_i+0x14e>
 8009568:	6923      	ldr	r3, [r4, #16]
 800956a:	6861      	ldr	r1, [r4, #4]
 800956c:	4299      	cmp	r1, r3
 800956e:	bfde      	ittt	le
 8009570:	2330      	movle	r3, #48	; 0x30
 8009572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800957a:	1b92      	subs	r2, r2, r6
 800957c:	6122      	str	r2, [r4, #16]
 800957e:	464b      	mov	r3, r9
 8009580:	4621      	mov	r1, r4
 8009582:	4640      	mov	r0, r8
 8009584:	f8cd a000 	str.w	sl, [sp]
 8009588:	aa03      	add	r2, sp, #12
 800958a:	f7ff fedf 	bl	800934c <_printf_common>
 800958e:	3001      	adds	r0, #1
 8009590:	d14c      	bne.n	800962c <_printf_i+0x200>
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	b004      	add	sp, #16
 8009598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959c:	4834      	ldr	r0, [pc, #208]	; (8009670 <_printf_i+0x244>)
 800959e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095a2:	680e      	ldr	r6, [r1, #0]
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80095aa:	061f      	lsls	r7, r3, #24
 80095ac:	600e      	str	r6, [r1, #0]
 80095ae:	d514      	bpl.n	80095da <_printf_i+0x1ae>
 80095b0:	07d9      	lsls	r1, r3, #31
 80095b2:	bf44      	itt	mi
 80095b4:	f043 0320 	orrmi.w	r3, r3, #32
 80095b8:	6023      	strmi	r3, [r4, #0]
 80095ba:	b91d      	cbnz	r5, 80095c4 <_printf_i+0x198>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	f023 0320 	bic.w	r3, r3, #32
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	2310      	movs	r3, #16
 80095c6:	e7af      	b.n	8009528 <_printf_i+0xfc>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	f043 0320 	orr.w	r3, r3, #32
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	2378      	movs	r3, #120	; 0x78
 80095d2:	4828      	ldr	r0, [pc, #160]	; (8009674 <_printf_i+0x248>)
 80095d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095d8:	e7e3      	b.n	80095a2 <_printf_i+0x176>
 80095da:	065e      	lsls	r6, r3, #25
 80095dc:	bf48      	it	mi
 80095de:	b2ad      	uxthmi	r5, r5
 80095e0:	e7e6      	b.n	80095b0 <_printf_i+0x184>
 80095e2:	4616      	mov	r6, r2
 80095e4:	e7bb      	b.n	800955e <_printf_i+0x132>
 80095e6:	680b      	ldr	r3, [r1, #0]
 80095e8:	6826      	ldr	r6, [r4, #0]
 80095ea:	1d1d      	adds	r5, r3, #4
 80095ec:	6960      	ldr	r0, [r4, #20]
 80095ee:	600d      	str	r5, [r1, #0]
 80095f0:	0635      	lsls	r5, r6, #24
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	d501      	bpl.n	80095fa <_printf_i+0x1ce>
 80095f6:	6018      	str	r0, [r3, #0]
 80095f8:	e002      	b.n	8009600 <_printf_i+0x1d4>
 80095fa:	0671      	lsls	r1, r6, #25
 80095fc:	d5fb      	bpl.n	80095f6 <_printf_i+0x1ca>
 80095fe:	8018      	strh	r0, [r3, #0]
 8009600:	2300      	movs	r3, #0
 8009602:	4616      	mov	r6, r2
 8009604:	6123      	str	r3, [r4, #16]
 8009606:	e7ba      	b.n	800957e <_printf_i+0x152>
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	1d1a      	adds	r2, r3, #4
 800960c:	600a      	str	r2, [r1, #0]
 800960e:	681e      	ldr	r6, [r3, #0]
 8009610:	2100      	movs	r1, #0
 8009612:	4630      	mov	r0, r6
 8009614:	6862      	ldr	r2, [r4, #4]
 8009616:	f000 fed9 	bl	800a3cc <memchr>
 800961a:	b108      	cbz	r0, 8009620 <_printf_i+0x1f4>
 800961c:	1b80      	subs	r0, r0, r6
 800961e:	6060      	str	r0, [r4, #4]
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	2300      	movs	r3, #0
 8009626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800962a:	e7a8      	b.n	800957e <_printf_i+0x152>
 800962c:	4632      	mov	r2, r6
 800962e:	4649      	mov	r1, r9
 8009630:	4640      	mov	r0, r8
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	47d0      	blx	sl
 8009636:	3001      	adds	r0, #1
 8009638:	d0ab      	beq.n	8009592 <_printf_i+0x166>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	079b      	lsls	r3, r3, #30
 800963e:	d413      	bmi.n	8009668 <_printf_i+0x23c>
 8009640:	68e0      	ldr	r0, [r4, #12]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	4298      	cmp	r0, r3
 8009646:	bfb8      	it	lt
 8009648:	4618      	movlt	r0, r3
 800964a:	e7a4      	b.n	8009596 <_printf_i+0x16a>
 800964c:	2301      	movs	r3, #1
 800964e:	4632      	mov	r2, r6
 8009650:	4649      	mov	r1, r9
 8009652:	4640      	mov	r0, r8
 8009654:	47d0      	blx	sl
 8009656:	3001      	adds	r0, #1
 8009658:	d09b      	beq.n	8009592 <_printf_i+0x166>
 800965a:	3501      	adds	r5, #1
 800965c:	68e3      	ldr	r3, [r4, #12]
 800965e:	9903      	ldr	r1, [sp, #12]
 8009660:	1a5b      	subs	r3, r3, r1
 8009662:	42ab      	cmp	r3, r5
 8009664:	dcf2      	bgt.n	800964c <_printf_i+0x220>
 8009666:	e7eb      	b.n	8009640 <_printf_i+0x214>
 8009668:	2500      	movs	r5, #0
 800966a:	f104 0619 	add.w	r6, r4, #25
 800966e:	e7f5      	b.n	800965c <_printf_i+0x230>
 8009670:	0800dca6 	.word	0x0800dca6
 8009674:	0800dcb7 	.word	0x0800dcb7

08009678 <siprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800967e:	b500      	push	{lr}
 8009680:	b09c      	sub	sp, #112	; 0x70
 8009682:	ab1d      	add	r3, sp, #116	; 0x74
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	9006      	str	r0, [sp, #24]
 8009688:	9107      	str	r1, [sp, #28]
 800968a:	9104      	str	r1, [sp, #16]
 800968c:	4808      	ldr	r0, [pc, #32]	; (80096b0 <siprintf+0x38>)
 800968e:	4909      	ldr	r1, [pc, #36]	; (80096b4 <siprintf+0x3c>)
 8009690:	f853 2b04 	ldr.w	r2, [r3], #4
 8009694:	9105      	str	r1, [sp, #20]
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	a902      	add	r1, sp, #8
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	f001 fb44 	bl	800ad28 <_svfiprintf_r>
 80096a0:	2200      	movs	r2, #0
 80096a2:	9b02      	ldr	r3, [sp, #8]
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	b01c      	add	sp, #112	; 0x70
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	20000024 	.word	0x20000024
 80096b4:	ffff0208 	.word	0xffff0208

080096b8 <quorem>:
 80096b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	6903      	ldr	r3, [r0, #16]
 80096be:	690c      	ldr	r4, [r1, #16]
 80096c0:	4607      	mov	r7, r0
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	f2c0 8083 	blt.w	80097ce <quorem+0x116>
 80096c8:	3c01      	subs	r4, #1
 80096ca:	f100 0514 	add.w	r5, r0, #20
 80096ce:	f101 0814 	add.w	r8, r1, #20
 80096d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096e0:	3301      	adds	r3, #1
 80096e2:	429a      	cmp	r2, r3
 80096e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80096e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096f0:	d332      	bcc.n	8009758 <quorem+0xa0>
 80096f2:	f04f 0e00 	mov.w	lr, #0
 80096f6:	4640      	mov	r0, r8
 80096f8:	46ac      	mov	ip, r5
 80096fa:	46f2      	mov	sl, lr
 80096fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009700:	b293      	uxth	r3, r2
 8009702:	fb06 e303 	mla	r3, r6, r3, lr
 8009706:	0c12      	lsrs	r2, r2, #16
 8009708:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800970c:	fb06 e202 	mla	r2, r6, r2, lr
 8009710:	b29b      	uxth	r3, r3
 8009712:	ebaa 0303 	sub.w	r3, sl, r3
 8009716:	f8dc a000 	ldr.w	sl, [ip]
 800971a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800971e:	fa1f fa8a 	uxth.w	sl, sl
 8009722:	4453      	add	r3, sl
 8009724:	fa1f fa82 	uxth.w	sl, r2
 8009728:	f8dc 2000 	ldr.w	r2, [ip]
 800972c:	4581      	cmp	r9, r0
 800972e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009736:	b29b      	uxth	r3, r3
 8009738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800973c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009740:	f84c 3b04 	str.w	r3, [ip], #4
 8009744:	d2da      	bcs.n	80096fc <quorem+0x44>
 8009746:	f855 300b 	ldr.w	r3, [r5, fp]
 800974a:	b92b      	cbnz	r3, 8009758 <quorem+0xa0>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	3b04      	subs	r3, #4
 8009750:	429d      	cmp	r5, r3
 8009752:	461a      	mov	r2, r3
 8009754:	d32f      	bcc.n	80097b6 <quorem+0xfe>
 8009756:	613c      	str	r4, [r7, #16]
 8009758:	4638      	mov	r0, r7
 800975a:	f001 f8cd 	bl	800a8f8 <__mcmp>
 800975e:	2800      	cmp	r0, #0
 8009760:	db25      	blt.n	80097ae <quorem+0xf6>
 8009762:	4628      	mov	r0, r5
 8009764:	f04f 0c00 	mov.w	ip, #0
 8009768:	3601      	adds	r6, #1
 800976a:	f858 1b04 	ldr.w	r1, [r8], #4
 800976e:	f8d0 e000 	ldr.w	lr, [r0]
 8009772:	b28b      	uxth	r3, r1
 8009774:	ebac 0303 	sub.w	r3, ip, r3
 8009778:	fa1f f28e 	uxth.w	r2, lr
 800977c:	4413      	add	r3, r2
 800977e:	0c0a      	lsrs	r2, r1, #16
 8009780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009788:	b29b      	uxth	r3, r3
 800978a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800978e:	45c1      	cmp	r9, r8
 8009790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009794:	f840 3b04 	str.w	r3, [r0], #4
 8009798:	d2e7      	bcs.n	800976a <quorem+0xb2>
 800979a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800979e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097a2:	b922      	cbnz	r2, 80097ae <quorem+0xf6>
 80097a4:	3b04      	subs	r3, #4
 80097a6:	429d      	cmp	r5, r3
 80097a8:	461a      	mov	r2, r3
 80097aa:	d30a      	bcc.n	80097c2 <quorem+0x10a>
 80097ac:	613c      	str	r4, [r7, #16]
 80097ae:	4630      	mov	r0, r6
 80097b0:	b003      	add	sp, #12
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	6812      	ldr	r2, [r2, #0]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d1cb      	bne.n	8009756 <quorem+0x9e>
 80097be:	3c01      	subs	r4, #1
 80097c0:	e7c6      	b.n	8009750 <quorem+0x98>
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	3b04      	subs	r3, #4
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	d1f0      	bne.n	80097ac <quorem+0xf4>
 80097ca:	3c01      	subs	r4, #1
 80097cc:	e7eb      	b.n	80097a6 <quorem+0xee>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7ee      	b.n	80097b0 <quorem+0xf8>
 80097d2:	0000      	movs	r0, r0
 80097d4:	0000      	movs	r0, r0
	...

080097d8 <_dtoa_r>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	4616      	mov	r6, r2
 80097de:	461f      	mov	r7, r3
 80097e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097e2:	b099      	sub	sp, #100	; 0x64
 80097e4:	4605      	mov	r5, r0
 80097e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097ee:	b974      	cbnz	r4, 800980e <_dtoa_r+0x36>
 80097f0:	2010      	movs	r0, #16
 80097f2:	f000 fde3 	bl	800a3bc <malloc>
 80097f6:	4602      	mov	r2, r0
 80097f8:	6268      	str	r0, [r5, #36]	; 0x24
 80097fa:	b920      	cbnz	r0, 8009806 <_dtoa_r+0x2e>
 80097fc:	21ea      	movs	r1, #234	; 0xea
 80097fe:	4bae      	ldr	r3, [pc, #696]	; (8009ab8 <_dtoa_r+0x2e0>)
 8009800:	48ae      	ldr	r0, [pc, #696]	; (8009abc <_dtoa_r+0x2e4>)
 8009802:	f001 fba1 	bl	800af48 <__assert_func>
 8009806:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800980a:	6004      	str	r4, [r0, #0]
 800980c:	60c4      	str	r4, [r0, #12]
 800980e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009810:	6819      	ldr	r1, [r3, #0]
 8009812:	b151      	cbz	r1, 800982a <_dtoa_r+0x52>
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	2301      	movs	r3, #1
 8009818:	4093      	lsls	r3, r2
 800981a:	604a      	str	r2, [r1, #4]
 800981c:	608b      	str	r3, [r1, #8]
 800981e:	4628      	mov	r0, r5
 8009820:	f000 fe30 	bl	800a484 <_Bfree>
 8009824:	2200      	movs	r2, #0
 8009826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	1e3b      	subs	r3, r7, #0
 800982c:	bfaf      	iteee	ge
 800982e:	2300      	movge	r3, #0
 8009830:	2201      	movlt	r2, #1
 8009832:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009836:	9305      	strlt	r3, [sp, #20]
 8009838:	bfa8      	it	ge
 800983a:	f8c8 3000 	strge.w	r3, [r8]
 800983e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009842:	4b9f      	ldr	r3, [pc, #636]	; (8009ac0 <_dtoa_r+0x2e8>)
 8009844:	bfb8      	it	lt
 8009846:	f8c8 2000 	strlt.w	r2, [r8]
 800984a:	ea33 0309 	bics.w	r3, r3, r9
 800984e:	d119      	bne.n	8009884 <_dtoa_r+0xac>
 8009850:	f242 730f 	movw	r3, #9999	; 0x270f
 8009854:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800985c:	4333      	orrs	r3, r6
 800985e:	f000 8580 	beq.w	800a362 <_dtoa_r+0xb8a>
 8009862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009864:	b953      	cbnz	r3, 800987c <_dtoa_r+0xa4>
 8009866:	4b97      	ldr	r3, [pc, #604]	; (8009ac4 <_dtoa_r+0x2ec>)
 8009868:	e022      	b.n	80098b0 <_dtoa_r+0xd8>
 800986a:	4b97      	ldr	r3, [pc, #604]	; (8009ac8 <_dtoa_r+0x2f0>)
 800986c:	9308      	str	r3, [sp, #32]
 800986e:	3308      	adds	r3, #8
 8009870:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	9808      	ldr	r0, [sp, #32]
 8009876:	b019      	add	sp, #100	; 0x64
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4b91      	ldr	r3, [pc, #580]	; (8009ac4 <_dtoa_r+0x2ec>)
 800987e:	9308      	str	r3, [sp, #32]
 8009880:	3303      	adds	r3, #3
 8009882:	e7f5      	b.n	8009870 <_dtoa_r+0x98>
 8009884:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009888:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800988c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009890:	2200      	movs	r2, #0
 8009892:	2300      	movs	r3, #0
 8009894:	f7f7 f8f4 	bl	8000a80 <__aeabi_dcmpeq>
 8009898:	4680      	mov	r8, r0
 800989a:	b158      	cbz	r0, 80098b4 <_dtoa_r+0xdc>
 800989c:	2301      	movs	r3, #1
 800989e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8559 	beq.w	800a35c <_dtoa_r+0xb84>
 80098aa:	4888      	ldr	r0, [pc, #544]	; (8009acc <_dtoa_r+0x2f4>)
 80098ac:	6018      	str	r0, [r3, #0]
 80098ae:	1e43      	subs	r3, r0, #1
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	e7df      	b.n	8009874 <_dtoa_r+0x9c>
 80098b4:	ab16      	add	r3, sp, #88	; 0x58
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	ab17      	add	r3, sp, #92	; 0x5c
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4628      	mov	r0, r5
 80098be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098c2:	f001 f8c5 	bl	800aa50 <__d2b>
 80098c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80098ca:	4682      	mov	sl, r0
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d07e      	beq.n	80099ce <_dtoa_r+0x1f6>
 80098d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80098da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80098e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80098e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098ea:	2200      	movs	r2, #0
 80098ec:	4b78      	ldr	r3, [pc, #480]	; (8009ad0 <_dtoa_r+0x2f8>)
 80098ee:	f7f6 fca7 	bl	8000240 <__aeabi_dsub>
 80098f2:	a36b      	add	r3, pc, #428	; (adr r3, 8009aa0 <_dtoa_r+0x2c8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fe5a 	bl	80005b0 <__aeabi_dmul>
 80098fc:	a36a      	add	r3, pc, #424	; (adr r3, 8009aa8 <_dtoa_r+0x2d0>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fc9f 	bl	8000244 <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	4620      	mov	r0, r4
 800990a:	460f      	mov	r7, r1
 800990c:	f7f6 fde6 	bl	80004dc <__aeabi_i2d>
 8009910:	a367      	add	r3, pc, #412	; (adr r3, 8009ab0 <_dtoa_r+0x2d8>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fe4b 	bl	80005b0 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fc8f 	bl	8000244 <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f7f7 f8f1 	bl	8000b10 <__aeabi_d2iz>
 800992e:	2200      	movs	r2, #0
 8009930:	4681      	mov	r9, r0
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f8ac 	bl	8000a94 <__aeabi_dcmplt>
 800993c:	b148      	cbz	r0, 8009952 <_dtoa_r+0x17a>
 800993e:	4648      	mov	r0, r9
 8009940:	f7f6 fdcc 	bl	80004dc <__aeabi_i2d>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	f7f7 f89a 	bl	8000a80 <__aeabi_dcmpeq>
 800994c:	b908      	cbnz	r0, 8009952 <_dtoa_r+0x17a>
 800994e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009952:	f1b9 0f16 	cmp.w	r9, #22
 8009956:	d857      	bhi.n	8009a08 <_dtoa_r+0x230>
 8009958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800995c:	4b5d      	ldr	r3, [pc, #372]	; (8009ad4 <_dtoa_r+0x2fc>)
 800995e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f7 f895 	bl	8000a94 <__aeabi_dcmplt>
 800996a:	2800      	cmp	r0, #0
 800996c:	d04e      	beq.n	8009a0c <_dtoa_r+0x234>
 800996e:	2300      	movs	r3, #0
 8009970:	f109 39ff 	add.w	r9, r9, #4294967295
 8009974:	930f      	str	r3, [sp, #60]	; 0x3c
 8009976:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009978:	1b1c      	subs	r4, r3, r4
 800997a:	1e63      	subs	r3, r4, #1
 800997c:	9309      	str	r3, [sp, #36]	; 0x24
 800997e:	bf49      	itett	mi
 8009980:	f1c4 0301 	rsbmi	r3, r4, #1
 8009984:	2300      	movpl	r3, #0
 8009986:	9306      	strmi	r3, [sp, #24]
 8009988:	2300      	movmi	r3, #0
 800998a:	bf54      	ite	pl
 800998c:	9306      	strpl	r3, [sp, #24]
 800998e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009990:	f1b9 0f00 	cmp.w	r9, #0
 8009994:	db3c      	blt.n	8009a10 <_dtoa_r+0x238>
 8009996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009998:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800999c:	444b      	add	r3, r9
 800999e:	9309      	str	r3, [sp, #36]	; 0x24
 80099a0:	2300      	movs	r3, #0
 80099a2:	930a      	str	r3, [sp, #40]	; 0x28
 80099a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d86c      	bhi.n	8009a84 <_dtoa_r+0x2ac>
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	bfc4      	itt	gt
 80099ae:	3b04      	subgt	r3, #4
 80099b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80099b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b4:	bfc8      	it	gt
 80099b6:	2400      	movgt	r4, #0
 80099b8:	f1a3 0302 	sub.w	r3, r3, #2
 80099bc:	bfd8      	it	le
 80099be:	2401      	movle	r4, #1
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	f200 808b 	bhi.w	8009adc <_dtoa_r+0x304>
 80099c6:	e8df f003 	tbb	[pc, r3]
 80099ca:	4f2d      	.short	0x4f2d
 80099cc:	5b4d      	.short	0x5b4d
 80099ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80099d2:	441c      	add	r4, r3
 80099d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80099d8:	2b20      	cmp	r3, #32
 80099da:	bfc3      	ittte	gt
 80099dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80099e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80099e8:	f1c3 0320 	rsble	r3, r3, #32
 80099ec:	bfc6      	itte	gt
 80099ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099f2:	4318      	orrgt	r0, r3
 80099f4:	fa06 f003 	lslle.w	r0, r6, r3
 80099f8:	f7f6 fd60 	bl	80004bc <__aeabi_ui2d>
 80099fc:	2301      	movs	r3, #1
 80099fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a02:	3c01      	subs	r4, #1
 8009a04:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a06:	e770      	b.n	80098ea <_dtoa_r+0x112>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7b3      	b.n	8009974 <_dtoa_r+0x19c>
 8009a0c:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a0e:	e7b2      	b.n	8009976 <_dtoa_r+0x19e>
 8009a10:	9b06      	ldr	r3, [sp, #24]
 8009a12:	eba3 0309 	sub.w	r3, r3, r9
 8009a16:	9306      	str	r3, [sp, #24]
 8009a18:	f1c9 0300 	rsb	r3, r9, #0
 8009a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a1e:	2300      	movs	r3, #0
 8009a20:	930e      	str	r3, [sp, #56]	; 0x38
 8009a22:	e7bf      	b.n	80099a4 <_dtoa_r+0x1cc>
 8009a24:	2300      	movs	r3, #0
 8009a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dc59      	bgt.n	8009ae2 <_dtoa_r+0x30a>
 8009a2e:	f04f 0b01 	mov.w	fp, #1
 8009a32:	465b      	mov	r3, fp
 8009a34:	f8cd b008 	str.w	fp, [sp, #8]
 8009a38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a40:	6042      	str	r2, [r0, #4]
 8009a42:	2204      	movs	r2, #4
 8009a44:	f102 0614 	add.w	r6, r2, #20
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	6841      	ldr	r1, [r0, #4]
 8009a4c:	d94f      	bls.n	8009aee <_dtoa_r+0x316>
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 fcd8 	bl	800a404 <_Balloc>
 8009a54:	9008      	str	r0, [sp, #32]
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d14d      	bne.n	8009af6 <_dtoa_r+0x31e>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a60:	4b1d      	ldr	r3, [pc, #116]	; (8009ad8 <_dtoa_r+0x300>)
 8009a62:	e6cd      	b.n	8009800 <_dtoa_r+0x28>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e7de      	b.n	8009a26 <_dtoa_r+0x24e>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a6e:	eb09 0b03 	add.w	fp, r9, r3
 8009a72:	f10b 0301 	add.w	r3, fp, #1
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	9302      	str	r3, [sp, #8]
 8009a7a:	bfb8      	it	lt
 8009a7c:	2301      	movlt	r3, #1
 8009a7e:	e7dd      	b.n	8009a3c <_dtoa_r+0x264>
 8009a80:	2301      	movs	r3, #1
 8009a82:	e7f2      	b.n	8009a6a <_dtoa_r+0x292>
 8009a84:	2401      	movs	r4, #1
 8009a86:	2300      	movs	r3, #0
 8009a88:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a8a:	9322      	str	r3, [sp, #136]	; 0x88
 8009a8c:	f04f 3bff 	mov.w	fp, #4294967295
 8009a90:	2200      	movs	r2, #0
 8009a92:	2312      	movs	r3, #18
 8009a94:	f8cd b008 	str.w	fp, [sp, #8]
 8009a98:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a9a:	e7cf      	b.n	8009a3c <_dtoa_r+0x264>
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	636f4361 	.word	0x636f4361
 8009aa4:	3fd287a7 	.word	0x3fd287a7
 8009aa8:	8b60c8b3 	.word	0x8b60c8b3
 8009aac:	3fc68a28 	.word	0x3fc68a28
 8009ab0:	509f79fb 	.word	0x509f79fb
 8009ab4:	3fd34413 	.word	0x3fd34413
 8009ab8:	0800dcd5 	.word	0x0800dcd5
 8009abc:	0800dcec 	.word	0x0800dcec
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	0800dcd1 	.word	0x0800dcd1
 8009ac8:	0800dcc8 	.word	0x0800dcc8
 8009acc:	0800dca5 	.word	0x0800dca5
 8009ad0:	3ff80000 	.word	0x3ff80000
 8009ad4:	0800dde8 	.word	0x0800dde8
 8009ad8:	0800dd4b 	.word	0x0800dd4b
 8009adc:	2301      	movs	r3, #1
 8009ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ae0:	e7d4      	b.n	8009a8c <_dtoa_r+0x2b4>
 8009ae2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009ae6:	465b      	mov	r3, fp
 8009ae8:	f8cd b008 	str.w	fp, [sp, #8]
 8009aec:	e7a6      	b.n	8009a3c <_dtoa_r+0x264>
 8009aee:	3101      	adds	r1, #1
 8009af0:	6041      	str	r1, [r0, #4]
 8009af2:	0052      	lsls	r2, r2, #1
 8009af4:	e7a6      	b.n	8009a44 <_dtoa_r+0x26c>
 8009af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009af8:	9a08      	ldr	r2, [sp, #32]
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	9b02      	ldr	r3, [sp, #8]
 8009afe:	2b0e      	cmp	r3, #14
 8009b00:	f200 80a8 	bhi.w	8009c54 <_dtoa_r+0x47c>
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	f000 80a5 	beq.w	8009c54 <_dtoa_r+0x47c>
 8009b0a:	f1b9 0f00 	cmp.w	r9, #0
 8009b0e:	dd34      	ble.n	8009b7a <_dtoa_r+0x3a2>
 8009b10:	4a9a      	ldr	r2, [pc, #616]	; (8009d7c <_dtoa_r+0x5a4>)
 8009b12:	f009 030f 	and.w	r3, r9, #15
 8009b16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b1a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009b1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b26:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009b2a:	d016      	beq.n	8009b5a <_dtoa_r+0x382>
 8009b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b30:	4b93      	ldr	r3, [pc, #588]	; (8009d80 <_dtoa_r+0x5a8>)
 8009b32:	2703      	movs	r7, #3
 8009b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b38:	f7f6 fe64 	bl	8000804 <__aeabi_ddiv>
 8009b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b40:	f004 040f 	and.w	r4, r4, #15
 8009b44:	4e8e      	ldr	r6, [pc, #568]	; (8009d80 <_dtoa_r+0x5a8>)
 8009b46:	b954      	cbnz	r4, 8009b5e <_dtoa_r+0x386>
 8009b48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b50:	f7f6 fe58 	bl	8000804 <__aeabi_ddiv>
 8009b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b58:	e029      	b.n	8009bae <_dtoa_r+0x3d6>
 8009b5a:	2702      	movs	r7, #2
 8009b5c:	e7f2      	b.n	8009b44 <_dtoa_r+0x36c>
 8009b5e:	07e1      	lsls	r1, r4, #31
 8009b60:	d508      	bpl.n	8009b74 <_dtoa_r+0x39c>
 8009b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b6a:	f7f6 fd21 	bl	80005b0 <__aeabi_dmul>
 8009b6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b72:	3701      	adds	r7, #1
 8009b74:	1064      	asrs	r4, r4, #1
 8009b76:	3608      	adds	r6, #8
 8009b78:	e7e5      	b.n	8009b46 <_dtoa_r+0x36e>
 8009b7a:	f000 80a5 	beq.w	8009cc8 <_dtoa_r+0x4f0>
 8009b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b82:	f1c9 0400 	rsb	r4, r9, #0
 8009b86:	4b7d      	ldr	r3, [pc, #500]	; (8009d7c <_dtoa_r+0x5a4>)
 8009b88:	f004 020f 	and.w	r2, r4, #15
 8009b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b94:	f7f6 fd0c 	bl	80005b0 <__aeabi_dmul>
 8009b98:	2702      	movs	r7, #2
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba0:	4e77      	ldr	r6, [pc, #476]	; (8009d80 <_dtoa_r+0x5a8>)
 8009ba2:	1124      	asrs	r4, r4, #4
 8009ba4:	2c00      	cmp	r4, #0
 8009ba6:	f040 8084 	bne.w	8009cb2 <_dtoa_r+0x4da>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1d2      	bne.n	8009b54 <_dtoa_r+0x37c>
 8009bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 808b 	beq.w	8009ccc <_dtoa_r+0x4f4>
 8009bb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009bba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009bbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4b6f      	ldr	r3, [pc, #444]	; (8009d84 <_dtoa_r+0x5ac>)
 8009bc6:	f7f6 ff65 	bl	8000a94 <__aeabi_dcmplt>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d07e      	beq.n	8009ccc <_dtoa_r+0x4f4>
 8009bce:	9b02      	ldr	r3, [sp, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d07b      	beq.n	8009ccc <_dtoa_r+0x4f4>
 8009bd4:	f1bb 0f00 	cmp.w	fp, #0
 8009bd8:	dd38      	ble.n	8009c4c <_dtoa_r+0x474>
 8009bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bde:	2200      	movs	r2, #0
 8009be0:	4b69      	ldr	r3, [pc, #420]	; (8009d88 <_dtoa_r+0x5b0>)
 8009be2:	f7f6 fce5 	bl	80005b0 <__aeabi_dmul>
 8009be6:	465c      	mov	r4, fp
 8009be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bec:	f109 38ff 	add.w	r8, r9, #4294967295
 8009bf0:	3701      	adds	r7, #1
 8009bf2:	4638      	mov	r0, r7
 8009bf4:	f7f6 fc72 	bl	80004dc <__aeabi_i2d>
 8009bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bfc:	f7f6 fcd8 	bl	80005b0 <__aeabi_dmul>
 8009c00:	2200      	movs	r2, #0
 8009c02:	4b62      	ldr	r3, [pc, #392]	; (8009d8c <_dtoa_r+0x5b4>)
 8009c04:	f7f6 fb1e 	bl	8000244 <__adddf3>
 8009c08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c10:	9611      	str	r6, [sp, #68]	; 0x44
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	d15d      	bne.n	8009cd2 <_dtoa_r+0x4fa>
 8009c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4b5c      	ldr	r3, [pc, #368]	; (8009d90 <_dtoa_r+0x5b8>)
 8009c1e:	f7f6 fb0f 	bl	8000240 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c2a:	4633      	mov	r3, r6
 8009c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c2e:	f7f6 ff4f 	bl	8000ad0 <__aeabi_dcmpgt>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	f040 829e 	bne.w	800a174 <_dtoa_r+0x99c>
 8009c38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c42:	f7f6 ff27 	bl	8000a94 <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	f040 8292 	bne.w	800a170 <_dtoa_r+0x998>
 8009c4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f2c0 8153 	blt.w	8009f02 <_dtoa_r+0x72a>
 8009c5c:	f1b9 0f0e 	cmp.w	r9, #14
 8009c60:	f300 814f 	bgt.w	8009f02 <_dtoa_r+0x72a>
 8009c64:	4b45      	ldr	r3, [pc, #276]	; (8009d7c <_dtoa_r+0x5a4>)
 8009c66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009c6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f280 80db 	bge.w	8009e30 <_dtoa_r+0x658>
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f300 80d7 	bgt.w	8009e30 <_dtoa_r+0x658>
 8009c82:	f040 8274 	bne.w	800a16e <_dtoa_r+0x996>
 8009c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4b40      	ldr	r3, [pc, #256]	; (8009d90 <_dtoa_r+0x5b8>)
 8009c8e:	f7f6 fc8f 	bl	80005b0 <__aeabi_dmul>
 8009c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c96:	f7f6 ff11 	bl	8000abc <__aeabi_dcmpge>
 8009c9a:	9c02      	ldr	r4, [sp, #8]
 8009c9c:	4626      	mov	r6, r4
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 824a 	bne.w	800a138 <_dtoa_r+0x960>
 8009ca4:	2331      	movs	r3, #49	; 0x31
 8009ca6:	9f08      	ldr	r7, [sp, #32]
 8009ca8:	f109 0901 	add.w	r9, r9, #1
 8009cac:	f807 3b01 	strb.w	r3, [r7], #1
 8009cb0:	e246      	b.n	800a140 <_dtoa_r+0x968>
 8009cb2:	07e2      	lsls	r2, r4, #31
 8009cb4:	d505      	bpl.n	8009cc2 <_dtoa_r+0x4ea>
 8009cb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cba:	f7f6 fc79 	bl	80005b0 <__aeabi_dmul>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	3701      	adds	r7, #1
 8009cc2:	1064      	asrs	r4, r4, #1
 8009cc4:	3608      	adds	r6, #8
 8009cc6:	e76d      	b.n	8009ba4 <_dtoa_r+0x3cc>
 8009cc8:	2702      	movs	r7, #2
 8009cca:	e770      	b.n	8009bae <_dtoa_r+0x3d6>
 8009ccc:	46c8      	mov	r8, r9
 8009cce:	9c02      	ldr	r4, [sp, #8]
 8009cd0:	e78f      	b.n	8009bf2 <_dtoa_r+0x41a>
 8009cd2:	9908      	ldr	r1, [sp, #32]
 8009cd4:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <_dtoa_r+0x5a4>)
 8009cd6:	4421      	add	r1, r4
 8009cd8:	9112      	str	r1, [sp, #72]	; 0x48
 8009cda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ce0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009ce4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d055      	beq.n	8009d98 <_dtoa_r+0x5c0>
 8009cec:	2000      	movs	r0, #0
 8009cee:	4929      	ldr	r1, [pc, #164]	; (8009d94 <_dtoa_r+0x5bc>)
 8009cf0:	f7f6 fd88 	bl	8000804 <__aeabi_ddiv>
 8009cf4:	463b      	mov	r3, r7
 8009cf6:	4632      	mov	r2, r6
 8009cf8:	f7f6 faa2 	bl	8000240 <__aeabi_dsub>
 8009cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d00:	9f08      	ldr	r7, [sp, #32]
 8009d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d06:	f7f6 ff03 	bl	8000b10 <__aeabi_d2iz>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	f7f6 fbe6 	bl	80004dc <__aeabi_i2d>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d18:	f7f6 fa92 	bl	8000240 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	3430      	adds	r4, #48	; 0x30
 8009d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d2a:	f807 4b01 	strb.w	r4, [r7], #1
 8009d2e:	f7f6 feb1 	bl	8000a94 <__aeabi_dcmplt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d174      	bne.n	8009e20 <_dtoa_r+0x648>
 8009d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	4911      	ldr	r1, [pc, #68]	; (8009d84 <_dtoa_r+0x5ac>)
 8009d3e:	f7f6 fa7f 	bl	8000240 <__aeabi_dsub>
 8009d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d46:	f7f6 fea5 	bl	8000a94 <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f040 80b6 	bne.w	8009ebc <_dtoa_r+0x6e4>
 8009d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d52:	429f      	cmp	r7, r3
 8009d54:	f43f af7a 	beq.w	8009c4c <_dtoa_r+0x474>
 8009d58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <_dtoa_r+0x5b0>)
 8009d60:	f7f6 fc26 	bl	80005b0 <__aeabi_dmul>
 8009d64:	2200      	movs	r2, #0
 8009d66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d6e:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <_dtoa_r+0x5b0>)
 8009d70:	f7f6 fc1e 	bl	80005b0 <__aeabi_dmul>
 8009d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d78:	e7c3      	b.n	8009d02 <_dtoa_r+0x52a>
 8009d7a:	bf00      	nop
 8009d7c:	0800dde8 	.word	0x0800dde8
 8009d80:	0800ddc0 	.word	0x0800ddc0
 8009d84:	3ff00000 	.word	0x3ff00000
 8009d88:	40240000 	.word	0x40240000
 8009d8c:	401c0000 	.word	0x401c0000
 8009d90:	40140000 	.word	0x40140000
 8009d94:	3fe00000 	.word	0x3fe00000
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fc08 	bl	80005b0 <__aeabi_dmul>
 8009da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009da2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009da6:	9c08      	ldr	r4, [sp, #32]
 8009da8:	9314      	str	r3, [sp, #80]	; 0x50
 8009daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dae:	f7f6 feaf 	bl	8000b10 <__aeabi_d2iz>
 8009db2:	9015      	str	r0, [sp, #84]	; 0x54
 8009db4:	f7f6 fb92 	bl	80004dc <__aeabi_i2d>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc0:	f7f6 fa3e 	bl	8000240 <__aeabi_dsub>
 8009dc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	3330      	adds	r3, #48	; 0x30
 8009dca:	f804 3b01 	strb.w	r3, [r4], #1
 8009dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	429c      	cmp	r4, r3
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	d124      	bne.n	8009e24 <_dtoa_r+0x64c>
 8009dda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dde:	4bb3      	ldr	r3, [pc, #716]	; (800a0ac <_dtoa_r+0x8d4>)
 8009de0:	f7f6 fa30 	bl	8000244 <__adddf3>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4630      	mov	r0, r6
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f6 fe70 	bl	8000ad0 <__aeabi_dcmpgt>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d162      	bne.n	8009eba <_dtoa_r+0x6e2>
 8009df4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009df8:	2000      	movs	r0, #0
 8009dfa:	49ac      	ldr	r1, [pc, #688]	; (800a0ac <_dtoa_r+0x8d4>)
 8009dfc:	f7f6 fa20 	bl	8000240 <__aeabi_dsub>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4630      	mov	r0, r6
 8009e06:	4639      	mov	r1, r7
 8009e08:	f7f6 fe44 	bl	8000a94 <__aeabi_dcmplt>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	f43f af1d 	beq.w	8009c4c <_dtoa_r+0x474>
 8009e12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e14:	1e7b      	subs	r3, r7, #1
 8009e16:	9314      	str	r3, [sp, #80]	; 0x50
 8009e18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e1c:	2b30      	cmp	r3, #48	; 0x30
 8009e1e:	d0f8      	beq.n	8009e12 <_dtoa_r+0x63a>
 8009e20:	46c1      	mov	r9, r8
 8009e22:	e03a      	b.n	8009e9a <_dtoa_r+0x6c2>
 8009e24:	4ba2      	ldr	r3, [pc, #648]	; (800a0b0 <_dtoa_r+0x8d8>)
 8009e26:	f7f6 fbc3 	bl	80005b0 <__aeabi_dmul>
 8009e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e2e:	e7bc      	b.n	8009daa <_dtoa_r+0x5d2>
 8009e30:	9f08      	ldr	r7, [sp, #32]
 8009e32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e3a:	f7f6 fce3 	bl	8000804 <__aeabi_ddiv>
 8009e3e:	f7f6 fe67 	bl	8000b10 <__aeabi_d2iz>
 8009e42:	4604      	mov	r4, r0
 8009e44:	f7f6 fb4a 	bl	80004dc <__aeabi_i2d>
 8009e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e4c:	f7f6 fbb0 	bl	80005b0 <__aeabi_dmul>
 8009e50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e54:	460b      	mov	r3, r1
 8009e56:	4602      	mov	r2, r0
 8009e58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e5c:	f7f6 f9f0 	bl	8000240 <__aeabi_dsub>
 8009e60:	f807 6b01 	strb.w	r6, [r7], #1
 8009e64:	9e08      	ldr	r6, [sp, #32]
 8009e66:	9b02      	ldr	r3, [sp, #8]
 8009e68:	1bbe      	subs	r6, r7, r6
 8009e6a:	42b3      	cmp	r3, r6
 8009e6c:	d13a      	bne.n	8009ee4 <_dtoa_r+0x70c>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	f7f6 f9e7 	bl	8000244 <__adddf3>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e82:	f7f6 fe25 	bl	8000ad0 <__aeabi_dcmpgt>
 8009e86:	bb58      	cbnz	r0, 8009ee0 <_dtoa_r+0x708>
 8009e88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e90:	f7f6 fdf6 	bl	8000a80 <__aeabi_dcmpeq>
 8009e94:	b108      	cbz	r0, 8009e9a <_dtoa_r+0x6c2>
 8009e96:	07e1      	lsls	r1, r4, #31
 8009e98:	d422      	bmi.n	8009ee0 <_dtoa_r+0x708>
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	4651      	mov	r1, sl
 8009e9e:	f000 faf1 	bl	800a484 <_Bfree>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	703b      	strb	r3, [r7, #0]
 8009ea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ea8:	f109 0001 	add.w	r0, r9, #1
 8009eac:	6018      	str	r0, [r3, #0]
 8009eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f43f acdf 	beq.w	8009874 <_dtoa_r+0x9c>
 8009eb6:	601f      	str	r7, [r3, #0]
 8009eb8:	e4dc      	b.n	8009874 <_dtoa_r+0x9c>
 8009eba:	4627      	mov	r7, r4
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	461f      	mov	r7, r3
 8009ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec4:	2a39      	cmp	r2, #57	; 0x39
 8009ec6:	d107      	bne.n	8009ed8 <_dtoa_r+0x700>
 8009ec8:	9a08      	ldr	r2, [sp, #32]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d1f7      	bne.n	8009ebe <_dtoa_r+0x6e6>
 8009ece:	2230      	movs	r2, #48	; 0x30
 8009ed0:	9908      	ldr	r1, [sp, #32]
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	700a      	strb	r2, [r1, #0]
 8009ed8:	781a      	ldrb	r2, [r3, #0]
 8009eda:	3201      	adds	r2, #1
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	e79f      	b.n	8009e20 <_dtoa_r+0x648>
 8009ee0:	46c8      	mov	r8, r9
 8009ee2:	e7eb      	b.n	8009ebc <_dtoa_r+0x6e4>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4b72      	ldr	r3, [pc, #456]	; (800a0b0 <_dtoa_r+0x8d8>)
 8009ee8:	f7f6 fb62 	bl	80005b0 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f7f6 fdc2 	bl	8000a80 <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d098      	beq.n	8009e32 <_dtoa_r+0x65a>
 8009f00:	e7cb      	b.n	8009e9a <_dtoa_r+0x6c2>
 8009f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f04:	2a00      	cmp	r2, #0
 8009f06:	f000 80cd 	beq.w	800a0a4 <_dtoa_r+0x8cc>
 8009f0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f0c:	2a01      	cmp	r2, #1
 8009f0e:	f300 80af 	bgt.w	800a070 <_dtoa_r+0x898>
 8009f12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f14:	2a00      	cmp	r2, #0
 8009f16:	f000 80a7 	beq.w	800a068 <_dtoa_r+0x890>
 8009f1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f20:	9f06      	ldr	r7, [sp, #24]
 8009f22:	9a06      	ldr	r2, [sp, #24]
 8009f24:	2101      	movs	r1, #1
 8009f26:	441a      	add	r2, r3
 8009f28:	9206      	str	r2, [sp, #24]
 8009f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	441a      	add	r2, r3
 8009f30:	9209      	str	r2, [sp, #36]	; 0x24
 8009f32:	f000 fb61 	bl	800a5f8 <__i2b>
 8009f36:	4606      	mov	r6, r0
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	dd0c      	ble.n	8009f56 <_dtoa_r+0x77e>
 8009f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dd09      	ble.n	8009f56 <_dtoa_r+0x77e>
 8009f42:	42bb      	cmp	r3, r7
 8009f44:	bfa8      	it	ge
 8009f46:	463b      	movge	r3, r7
 8009f48:	9a06      	ldr	r2, [sp, #24]
 8009f4a:	1aff      	subs	r7, r7, r3
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	9309      	str	r3, [sp, #36]	; 0x24
 8009f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f58:	b1f3      	cbz	r3, 8009f98 <_dtoa_r+0x7c0>
 8009f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80a9 	beq.w	800a0b4 <_dtoa_r+0x8dc>
 8009f62:	2c00      	cmp	r4, #0
 8009f64:	dd10      	ble.n	8009f88 <_dtoa_r+0x7b0>
 8009f66:	4631      	mov	r1, r6
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fbfe 	bl	800a76c <__pow5mult>
 8009f70:	4652      	mov	r2, sl
 8009f72:	4601      	mov	r1, r0
 8009f74:	4606      	mov	r6, r0
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 fb54 	bl	800a624 <__multiply>
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4651      	mov	r1, sl
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 fa7f 	bl	800a484 <_Bfree>
 8009f86:	46c2      	mov	sl, r8
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	1b1a      	subs	r2, r3, r4
 8009f8c:	d004      	beq.n	8009f98 <_dtoa_r+0x7c0>
 8009f8e:	4651      	mov	r1, sl
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 fbeb 	bl	800a76c <__pow5mult>
 8009f96:	4682      	mov	sl, r0
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f000 fb2c 	bl	800a5f8 <__i2b>
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f340 8087 	ble.w	800a0b8 <_dtoa_r+0x8e0>
 8009faa:	461a      	mov	r2, r3
 8009fac:	4601      	mov	r1, r0
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 fbdc 	bl	800a76c <__pow5mult>
 8009fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f340 8080 	ble.w	800a0be <_dtoa_r+0x8e6>
 8009fbe:	f04f 0800 	mov.w	r8, #0
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fc8:	6918      	ldr	r0, [r3, #16]
 8009fca:	f000 fac7 	bl	800a55c <__hi0bits>
 8009fce:	f1c0 0020 	rsb	r0, r0, #32
 8009fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd4:	4418      	add	r0, r3
 8009fd6:	f010 001f 	ands.w	r0, r0, #31
 8009fda:	f000 8092 	beq.w	800a102 <_dtoa_r+0x92a>
 8009fde:	f1c0 0320 	rsb	r3, r0, #32
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	f340 808a 	ble.w	800a0fc <_dtoa_r+0x924>
 8009fe8:	f1c0 001c 	rsb	r0, r0, #28
 8009fec:	9b06      	ldr	r3, [sp, #24]
 8009fee:	4407      	add	r7, r0
 8009ff0:	4403      	add	r3, r0
 8009ff2:	9306      	str	r3, [sp, #24]
 8009ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff6:	4403      	add	r3, r0
 8009ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffa:	9b06      	ldr	r3, [sp, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd05      	ble.n	800a00c <_dtoa_r+0x834>
 800a000:	4651      	mov	r1, sl
 800a002:	461a      	mov	r2, r3
 800a004:	4628      	mov	r0, r5
 800a006:	f000 fc0b 	bl	800a820 <__lshift>
 800a00a:	4682      	mov	sl, r0
 800a00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dd05      	ble.n	800a01e <_dtoa_r+0x846>
 800a012:	4621      	mov	r1, r4
 800a014:	461a      	mov	r2, r3
 800a016:	4628      	mov	r0, r5
 800a018:	f000 fc02 	bl	800a820 <__lshift>
 800a01c:	4604      	mov	r4, r0
 800a01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d070      	beq.n	800a106 <_dtoa_r+0x92e>
 800a024:	4621      	mov	r1, r4
 800a026:	4650      	mov	r0, sl
 800a028:	f000 fc66 	bl	800a8f8 <__mcmp>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	da6a      	bge.n	800a106 <_dtoa_r+0x92e>
 800a030:	2300      	movs	r3, #0
 800a032:	4651      	mov	r1, sl
 800a034:	220a      	movs	r2, #10
 800a036:	4628      	mov	r0, r5
 800a038:	f000 fa46 	bl	800a4c8 <__multadd>
 800a03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a03e:	4682      	mov	sl, r0
 800a040:	f109 39ff 	add.w	r9, r9, #4294967295
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 8193 	beq.w	800a370 <_dtoa_r+0xb98>
 800a04a:	4631      	mov	r1, r6
 800a04c:	2300      	movs	r3, #0
 800a04e:	220a      	movs	r2, #10
 800a050:	4628      	mov	r0, r5
 800a052:	f000 fa39 	bl	800a4c8 <__multadd>
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	4606      	mov	r6, r0
 800a05c:	f300 8093 	bgt.w	800a186 <_dtoa_r+0x9ae>
 800a060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a062:	2b02      	cmp	r3, #2
 800a064:	dc57      	bgt.n	800a116 <_dtoa_r+0x93e>
 800a066:	e08e      	b.n	800a186 <_dtoa_r+0x9ae>
 800a068:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a06a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a06e:	e756      	b.n	8009f1e <_dtoa_r+0x746>
 800a070:	9b02      	ldr	r3, [sp, #8]
 800a072:	1e5c      	subs	r4, r3, #1
 800a074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a076:	42a3      	cmp	r3, r4
 800a078:	bfb7      	itett	lt
 800a07a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a07c:	1b1c      	subge	r4, r3, r4
 800a07e:	1ae2      	sublt	r2, r4, r3
 800a080:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a082:	bfbe      	ittt	lt
 800a084:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a086:	189b      	addlt	r3, r3, r2
 800a088:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a08a:	9b02      	ldr	r3, [sp, #8]
 800a08c:	bfb8      	it	lt
 800a08e:	2400      	movlt	r4, #0
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfbb      	ittet	lt
 800a094:	9b06      	ldrlt	r3, [sp, #24]
 800a096:	9a02      	ldrlt	r2, [sp, #8]
 800a098:	9f06      	ldrge	r7, [sp, #24]
 800a09a:	1a9f      	sublt	r7, r3, r2
 800a09c:	bfac      	ite	ge
 800a09e:	9b02      	ldrge	r3, [sp, #8]
 800a0a0:	2300      	movlt	r3, #0
 800a0a2:	e73e      	b.n	8009f22 <_dtoa_r+0x74a>
 800a0a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0a6:	9f06      	ldr	r7, [sp, #24]
 800a0a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0aa:	e745      	b.n	8009f38 <_dtoa_r+0x760>
 800a0ac:	3fe00000 	.word	0x3fe00000
 800a0b0:	40240000 	.word	0x40240000
 800a0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b6:	e76a      	b.n	8009f8e <_dtoa_r+0x7b6>
 800a0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	dc19      	bgt.n	800a0f2 <_dtoa_r+0x91a>
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	b9bb      	cbnz	r3, 800a0f2 <_dtoa_r+0x91a>
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c8:	b99b      	cbnz	r3, 800a0f2 <_dtoa_r+0x91a>
 800a0ca:	9b05      	ldr	r3, [sp, #20]
 800a0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	0d1b      	lsrs	r3, r3, #20
 800a0d2:	051b      	lsls	r3, r3, #20
 800a0d4:	b183      	cbz	r3, 800a0f8 <_dtoa_r+0x920>
 800a0d6:	f04f 0801 	mov.w	r8, #1
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	9306      	str	r3, [sp, #24]
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f47f af6a 	bne.w	8009fc2 <_dtoa_r+0x7ea>
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e76f      	b.n	8009fd2 <_dtoa_r+0x7fa>
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	e7f6      	b.n	800a0e6 <_dtoa_r+0x90e>
 800a0f8:	4698      	mov	r8, r3
 800a0fa:	e7f4      	b.n	800a0e6 <_dtoa_r+0x90e>
 800a0fc:	f43f af7d 	beq.w	8009ffa <_dtoa_r+0x822>
 800a100:	4618      	mov	r0, r3
 800a102:	301c      	adds	r0, #28
 800a104:	e772      	b.n	8009fec <_dtoa_r+0x814>
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dc36      	bgt.n	800a17a <_dtoa_r+0x9a2>
 800a10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a10e:	2b02      	cmp	r3, #2
 800a110:	dd33      	ble.n	800a17a <_dtoa_r+0x9a2>
 800a112:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a116:	f1bb 0f00 	cmp.w	fp, #0
 800a11a:	d10d      	bne.n	800a138 <_dtoa_r+0x960>
 800a11c:	4621      	mov	r1, r4
 800a11e:	465b      	mov	r3, fp
 800a120:	2205      	movs	r2, #5
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f9d0 	bl	800a4c8 <__multadd>
 800a128:	4601      	mov	r1, r0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4650      	mov	r0, sl
 800a12e:	f000 fbe3 	bl	800a8f8 <__mcmp>
 800a132:	2800      	cmp	r0, #0
 800a134:	f73f adb6 	bgt.w	8009ca4 <_dtoa_r+0x4cc>
 800a138:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a13a:	9f08      	ldr	r7, [sp, #32]
 800a13c:	ea6f 0903 	mvn.w	r9, r3
 800a140:	f04f 0800 	mov.w	r8, #0
 800a144:	4621      	mov	r1, r4
 800a146:	4628      	mov	r0, r5
 800a148:	f000 f99c 	bl	800a484 <_Bfree>
 800a14c:	2e00      	cmp	r6, #0
 800a14e:	f43f aea4 	beq.w	8009e9a <_dtoa_r+0x6c2>
 800a152:	f1b8 0f00 	cmp.w	r8, #0
 800a156:	d005      	beq.n	800a164 <_dtoa_r+0x98c>
 800a158:	45b0      	cmp	r8, r6
 800a15a:	d003      	beq.n	800a164 <_dtoa_r+0x98c>
 800a15c:	4641      	mov	r1, r8
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f990 	bl	800a484 <_Bfree>
 800a164:	4631      	mov	r1, r6
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f98c 	bl	800a484 <_Bfree>
 800a16c:	e695      	b.n	8009e9a <_dtoa_r+0x6c2>
 800a16e:	2400      	movs	r4, #0
 800a170:	4626      	mov	r6, r4
 800a172:	e7e1      	b.n	800a138 <_dtoa_r+0x960>
 800a174:	46c1      	mov	r9, r8
 800a176:	4626      	mov	r6, r4
 800a178:	e594      	b.n	8009ca4 <_dtoa_r+0x4cc>
 800a17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80fc 	beq.w	800a37e <_dtoa_r+0xba6>
 800a186:	2f00      	cmp	r7, #0
 800a188:	dd05      	ble.n	800a196 <_dtoa_r+0x9be>
 800a18a:	4631      	mov	r1, r6
 800a18c:	463a      	mov	r2, r7
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 fb46 	bl	800a820 <__lshift>
 800a194:	4606      	mov	r6, r0
 800a196:	f1b8 0f00 	cmp.w	r8, #0
 800a19a:	d05c      	beq.n	800a256 <_dtoa_r+0xa7e>
 800a19c:	4628      	mov	r0, r5
 800a19e:	6871      	ldr	r1, [r6, #4]
 800a1a0:	f000 f930 	bl	800a404 <_Balloc>
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	b928      	cbnz	r0, 800a1b4 <_dtoa_r+0x9dc>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ae:	4b7e      	ldr	r3, [pc, #504]	; (800a3a8 <_dtoa_r+0xbd0>)
 800a1b0:	f7ff bb26 	b.w	8009800 <_dtoa_r+0x28>
 800a1b4:	6932      	ldr	r2, [r6, #16]
 800a1b6:	f106 010c 	add.w	r1, r6, #12
 800a1ba:	3202      	adds	r2, #2
 800a1bc:	0092      	lsls	r2, r2, #2
 800a1be:	300c      	adds	r0, #12
 800a1c0:	f000 f912 	bl	800a3e8 <memcpy>
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	f000 fb29 	bl	800a820 <__lshift>
 800a1ce:	46b0      	mov	r8, r6
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	9302      	str	r3, [sp, #8]
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	445b      	add	r3, fp
 800a1dc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	f103 3bff 	add.w	fp, r3, #4294967295
 800a1f0:	f7ff fa62 	bl	80096b8 <quorem>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	9004      	str	r0, [sp, #16]
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a200:	f000 fb7a 	bl	800a8f8 <__mcmp>
 800a204:	4632      	mov	r2, r6
 800a206:	9006      	str	r0, [sp, #24]
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f000 fb90 	bl	800a930 <__mdiff>
 800a210:	68c2      	ldr	r2, [r0, #12]
 800a212:	4607      	mov	r7, r0
 800a214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a216:	bb02      	cbnz	r2, 800a25a <_dtoa_r+0xa82>
 800a218:	4601      	mov	r1, r0
 800a21a:	4650      	mov	r0, sl
 800a21c:	f000 fb6c 	bl	800a8f8 <__mcmp>
 800a220:	4602      	mov	r2, r0
 800a222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a224:	4639      	mov	r1, r7
 800a226:	4628      	mov	r0, r5
 800a228:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a22c:	f000 f92a 	bl	800a484 <_Bfree>
 800a230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a234:	9f02      	ldr	r7, [sp, #8]
 800a236:	ea43 0102 	orr.w	r1, r3, r2
 800a23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23c:	430b      	orrs	r3, r1
 800a23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a240:	d10d      	bne.n	800a25e <_dtoa_r+0xa86>
 800a242:	2b39      	cmp	r3, #57	; 0x39
 800a244:	d027      	beq.n	800a296 <_dtoa_r+0xabe>
 800a246:	9a06      	ldr	r2, [sp, #24]
 800a248:	2a00      	cmp	r2, #0
 800a24a:	dd01      	ble.n	800a250 <_dtoa_r+0xa78>
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	3331      	adds	r3, #49	; 0x31
 800a250:	f88b 3000 	strb.w	r3, [fp]
 800a254:	e776      	b.n	800a144 <_dtoa_r+0x96c>
 800a256:	4630      	mov	r0, r6
 800a258:	e7b9      	b.n	800a1ce <_dtoa_r+0x9f6>
 800a25a:	2201      	movs	r2, #1
 800a25c:	e7e2      	b.n	800a224 <_dtoa_r+0xa4c>
 800a25e:	9906      	ldr	r1, [sp, #24]
 800a260:	2900      	cmp	r1, #0
 800a262:	db04      	blt.n	800a26e <_dtoa_r+0xa96>
 800a264:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a266:	4301      	orrs	r1, r0
 800a268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26a:	4301      	orrs	r1, r0
 800a26c:	d120      	bne.n	800a2b0 <_dtoa_r+0xad8>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	ddee      	ble.n	800a250 <_dtoa_r+0xa78>
 800a272:	4651      	mov	r1, sl
 800a274:	2201      	movs	r2, #1
 800a276:	4628      	mov	r0, r5
 800a278:	9302      	str	r3, [sp, #8]
 800a27a:	f000 fad1 	bl	800a820 <__lshift>
 800a27e:	4621      	mov	r1, r4
 800a280:	4682      	mov	sl, r0
 800a282:	f000 fb39 	bl	800a8f8 <__mcmp>
 800a286:	2800      	cmp	r0, #0
 800a288:	9b02      	ldr	r3, [sp, #8]
 800a28a:	dc02      	bgt.n	800a292 <_dtoa_r+0xaba>
 800a28c:	d1e0      	bne.n	800a250 <_dtoa_r+0xa78>
 800a28e:	07da      	lsls	r2, r3, #31
 800a290:	d5de      	bpl.n	800a250 <_dtoa_r+0xa78>
 800a292:	2b39      	cmp	r3, #57	; 0x39
 800a294:	d1da      	bne.n	800a24c <_dtoa_r+0xa74>
 800a296:	2339      	movs	r3, #57	; 0x39
 800a298:	f88b 3000 	strb.w	r3, [fp]
 800a29c:	463b      	mov	r3, r7
 800a29e:	461f      	mov	r7, r3
 800a2a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	2a39      	cmp	r2, #57	; 0x39
 800a2a8:	d050      	beq.n	800a34c <_dtoa_r+0xb74>
 800a2aa:	3201      	adds	r2, #1
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	e749      	b.n	800a144 <_dtoa_r+0x96c>
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	dd03      	ble.n	800a2bc <_dtoa_r+0xae4>
 800a2b4:	2b39      	cmp	r3, #57	; 0x39
 800a2b6:	d0ee      	beq.n	800a296 <_dtoa_r+0xabe>
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	e7c9      	b.n	800a250 <_dtoa_r+0xa78>
 800a2bc:	9a02      	ldr	r2, [sp, #8]
 800a2be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2c4:	428a      	cmp	r2, r1
 800a2c6:	d02a      	beq.n	800a31e <_dtoa_r+0xb46>
 800a2c8:	4651      	mov	r1, sl
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	220a      	movs	r2, #10
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f8fa 	bl	800a4c8 <__multadd>
 800a2d4:	45b0      	cmp	r8, r6
 800a2d6:	4682      	mov	sl, r0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	f04f 020a 	mov.w	r2, #10
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	d107      	bne.n	800a2f6 <_dtoa_r+0xb1e>
 800a2e6:	f000 f8ef 	bl	800a4c8 <__multadd>
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	9302      	str	r3, [sp, #8]
 800a2f4:	e777      	b.n	800a1e6 <_dtoa_r+0xa0e>
 800a2f6:	f000 f8e7 	bl	800a4c8 <__multadd>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4680      	mov	r8, r0
 800a2fe:	2300      	movs	r3, #0
 800a300:	220a      	movs	r2, #10
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f8e0 	bl	800a4c8 <__multadd>
 800a308:	4606      	mov	r6, r0
 800a30a:	e7f0      	b.n	800a2ee <_dtoa_r+0xb16>
 800a30c:	f1bb 0f00 	cmp.w	fp, #0
 800a310:	bfcc      	ite	gt
 800a312:	465f      	movgt	r7, fp
 800a314:	2701      	movle	r7, #1
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	9a08      	ldr	r2, [sp, #32]
 800a31c:	4417      	add	r7, r2
 800a31e:	4651      	mov	r1, sl
 800a320:	2201      	movs	r2, #1
 800a322:	4628      	mov	r0, r5
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	f000 fa7b 	bl	800a820 <__lshift>
 800a32a:	4621      	mov	r1, r4
 800a32c:	4682      	mov	sl, r0
 800a32e:	f000 fae3 	bl	800a8f8 <__mcmp>
 800a332:	2800      	cmp	r0, #0
 800a334:	dcb2      	bgt.n	800a29c <_dtoa_r+0xac4>
 800a336:	d102      	bne.n	800a33e <_dtoa_r+0xb66>
 800a338:	9b02      	ldr	r3, [sp, #8]
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d4ae      	bmi.n	800a29c <_dtoa_r+0xac4>
 800a33e:	463b      	mov	r3, r7
 800a340:	461f      	mov	r7, r3
 800a342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a346:	2a30      	cmp	r2, #48	; 0x30
 800a348:	d0fa      	beq.n	800a340 <_dtoa_r+0xb68>
 800a34a:	e6fb      	b.n	800a144 <_dtoa_r+0x96c>
 800a34c:	9a08      	ldr	r2, [sp, #32]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d1a5      	bne.n	800a29e <_dtoa_r+0xac6>
 800a352:	2331      	movs	r3, #49	; 0x31
 800a354:	f109 0901 	add.w	r9, r9, #1
 800a358:	7013      	strb	r3, [r2, #0]
 800a35a:	e6f3      	b.n	800a144 <_dtoa_r+0x96c>
 800a35c:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <_dtoa_r+0xbd4>)
 800a35e:	f7ff baa7 	b.w	80098b0 <_dtoa_r+0xd8>
 800a362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f aa80 	bne.w	800986a <_dtoa_r+0x92>
 800a36a:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <_dtoa_r+0xbd8>)
 800a36c:	f7ff baa0 	b.w	80098b0 <_dtoa_r+0xd8>
 800a370:	f1bb 0f00 	cmp.w	fp, #0
 800a374:	dc03      	bgt.n	800a37e <_dtoa_r+0xba6>
 800a376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a378:	2b02      	cmp	r3, #2
 800a37a:	f73f aecc 	bgt.w	800a116 <_dtoa_r+0x93e>
 800a37e:	9f08      	ldr	r7, [sp, #32]
 800a380:	4621      	mov	r1, r4
 800a382:	4650      	mov	r0, sl
 800a384:	f7ff f998 	bl	80096b8 <quorem>
 800a388:	9a08      	ldr	r2, [sp, #32]
 800a38a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a38e:	f807 3b01 	strb.w	r3, [r7], #1
 800a392:	1aba      	subs	r2, r7, r2
 800a394:	4593      	cmp	fp, r2
 800a396:	ddb9      	ble.n	800a30c <_dtoa_r+0xb34>
 800a398:	4651      	mov	r1, sl
 800a39a:	2300      	movs	r3, #0
 800a39c:	220a      	movs	r2, #10
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 f892 	bl	800a4c8 <__multadd>
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	e7eb      	b.n	800a380 <_dtoa_r+0xba8>
 800a3a8:	0800dd4b 	.word	0x0800dd4b
 800a3ac:	0800dca4 	.word	0x0800dca4
 800a3b0:	0800dcc8 	.word	0x0800dcc8

0800a3b4 <_localeconv_r>:
 800a3b4:	4800      	ldr	r0, [pc, #0]	; (800a3b8 <_localeconv_r+0x4>)
 800a3b6:	4770      	bx	lr
 800a3b8:	20000178 	.word	0x20000178

0800a3bc <malloc>:
 800a3bc:	4b02      	ldr	r3, [pc, #8]	; (800a3c8 <malloc+0xc>)
 800a3be:	4601      	mov	r1, r0
 800a3c0:	6818      	ldr	r0, [r3, #0]
 800a3c2:	f000 bbfb 	b.w	800abbc <_malloc_r>
 800a3c6:	bf00      	nop
 800a3c8:	20000024 	.word	0x20000024

0800a3cc <memchr>:
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	b2c9      	uxtb	r1, r1
 800a3d2:	4402      	add	r2, r0
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	d101      	bne.n	800a3de <memchr+0x12>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e003      	b.n	800a3e6 <memchr+0x1a>
 800a3de:	7804      	ldrb	r4, [r0, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	428c      	cmp	r4, r1
 800a3e4:	d1f6      	bne.n	800a3d4 <memchr+0x8>
 800a3e6:	bd10      	pop	{r4, pc}

0800a3e8 <memcpy>:
 800a3e8:	440a      	add	r2, r1
 800a3ea:	4291      	cmp	r1, r2
 800a3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f0:	d100      	bne.n	800a3f4 <memcpy+0xc>
 800a3f2:	4770      	bx	lr
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fa:	4291      	cmp	r1, r2
 800a3fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a400:	d1f9      	bne.n	800a3f6 <memcpy+0xe>
 800a402:	bd10      	pop	{r4, pc}

0800a404 <_Balloc>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	b976      	cbnz	r6, 800a42c <_Balloc+0x28>
 800a40e:	2010      	movs	r0, #16
 800a410:	f7ff ffd4 	bl	800a3bc <malloc>
 800a414:	4602      	mov	r2, r0
 800a416:	6260      	str	r0, [r4, #36]	; 0x24
 800a418:	b920      	cbnz	r0, 800a424 <_Balloc+0x20>
 800a41a:	2166      	movs	r1, #102	; 0x66
 800a41c:	4b17      	ldr	r3, [pc, #92]	; (800a47c <_Balloc+0x78>)
 800a41e:	4818      	ldr	r0, [pc, #96]	; (800a480 <_Balloc+0x7c>)
 800a420:	f000 fd92 	bl	800af48 <__assert_func>
 800a424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a428:	6006      	str	r6, [r0, #0]
 800a42a:	60c6      	str	r6, [r0, #12]
 800a42c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a42e:	68f3      	ldr	r3, [r6, #12]
 800a430:	b183      	cbz	r3, 800a454 <_Balloc+0x50>
 800a432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a43a:	b9b8      	cbnz	r0, 800a46c <_Balloc+0x68>
 800a43c:	2101      	movs	r1, #1
 800a43e:	fa01 f605 	lsl.w	r6, r1, r5
 800a442:	1d72      	adds	r2, r6, #5
 800a444:	4620      	mov	r0, r4
 800a446:	0092      	lsls	r2, r2, #2
 800a448:	f000 fb5e 	bl	800ab08 <_calloc_r>
 800a44c:	b160      	cbz	r0, 800a468 <_Balloc+0x64>
 800a44e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a452:	e00e      	b.n	800a472 <_Balloc+0x6e>
 800a454:	2221      	movs	r2, #33	; 0x21
 800a456:	2104      	movs	r1, #4
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fb55 	bl	800ab08 <_calloc_r>
 800a45e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a460:	60f0      	str	r0, [r6, #12]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e4      	bne.n	800a432 <_Balloc+0x2e>
 800a468:	2000      	movs	r0, #0
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	6802      	ldr	r2, [r0, #0]
 800a46e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a472:	2300      	movs	r3, #0
 800a474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a478:	e7f7      	b.n	800a46a <_Balloc+0x66>
 800a47a:	bf00      	nop
 800a47c:	0800dcd5 	.word	0x0800dcd5
 800a480:	0800dd5c 	.word	0x0800dd5c

0800a484 <_Bfree>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a488:	4605      	mov	r5, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	b976      	cbnz	r6, 800a4ac <_Bfree+0x28>
 800a48e:	2010      	movs	r0, #16
 800a490:	f7ff ff94 	bl	800a3bc <malloc>
 800a494:	4602      	mov	r2, r0
 800a496:	6268      	str	r0, [r5, #36]	; 0x24
 800a498:	b920      	cbnz	r0, 800a4a4 <_Bfree+0x20>
 800a49a:	218a      	movs	r1, #138	; 0x8a
 800a49c:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <_Bfree+0x3c>)
 800a49e:	4809      	ldr	r0, [pc, #36]	; (800a4c4 <_Bfree+0x40>)
 800a4a0:	f000 fd52 	bl	800af48 <__assert_func>
 800a4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4a8:	6006      	str	r6, [r0, #0]
 800a4aa:	60c6      	str	r6, [r0, #12]
 800a4ac:	b13c      	cbz	r4, 800a4be <_Bfree+0x3a>
 800a4ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4b0:	6862      	ldr	r2, [r4, #4]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4b8:	6021      	str	r1, [r4, #0]
 800a4ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4be:	bd70      	pop	{r4, r5, r6, pc}
 800a4c0:	0800dcd5 	.word	0x0800dcd5
 800a4c4:	0800dd5c 	.word	0x0800dd5c

0800a4c8 <__multadd>:
 800a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4cc:	4698      	mov	r8, r3
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	690e      	ldr	r6, [r1, #16]
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	f101 0014 	add.w	r0, r1, #20
 800a4da:	6805      	ldr	r5, [r0, #0]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	b2a9      	uxth	r1, r5
 800a4e0:	fb02 8101 	mla	r1, r2, r1, r8
 800a4e4:	0c2d      	lsrs	r5, r5, #16
 800a4e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a4ea:	fb02 c505 	mla	r5, r2, r5, ip
 800a4ee:	b289      	uxth	r1, r1
 800a4f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a4f4:	429e      	cmp	r6, r3
 800a4f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a4fa:	f840 1b04 	str.w	r1, [r0], #4
 800a4fe:	dcec      	bgt.n	800a4da <__multadd+0x12>
 800a500:	f1b8 0f00 	cmp.w	r8, #0
 800a504:	d022      	beq.n	800a54c <__multadd+0x84>
 800a506:	68a3      	ldr	r3, [r4, #8]
 800a508:	42b3      	cmp	r3, r6
 800a50a:	dc19      	bgt.n	800a540 <__multadd+0x78>
 800a50c:	6861      	ldr	r1, [r4, #4]
 800a50e:	4638      	mov	r0, r7
 800a510:	3101      	adds	r1, #1
 800a512:	f7ff ff77 	bl	800a404 <_Balloc>
 800a516:	4605      	mov	r5, r0
 800a518:	b928      	cbnz	r0, 800a526 <__multadd+0x5e>
 800a51a:	4602      	mov	r2, r0
 800a51c:	21b5      	movs	r1, #181	; 0xb5
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <__multadd+0x8c>)
 800a520:	480d      	ldr	r0, [pc, #52]	; (800a558 <__multadd+0x90>)
 800a522:	f000 fd11 	bl	800af48 <__assert_func>
 800a526:	6922      	ldr	r2, [r4, #16]
 800a528:	f104 010c 	add.w	r1, r4, #12
 800a52c:	3202      	adds	r2, #2
 800a52e:	0092      	lsls	r2, r2, #2
 800a530:	300c      	adds	r0, #12
 800a532:	f7ff ff59 	bl	800a3e8 <memcpy>
 800a536:	4621      	mov	r1, r4
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff ffa3 	bl	800a484 <_Bfree>
 800a53e:	462c      	mov	r4, r5
 800a540:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a544:	3601      	adds	r6, #1
 800a546:	f8c3 8014 	str.w	r8, [r3, #20]
 800a54a:	6126      	str	r6, [r4, #16]
 800a54c:	4620      	mov	r0, r4
 800a54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a552:	bf00      	nop
 800a554:	0800dd4b 	.word	0x0800dd4b
 800a558:	0800dd5c 	.word	0x0800dd5c

0800a55c <__hi0bits>:
 800a55c:	0c02      	lsrs	r2, r0, #16
 800a55e:	0412      	lsls	r2, r2, #16
 800a560:	4603      	mov	r3, r0
 800a562:	b9ca      	cbnz	r2, 800a598 <__hi0bits+0x3c>
 800a564:	0403      	lsls	r3, r0, #16
 800a566:	2010      	movs	r0, #16
 800a568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a56c:	bf04      	itt	eq
 800a56e:	021b      	lsleq	r3, r3, #8
 800a570:	3008      	addeq	r0, #8
 800a572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a576:	bf04      	itt	eq
 800a578:	011b      	lsleq	r3, r3, #4
 800a57a:	3004      	addeq	r0, #4
 800a57c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a580:	bf04      	itt	eq
 800a582:	009b      	lsleq	r3, r3, #2
 800a584:	3002      	addeq	r0, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	db05      	blt.n	800a596 <__hi0bits+0x3a>
 800a58a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a58e:	f100 0001 	add.w	r0, r0, #1
 800a592:	bf08      	it	eq
 800a594:	2020      	moveq	r0, #32
 800a596:	4770      	bx	lr
 800a598:	2000      	movs	r0, #0
 800a59a:	e7e5      	b.n	800a568 <__hi0bits+0xc>

0800a59c <__lo0bits>:
 800a59c:	6803      	ldr	r3, [r0, #0]
 800a59e:	4602      	mov	r2, r0
 800a5a0:	f013 0007 	ands.w	r0, r3, #7
 800a5a4:	d00b      	beq.n	800a5be <__lo0bits+0x22>
 800a5a6:	07d9      	lsls	r1, r3, #31
 800a5a8:	d422      	bmi.n	800a5f0 <__lo0bits+0x54>
 800a5aa:	0798      	lsls	r0, r3, #30
 800a5ac:	bf49      	itett	mi
 800a5ae:	085b      	lsrmi	r3, r3, #1
 800a5b0:	089b      	lsrpl	r3, r3, #2
 800a5b2:	2001      	movmi	r0, #1
 800a5b4:	6013      	strmi	r3, [r2, #0]
 800a5b6:	bf5c      	itt	pl
 800a5b8:	2002      	movpl	r0, #2
 800a5ba:	6013      	strpl	r3, [r2, #0]
 800a5bc:	4770      	bx	lr
 800a5be:	b299      	uxth	r1, r3
 800a5c0:	b909      	cbnz	r1, 800a5c6 <__lo0bits+0x2a>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a5ca:	bf04      	itt	eq
 800a5cc:	0a1b      	lsreq	r3, r3, #8
 800a5ce:	3008      	addeq	r0, #8
 800a5d0:	0719      	lsls	r1, r3, #28
 800a5d2:	bf04      	itt	eq
 800a5d4:	091b      	lsreq	r3, r3, #4
 800a5d6:	3004      	addeq	r0, #4
 800a5d8:	0799      	lsls	r1, r3, #30
 800a5da:	bf04      	itt	eq
 800a5dc:	089b      	lsreq	r3, r3, #2
 800a5de:	3002      	addeq	r0, #2
 800a5e0:	07d9      	lsls	r1, r3, #31
 800a5e2:	d403      	bmi.n	800a5ec <__lo0bits+0x50>
 800a5e4:	085b      	lsrs	r3, r3, #1
 800a5e6:	f100 0001 	add.w	r0, r0, #1
 800a5ea:	d003      	beq.n	800a5f4 <__lo0bits+0x58>
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	4770      	bx	lr
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	4770      	bx	lr
 800a5f4:	2020      	movs	r0, #32
 800a5f6:	4770      	bx	lr

0800a5f8 <__i2b>:
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	f7ff ff01 	bl	800a404 <_Balloc>
 800a602:	4602      	mov	r2, r0
 800a604:	b928      	cbnz	r0, 800a612 <__i2b+0x1a>
 800a606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a60a:	4b04      	ldr	r3, [pc, #16]	; (800a61c <__i2b+0x24>)
 800a60c:	4804      	ldr	r0, [pc, #16]	; (800a620 <__i2b+0x28>)
 800a60e:	f000 fc9b 	bl	800af48 <__assert_func>
 800a612:	2301      	movs	r3, #1
 800a614:	6144      	str	r4, [r0, #20]
 800a616:	6103      	str	r3, [r0, #16]
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	bf00      	nop
 800a61c:	0800dd4b 	.word	0x0800dd4b
 800a620:	0800dd5c 	.word	0x0800dd5c

0800a624 <__multiply>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	4614      	mov	r4, r2
 800a62a:	690a      	ldr	r2, [r1, #16]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	460d      	mov	r5, r1
 800a630:	429a      	cmp	r2, r3
 800a632:	bfbe      	ittt	lt
 800a634:	460b      	movlt	r3, r1
 800a636:	4625      	movlt	r5, r4
 800a638:	461c      	movlt	r4, r3
 800a63a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a63e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a642:	68ab      	ldr	r3, [r5, #8]
 800a644:	6869      	ldr	r1, [r5, #4]
 800a646:	eb0a 0709 	add.w	r7, sl, r9
 800a64a:	42bb      	cmp	r3, r7
 800a64c:	b085      	sub	sp, #20
 800a64e:	bfb8      	it	lt
 800a650:	3101      	addlt	r1, #1
 800a652:	f7ff fed7 	bl	800a404 <_Balloc>
 800a656:	b930      	cbnz	r0, 800a666 <__multiply+0x42>
 800a658:	4602      	mov	r2, r0
 800a65a:	f240 115d 	movw	r1, #349	; 0x15d
 800a65e:	4b41      	ldr	r3, [pc, #260]	; (800a764 <__multiply+0x140>)
 800a660:	4841      	ldr	r0, [pc, #260]	; (800a768 <__multiply+0x144>)
 800a662:	f000 fc71 	bl	800af48 <__assert_func>
 800a666:	f100 0614 	add.w	r6, r0, #20
 800a66a:	4633      	mov	r3, r6
 800a66c:	2200      	movs	r2, #0
 800a66e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a672:	4543      	cmp	r3, r8
 800a674:	d31e      	bcc.n	800a6b4 <__multiply+0x90>
 800a676:	f105 0c14 	add.w	ip, r5, #20
 800a67a:	f104 0314 	add.w	r3, r4, #20
 800a67e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a682:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a686:	9202      	str	r2, [sp, #8]
 800a688:	ebac 0205 	sub.w	r2, ip, r5
 800a68c:	3a15      	subs	r2, #21
 800a68e:	f022 0203 	bic.w	r2, r2, #3
 800a692:	3204      	adds	r2, #4
 800a694:	f105 0115 	add.w	r1, r5, #21
 800a698:	458c      	cmp	ip, r1
 800a69a:	bf38      	it	cc
 800a69c:	2204      	movcc	r2, #4
 800a69e:	9201      	str	r2, [sp, #4]
 800a6a0:	9a02      	ldr	r2, [sp, #8]
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d808      	bhi.n	800a6ba <__multiply+0x96>
 800a6a8:	2f00      	cmp	r7, #0
 800a6aa:	dc55      	bgt.n	800a758 <__multiply+0x134>
 800a6ac:	6107      	str	r7, [r0, #16]
 800a6ae:	b005      	add	sp, #20
 800a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b4:	f843 2b04 	str.w	r2, [r3], #4
 800a6b8:	e7db      	b.n	800a672 <__multiply+0x4e>
 800a6ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6be:	f1ba 0f00 	cmp.w	sl, #0
 800a6c2:	d020      	beq.n	800a706 <__multiply+0xe2>
 800a6c4:	46b1      	mov	r9, r6
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f105 0e14 	add.w	lr, r5, #20
 800a6cc:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a6d0:	f8d9 b000 	ldr.w	fp, [r9]
 800a6d4:	b2a1      	uxth	r1, r4
 800a6d6:	fa1f fb8b 	uxth.w	fp, fp
 800a6da:	fb0a b101 	mla	r1, sl, r1, fp
 800a6de:	4411      	add	r1, r2
 800a6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6e4:	0c24      	lsrs	r4, r4, #16
 800a6e6:	0c12      	lsrs	r2, r2, #16
 800a6e8:	fb0a 2404 	mla	r4, sl, r4, r2
 800a6ec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a6f0:	b289      	uxth	r1, r1
 800a6f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6f6:	45f4      	cmp	ip, lr
 800a6f8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a6fc:	f849 1b04 	str.w	r1, [r9], #4
 800a700:	d8e4      	bhi.n	800a6cc <__multiply+0xa8>
 800a702:	9901      	ldr	r1, [sp, #4]
 800a704:	5072      	str	r2, [r6, r1]
 800a706:	9a03      	ldr	r2, [sp, #12]
 800a708:	3304      	adds	r3, #4
 800a70a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a70e:	f1b9 0f00 	cmp.w	r9, #0
 800a712:	d01f      	beq.n	800a754 <__multiply+0x130>
 800a714:	46b6      	mov	lr, r6
 800a716:	f04f 0a00 	mov.w	sl, #0
 800a71a:	6834      	ldr	r4, [r6, #0]
 800a71c:	f105 0114 	add.w	r1, r5, #20
 800a720:	880a      	ldrh	r2, [r1, #0]
 800a722:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a726:	b2a4      	uxth	r4, r4
 800a728:	fb09 b202 	mla	r2, r9, r2, fp
 800a72c:	4492      	add	sl, r2
 800a72e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a732:	f84e 4b04 	str.w	r4, [lr], #4
 800a736:	f851 4b04 	ldr.w	r4, [r1], #4
 800a73a:	f8be 2000 	ldrh.w	r2, [lr]
 800a73e:	0c24      	lsrs	r4, r4, #16
 800a740:	fb09 2404 	mla	r4, r9, r4, r2
 800a744:	458c      	cmp	ip, r1
 800a746:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a74a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a74e:	d8e7      	bhi.n	800a720 <__multiply+0xfc>
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	50b4      	str	r4, [r6, r2]
 800a754:	3604      	adds	r6, #4
 800a756:	e7a3      	b.n	800a6a0 <__multiply+0x7c>
 800a758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1a5      	bne.n	800a6ac <__multiply+0x88>
 800a760:	3f01      	subs	r7, #1
 800a762:	e7a1      	b.n	800a6a8 <__multiply+0x84>
 800a764:	0800dd4b 	.word	0x0800dd4b
 800a768:	0800dd5c 	.word	0x0800dd5c

0800a76c <__pow5mult>:
 800a76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a770:	4615      	mov	r5, r2
 800a772:	f012 0203 	ands.w	r2, r2, #3
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	d007      	beq.n	800a78c <__pow5mult+0x20>
 800a77c:	4c25      	ldr	r4, [pc, #148]	; (800a814 <__pow5mult+0xa8>)
 800a77e:	3a01      	subs	r2, #1
 800a780:	2300      	movs	r3, #0
 800a782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a786:	f7ff fe9f 	bl	800a4c8 <__multadd>
 800a78a:	4607      	mov	r7, r0
 800a78c:	10ad      	asrs	r5, r5, #2
 800a78e:	d03d      	beq.n	800a80c <__pow5mult+0xa0>
 800a790:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a792:	b97c      	cbnz	r4, 800a7b4 <__pow5mult+0x48>
 800a794:	2010      	movs	r0, #16
 800a796:	f7ff fe11 	bl	800a3bc <malloc>
 800a79a:	4602      	mov	r2, r0
 800a79c:	6270      	str	r0, [r6, #36]	; 0x24
 800a79e:	b928      	cbnz	r0, 800a7ac <__pow5mult+0x40>
 800a7a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7a4:	4b1c      	ldr	r3, [pc, #112]	; (800a818 <__pow5mult+0xac>)
 800a7a6:	481d      	ldr	r0, [pc, #116]	; (800a81c <__pow5mult+0xb0>)
 800a7a8:	f000 fbce 	bl	800af48 <__assert_func>
 800a7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7b0:	6004      	str	r4, [r0, #0]
 800a7b2:	60c4      	str	r4, [r0, #12]
 800a7b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7bc:	b94c      	cbnz	r4, 800a7d2 <__pow5mult+0x66>
 800a7be:	f240 2171 	movw	r1, #625	; 0x271
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f7ff ff18 	bl	800a5f8 <__i2b>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	f04f 0900 	mov.w	r9, #0
 800a7d6:	07eb      	lsls	r3, r5, #31
 800a7d8:	d50a      	bpl.n	800a7f0 <__pow5mult+0x84>
 800a7da:	4639      	mov	r1, r7
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f7ff ff20 	bl	800a624 <__multiply>
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f7ff fe4b 	bl	800a484 <_Bfree>
 800a7ee:	4647      	mov	r7, r8
 800a7f0:	106d      	asrs	r5, r5, #1
 800a7f2:	d00b      	beq.n	800a80c <__pow5mult+0xa0>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	b938      	cbnz	r0, 800a808 <__pow5mult+0x9c>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7ff ff11 	bl	800a624 <__multiply>
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f8c0 9000 	str.w	r9, [r0]
 800a808:	4604      	mov	r4, r0
 800a80a:	e7e4      	b.n	800a7d6 <__pow5mult+0x6a>
 800a80c:	4638      	mov	r0, r7
 800a80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a812:	bf00      	nop
 800a814:	0800deb0 	.word	0x0800deb0
 800a818:	0800dcd5 	.word	0x0800dcd5
 800a81c:	0800dd5c 	.word	0x0800dd5c

0800a820 <__lshift>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	4607      	mov	r7, r0
 800a828:	4691      	mov	r9, r2
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	6849      	ldr	r1, [r1, #4]
 800a82e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a832:	68a3      	ldr	r3, [r4, #8]
 800a834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a838:	f108 0601 	add.w	r6, r8, #1
 800a83c:	42b3      	cmp	r3, r6
 800a83e:	db0b      	blt.n	800a858 <__lshift+0x38>
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fddf 	bl	800a404 <_Balloc>
 800a846:	4605      	mov	r5, r0
 800a848:	b948      	cbnz	r0, 800a85e <__lshift+0x3e>
 800a84a:	4602      	mov	r2, r0
 800a84c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a850:	4b27      	ldr	r3, [pc, #156]	; (800a8f0 <__lshift+0xd0>)
 800a852:	4828      	ldr	r0, [pc, #160]	; (800a8f4 <__lshift+0xd4>)
 800a854:	f000 fb78 	bl	800af48 <__assert_func>
 800a858:	3101      	adds	r1, #1
 800a85a:	005b      	lsls	r3, r3, #1
 800a85c:	e7ee      	b.n	800a83c <__lshift+0x1c>
 800a85e:	2300      	movs	r3, #0
 800a860:	f100 0114 	add.w	r1, r0, #20
 800a864:	f100 0210 	add.w	r2, r0, #16
 800a868:	4618      	mov	r0, r3
 800a86a:	4553      	cmp	r3, sl
 800a86c:	db33      	blt.n	800a8d6 <__lshift+0xb6>
 800a86e:	6920      	ldr	r0, [r4, #16]
 800a870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a874:	f104 0314 	add.w	r3, r4, #20
 800a878:	f019 091f 	ands.w	r9, r9, #31
 800a87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a884:	d02b      	beq.n	800a8de <__lshift+0xbe>
 800a886:	468a      	mov	sl, r1
 800a888:	2200      	movs	r2, #0
 800a88a:	f1c9 0e20 	rsb	lr, r9, #32
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	fa00 f009 	lsl.w	r0, r0, r9
 800a894:	4302      	orrs	r2, r0
 800a896:	f84a 2b04 	str.w	r2, [sl], #4
 800a89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a89e:	459c      	cmp	ip, r3
 800a8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8a4:	d8f3      	bhi.n	800a88e <__lshift+0x6e>
 800a8a6:	ebac 0304 	sub.w	r3, ip, r4
 800a8aa:	3b15      	subs	r3, #21
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	f104 0015 	add.w	r0, r4, #21
 800a8b6:	4584      	cmp	ip, r0
 800a8b8:	bf38      	it	cc
 800a8ba:	2304      	movcc	r3, #4
 800a8bc:	50ca      	str	r2, [r1, r3]
 800a8be:	b10a      	cbz	r2, 800a8c4 <__lshift+0xa4>
 800a8c0:	f108 0602 	add.w	r6, r8, #2
 800a8c4:	3e01      	subs	r6, #1
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	612e      	str	r6, [r5, #16]
 800a8cc:	f7ff fdda 	bl	800a484 <_Bfree>
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8da:	3301      	adds	r3, #1
 800a8dc:	e7c5      	b.n	800a86a <__lshift+0x4a>
 800a8de:	3904      	subs	r1, #4
 800a8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e4:	459c      	cmp	ip, r3
 800a8e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8ea:	d8f9      	bhi.n	800a8e0 <__lshift+0xc0>
 800a8ec:	e7ea      	b.n	800a8c4 <__lshift+0xa4>
 800a8ee:	bf00      	nop
 800a8f0:	0800dd4b 	.word	0x0800dd4b
 800a8f4:	0800dd5c 	.word	0x0800dd5c

0800a8f8 <__mcmp>:
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	690a      	ldr	r2, [r1, #16]
 800a8fc:	6900      	ldr	r0, [r0, #16]
 800a8fe:	b530      	push	{r4, r5, lr}
 800a900:	1a80      	subs	r0, r0, r2
 800a902:	d10d      	bne.n	800a920 <__mcmp+0x28>
 800a904:	3314      	adds	r3, #20
 800a906:	3114      	adds	r1, #20
 800a908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a90c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a918:	4295      	cmp	r5, r2
 800a91a:	d002      	beq.n	800a922 <__mcmp+0x2a>
 800a91c:	d304      	bcc.n	800a928 <__mcmp+0x30>
 800a91e:	2001      	movs	r0, #1
 800a920:	bd30      	pop	{r4, r5, pc}
 800a922:	42a3      	cmp	r3, r4
 800a924:	d3f4      	bcc.n	800a910 <__mcmp+0x18>
 800a926:	e7fb      	b.n	800a920 <__mcmp+0x28>
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	e7f8      	b.n	800a920 <__mcmp+0x28>
	...

0800a930 <__mdiff>:
 800a930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	460c      	mov	r4, r1
 800a936:	4606      	mov	r6, r0
 800a938:	4611      	mov	r1, r2
 800a93a:	4620      	mov	r0, r4
 800a93c:	4692      	mov	sl, r2
 800a93e:	f7ff ffdb 	bl	800a8f8 <__mcmp>
 800a942:	1e05      	subs	r5, r0, #0
 800a944:	d111      	bne.n	800a96a <__mdiff+0x3a>
 800a946:	4629      	mov	r1, r5
 800a948:	4630      	mov	r0, r6
 800a94a:	f7ff fd5b 	bl	800a404 <_Balloc>
 800a94e:	4602      	mov	r2, r0
 800a950:	b928      	cbnz	r0, 800a95e <__mdiff+0x2e>
 800a952:	f240 2132 	movw	r1, #562	; 0x232
 800a956:	4b3c      	ldr	r3, [pc, #240]	; (800aa48 <__mdiff+0x118>)
 800a958:	483c      	ldr	r0, [pc, #240]	; (800aa4c <__mdiff+0x11c>)
 800a95a:	f000 faf5 	bl	800af48 <__assert_func>
 800a95e:	2301      	movs	r3, #1
 800a960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a964:	4610      	mov	r0, r2
 800a966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	bfa4      	itt	ge
 800a96c:	4653      	movge	r3, sl
 800a96e:	46a2      	movge	sl, r4
 800a970:	4630      	mov	r0, r6
 800a972:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a976:	bfa6      	itte	ge
 800a978:	461c      	movge	r4, r3
 800a97a:	2500      	movge	r5, #0
 800a97c:	2501      	movlt	r5, #1
 800a97e:	f7ff fd41 	bl	800a404 <_Balloc>
 800a982:	4602      	mov	r2, r0
 800a984:	b918      	cbnz	r0, 800a98e <__mdiff+0x5e>
 800a986:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a98a:	4b2f      	ldr	r3, [pc, #188]	; (800aa48 <__mdiff+0x118>)
 800a98c:	e7e4      	b.n	800a958 <__mdiff+0x28>
 800a98e:	f100 0814 	add.w	r8, r0, #20
 800a992:	f8da 7010 	ldr.w	r7, [sl, #16]
 800a996:	60c5      	str	r5, [r0, #12]
 800a998:	f04f 0c00 	mov.w	ip, #0
 800a99c:	f10a 0514 	add.w	r5, sl, #20
 800a9a0:	f10a 0010 	add.w	r0, sl, #16
 800a9a4:	46c2      	mov	sl, r8
 800a9a6:	6926      	ldr	r6, [r4, #16]
 800a9a8:	f104 0914 	add.w	r9, r4, #20
 800a9ac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800a9b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9b4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800a9b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9bc:	fa1f f18b 	uxth.w	r1, fp
 800a9c0:	4461      	add	r1, ip
 800a9c2:	fa1f fc83 	uxth.w	ip, r3
 800a9c6:	0c1b      	lsrs	r3, r3, #16
 800a9c8:	eba1 010c 	sub.w	r1, r1, ip
 800a9cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a9d4:	b289      	uxth	r1, r1
 800a9d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a9da:	454e      	cmp	r6, r9
 800a9dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a9e0:	f84a 3b04 	str.w	r3, [sl], #4
 800a9e4:	d8e6      	bhi.n	800a9b4 <__mdiff+0x84>
 800a9e6:	1b33      	subs	r3, r6, r4
 800a9e8:	3b15      	subs	r3, #21
 800a9ea:	f023 0303 	bic.w	r3, r3, #3
 800a9ee:	3415      	adds	r4, #21
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	42a6      	cmp	r6, r4
 800a9f4:	bf38      	it	cc
 800a9f6:	2304      	movcc	r3, #4
 800a9f8:	441d      	add	r5, r3
 800a9fa:	4443      	add	r3, r8
 800a9fc:	461e      	mov	r6, r3
 800a9fe:	462c      	mov	r4, r5
 800aa00:	4574      	cmp	r4, lr
 800aa02:	d30e      	bcc.n	800aa22 <__mdiff+0xf2>
 800aa04:	f10e 0103 	add.w	r1, lr, #3
 800aa08:	1b49      	subs	r1, r1, r5
 800aa0a:	f021 0103 	bic.w	r1, r1, #3
 800aa0e:	3d03      	subs	r5, #3
 800aa10:	45ae      	cmp	lr, r5
 800aa12:	bf38      	it	cc
 800aa14:	2100      	movcc	r1, #0
 800aa16:	4419      	add	r1, r3
 800aa18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aa1c:	b18b      	cbz	r3, 800aa42 <__mdiff+0x112>
 800aa1e:	6117      	str	r7, [r2, #16]
 800aa20:	e7a0      	b.n	800a964 <__mdiff+0x34>
 800aa22:	f854 8b04 	ldr.w	r8, [r4], #4
 800aa26:	fa1f f188 	uxth.w	r1, r8
 800aa2a:	4461      	add	r1, ip
 800aa2c:	1408      	asrs	r0, r1, #16
 800aa2e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800aa32:	b289      	uxth	r1, r1
 800aa34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa3c:	f846 1b04 	str.w	r1, [r6], #4
 800aa40:	e7de      	b.n	800aa00 <__mdiff+0xd0>
 800aa42:	3f01      	subs	r7, #1
 800aa44:	e7e8      	b.n	800aa18 <__mdiff+0xe8>
 800aa46:	bf00      	nop
 800aa48:	0800dd4b 	.word	0x0800dd4b
 800aa4c:	0800dd5c 	.word	0x0800dd5c

0800aa50 <__d2b>:
 800aa50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa54:	2101      	movs	r1, #1
 800aa56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aa5a:	4690      	mov	r8, r2
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	f7ff fcd1 	bl	800a404 <_Balloc>
 800aa62:	4604      	mov	r4, r0
 800aa64:	b930      	cbnz	r0, 800aa74 <__d2b+0x24>
 800aa66:	4602      	mov	r2, r0
 800aa68:	f240 310a 	movw	r1, #778	; 0x30a
 800aa6c:	4b24      	ldr	r3, [pc, #144]	; (800ab00 <__d2b+0xb0>)
 800aa6e:	4825      	ldr	r0, [pc, #148]	; (800ab04 <__d2b+0xb4>)
 800aa70:	f000 fa6a 	bl	800af48 <__assert_func>
 800aa74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aa7c:	bb2d      	cbnz	r5, 800aaca <__d2b+0x7a>
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	f1b8 0300 	subs.w	r3, r8, #0
 800aa84:	d026      	beq.n	800aad4 <__d2b+0x84>
 800aa86:	4668      	mov	r0, sp
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	f7ff fd87 	bl	800a59c <__lo0bits>
 800aa8e:	9900      	ldr	r1, [sp, #0]
 800aa90:	b1f0      	cbz	r0, 800aad0 <__d2b+0x80>
 800aa92:	9a01      	ldr	r2, [sp, #4]
 800aa94:	f1c0 0320 	rsb	r3, r0, #32
 800aa98:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	40c2      	lsrs	r2, r0
 800aaa0:	6163      	str	r3, [r4, #20]
 800aaa2:	9201      	str	r2, [sp, #4]
 800aaa4:	9b01      	ldr	r3, [sp, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bf14      	ite	ne
 800aaaa:	2102      	movne	r1, #2
 800aaac:	2101      	moveq	r1, #1
 800aaae:	61a3      	str	r3, [r4, #24]
 800aab0:	6121      	str	r1, [r4, #16]
 800aab2:	b1c5      	cbz	r5, 800aae6 <__d2b+0x96>
 800aab4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aab8:	4405      	add	r5, r0
 800aaba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aabe:	603d      	str	r5, [r7, #0]
 800aac0:	6030      	str	r0, [r6, #0]
 800aac2:	4620      	mov	r0, r4
 800aac4:	b002      	add	sp, #8
 800aac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aace:	e7d6      	b.n	800aa7e <__d2b+0x2e>
 800aad0:	6161      	str	r1, [r4, #20]
 800aad2:	e7e7      	b.n	800aaa4 <__d2b+0x54>
 800aad4:	a801      	add	r0, sp, #4
 800aad6:	f7ff fd61 	bl	800a59c <__lo0bits>
 800aada:	2101      	movs	r1, #1
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	6121      	str	r1, [r4, #16]
 800aae0:	6163      	str	r3, [r4, #20]
 800aae2:	3020      	adds	r0, #32
 800aae4:	e7e5      	b.n	800aab2 <__d2b+0x62>
 800aae6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aaea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaee:	6038      	str	r0, [r7, #0]
 800aaf0:	6918      	ldr	r0, [r3, #16]
 800aaf2:	f7ff fd33 	bl	800a55c <__hi0bits>
 800aaf6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800aafa:	6031      	str	r1, [r6, #0]
 800aafc:	e7e1      	b.n	800aac2 <__d2b+0x72>
 800aafe:	bf00      	nop
 800ab00:	0800dd4b 	.word	0x0800dd4b
 800ab04:	0800dd5c 	.word	0x0800dd5c

0800ab08 <_calloc_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	fb02 f501 	mul.w	r5, r2, r1
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f000 f854 	bl	800abbc <_malloc_r>
 800ab14:	4604      	mov	r4, r0
 800ab16:	b118      	cbz	r0, 800ab20 <_calloc_r+0x18>
 800ab18:	462a      	mov	r2, r5
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	f7fe f944 	bl	8008da8 <memset>
 800ab20:	4620      	mov	r0, r4
 800ab22:	bd38      	pop	{r3, r4, r5, pc}

0800ab24 <_free_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4605      	mov	r5, r0
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	d043      	beq.n	800abb4 <_free_r+0x90>
 800ab2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab30:	1f0c      	subs	r4, r1, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfb8      	it	lt
 800ab36:	18e4      	addlt	r4, r4, r3
 800ab38:	f000 fa62 	bl	800b000 <__malloc_lock>
 800ab3c:	4a1e      	ldr	r2, [pc, #120]	; (800abb8 <_free_r+0x94>)
 800ab3e:	6813      	ldr	r3, [r2, #0]
 800ab40:	4610      	mov	r0, r2
 800ab42:	b933      	cbnz	r3, 800ab52 <_free_r+0x2e>
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6014      	str	r4, [r2, #0]
 800ab48:	4628      	mov	r0, r5
 800ab4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab4e:	f000 ba5d 	b.w	800b00c <__malloc_unlock>
 800ab52:	42a3      	cmp	r3, r4
 800ab54:	d90a      	bls.n	800ab6c <_free_r+0x48>
 800ab56:	6821      	ldr	r1, [r4, #0]
 800ab58:	1862      	adds	r2, r4, r1
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	bf01      	itttt	eq
 800ab5e:	681a      	ldreq	r2, [r3, #0]
 800ab60:	685b      	ldreq	r3, [r3, #4]
 800ab62:	1852      	addeq	r2, r2, r1
 800ab64:	6022      	streq	r2, [r4, #0]
 800ab66:	6063      	str	r3, [r4, #4]
 800ab68:	6004      	str	r4, [r0, #0]
 800ab6a:	e7ed      	b.n	800ab48 <_free_r+0x24>
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	b10b      	cbz	r3, 800ab76 <_free_r+0x52>
 800ab72:	42a3      	cmp	r3, r4
 800ab74:	d9fa      	bls.n	800ab6c <_free_r+0x48>
 800ab76:	6811      	ldr	r1, [r2, #0]
 800ab78:	1850      	adds	r0, r2, r1
 800ab7a:	42a0      	cmp	r0, r4
 800ab7c:	d10b      	bne.n	800ab96 <_free_r+0x72>
 800ab7e:	6820      	ldr	r0, [r4, #0]
 800ab80:	4401      	add	r1, r0
 800ab82:	1850      	adds	r0, r2, r1
 800ab84:	4283      	cmp	r3, r0
 800ab86:	6011      	str	r1, [r2, #0]
 800ab88:	d1de      	bne.n	800ab48 <_free_r+0x24>
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4401      	add	r1, r0
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	6053      	str	r3, [r2, #4]
 800ab94:	e7d8      	b.n	800ab48 <_free_r+0x24>
 800ab96:	d902      	bls.n	800ab9e <_free_r+0x7a>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	e7d4      	b.n	800ab48 <_free_r+0x24>
 800ab9e:	6820      	ldr	r0, [r4, #0]
 800aba0:	1821      	adds	r1, r4, r0
 800aba2:	428b      	cmp	r3, r1
 800aba4:	bf01      	itttt	eq
 800aba6:	6819      	ldreq	r1, [r3, #0]
 800aba8:	685b      	ldreq	r3, [r3, #4]
 800abaa:	1809      	addeq	r1, r1, r0
 800abac:	6021      	streq	r1, [r4, #0]
 800abae:	6063      	str	r3, [r4, #4]
 800abb0:	6054      	str	r4, [r2, #4]
 800abb2:	e7c9      	b.n	800ab48 <_free_r+0x24>
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	200002bc 	.word	0x200002bc

0800abbc <_malloc_r>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	1ccd      	adds	r5, r1, #3
 800abc0:	f025 0503 	bic.w	r5, r5, #3
 800abc4:	3508      	adds	r5, #8
 800abc6:	2d0c      	cmp	r5, #12
 800abc8:	bf38      	it	cc
 800abca:	250c      	movcc	r5, #12
 800abcc:	2d00      	cmp	r5, #0
 800abce:	4606      	mov	r6, r0
 800abd0:	db01      	blt.n	800abd6 <_malloc_r+0x1a>
 800abd2:	42a9      	cmp	r1, r5
 800abd4:	d903      	bls.n	800abde <_malloc_r+0x22>
 800abd6:	230c      	movs	r3, #12
 800abd8:	6033      	str	r3, [r6, #0]
 800abda:	2000      	movs	r0, #0
 800abdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abde:	f000 fa0f 	bl	800b000 <__malloc_lock>
 800abe2:	4921      	ldr	r1, [pc, #132]	; (800ac68 <_malloc_r+0xac>)
 800abe4:	680a      	ldr	r2, [r1, #0]
 800abe6:	4614      	mov	r4, r2
 800abe8:	b99c      	cbnz	r4, 800ac12 <_malloc_r+0x56>
 800abea:	4f20      	ldr	r7, [pc, #128]	; (800ac6c <_malloc_r+0xb0>)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	b923      	cbnz	r3, 800abfa <_malloc_r+0x3e>
 800abf0:	4621      	mov	r1, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f000 f998 	bl	800af28 <_sbrk_r>
 800abf8:	6038      	str	r0, [r7, #0]
 800abfa:	4629      	mov	r1, r5
 800abfc:	4630      	mov	r0, r6
 800abfe:	f000 f993 	bl	800af28 <_sbrk_r>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d123      	bne.n	800ac4e <_malloc_r+0x92>
 800ac06:	230c      	movs	r3, #12
 800ac08:	4630      	mov	r0, r6
 800ac0a:	6033      	str	r3, [r6, #0]
 800ac0c:	f000 f9fe 	bl	800b00c <__malloc_unlock>
 800ac10:	e7e3      	b.n	800abda <_malloc_r+0x1e>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	1b5b      	subs	r3, r3, r5
 800ac16:	d417      	bmi.n	800ac48 <_malloc_r+0x8c>
 800ac18:	2b0b      	cmp	r3, #11
 800ac1a:	d903      	bls.n	800ac24 <_malloc_r+0x68>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	441c      	add	r4, r3
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	e004      	b.n	800ac2e <_malloc_r+0x72>
 800ac24:	6863      	ldr	r3, [r4, #4]
 800ac26:	42a2      	cmp	r2, r4
 800ac28:	bf0c      	ite	eq
 800ac2a:	600b      	streq	r3, [r1, #0]
 800ac2c:	6053      	strne	r3, [r2, #4]
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f000 f9ec 	bl	800b00c <__malloc_unlock>
 800ac34:	f104 000b 	add.w	r0, r4, #11
 800ac38:	1d23      	adds	r3, r4, #4
 800ac3a:	f020 0007 	bic.w	r0, r0, #7
 800ac3e:	1ac2      	subs	r2, r0, r3
 800ac40:	d0cc      	beq.n	800abdc <_malloc_r+0x20>
 800ac42:	1a1b      	subs	r3, r3, r0
 800ac44:	50a3      	str	r3, [r4, r2]
 800ac46:	e7c9      	b.n	800abdc <_malloc_r+0x20>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	6864      	ldr	r4, [r4, #4]
 800ac4c:	e7cc      	b.n	800abe8 <_malloc_r+0x2c>
 800ac4e:	1cc4      	adds	r4, r0, #3
 800ac50:	f024 0403 	bic.w	r4, r4, #3
 800ac54:	42a0      	cmp	r0, r4
 800ac56:	d0e3      	beq.n	800ac20 <_malloc_r+0x64>
 800ac58:	1a21      	subs	r1, r4, r0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f964 	bl	800af28 <_sbrk_r>
 800ac60:	3001      	adds	r0, #1
 800ac62:	d1dd      	bne.n	800ac20 <_malloc_r+0x64>
 800ac64:	e7cf      	b.n	800ac06 <_malloc_r+0x4a>
 800ac66:	bf00      	nop
 800ac68:	200002bc 	.word	0x200002bc
 800ac6c:	200002c0 	.word	0x200002c0

0800ac70 <__ssputs_r>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	688e      	ldr	r6, [r1, #8]
 800ac76:	4682      	mov	sl, r0
 800ac78:	429e      	cmp	r6, r3
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	461f      	mov	r7, r3
 800ac80:	d838      	bhi.n	800acf4 <__ssputs_r+0x84>
 800ac82:	898a      	ldrh	r2, [r1, #12]
 800ac84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac88:	d032      	beq.n	800acf0 <__ssputs_r+0x80>
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	6909      	ldr	r1, [r1, #16]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	eba5 0901 	sub.w	r9, r5, r1
 800ac94:	6965      	ldr	r5, [r4, #20]
 800ac96:	444b      	add	r3, r9
 800ac98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aca0:	106d      	asrs	r5, r5, #1
 800aca2:	429d      	cmp	r5, r3
 800aca4:	bf38      	it	cc
 800aca6:	461d      	movcc	r5, r3
 800aca8:	0553      	lsls	r3, r2, #21
 800acaa:	d531      	bpl.n	800ad10 <__ssputs_r+0xa0>
 800acac:	4629      	mov	r1, r5
 800acae:	f7ff ff85 	bl	800abbc <_malloc_r>
 800acb2:	4606      	mov	r6, r0
 800acb4:	b950      	cbnz	r0, 800accc <__ssputs_r+0x5c>
 800acb6:	230c      	movs	r3, #12
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	f8ca 3000 	str.w	r3, [sl]
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800accc:	464a      	mov	r2, r9
 800acce:	6921      	ldr	r1, [r4, #16]
 800acd0:	f7ff fb8a 	bl	800a3e8 <memcpy>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	6126      	str	r6, [r4, #16]
 800ace2:	444e      	add	r6, r9
 800ace4:	6026      	str	r6, [r4, #0]
 800ace6:	463e      	mov	r6, r7
 800ace8:	6165      	str	r5, [r4, #20]
 800acea:	eba5 0509 	sub.w	r5, r5, r9
 800acee:	60a5      	str	r5, [r4, #8]
 800acf0:	42be      	cmp	r6, r7
 800acf2:	d900      	bls.n	800acf6 <__ssputs_r+0x86>
 800acf4:	463e      	mov	r6, r7
 800acf6:	4632      	mov	r2, r6
 800acf8:	4641      	mov	r1, r8
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	f000 f966 	bl	800afcc <memmove>
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	6822      	ldr	r2, [r4, #0]
 800ad04:	1b9b      	subs	r3, r3, r6
 800ad06:	4432      	add	r2, r6
 800ad08:	2000      	movs	r0, #0
 800ad0a:	60a3      	str	r3, [r4, #8]
 800ad0c:	6022      	str	r2, [r4, #0]
 800ad0e:	e7db      	b.n	800acc8 <__ssputs_r+0x58>
 800ad10:	462a      	mov	r2, r5
 800ad12:	f000 f981 	bl	800b018 <_realloc_r>
 800ad16:	4606      	mov	r6, r0
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1e1      	bne.n	800ace0 <__ssputs_r+0x70>
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	6921      	ldr	r1, [r4, #16]
 800ad20:	f7ff ff00 	bl	800ab24 <_free_r>
 800ad24:	e7c7      	b.n	800acb6 <__ssputs_r+0x46>
	...

0800ad28 <_svfiprintf_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4698      	mov	r8, r3
 800ad2e:	898b      	ldrh	r3, [r1, #12]
 800ad30:	4607      	mov	r7, r0
 800ad32:	061b      	lsls	r3, r3, #24
 800ad34:	460d      	mov	r5, r1
 800ad36:	4614      	mov	r4, r2
 800ad38:	b09d      	sub	sp, #116	; 0x74
 800ad3a:	d50e      	bpl.n	800ad5a <_svfiprintf_r+0x32>
 800ad3c:	690b      	ldr	r3, [r1, #16]
 800ad3e:	b963      	cbnz	r3, 800ad5a <_svfiprintf_r+0x32>
 800ad40:	2140      	movs	r1, #64	; 0x40
 800ad42:	f7ff ff3b 	bl	800abbc <_malloc_r>
 800ad46:	6028      	str	r0, [r5, #0]
 800ad48:	6128      	str	r0, [r5, #16]
 800ad4a:	b920      	cbnz	r0, 800ad56 <_svfiprintf_r+0x2e>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e0d1      	b.n	800aefa <_svfiprintf_r+0x1d2>
 800ad56:	2340      	movs	r3, #64	; 0x40
 800ad58:	616b      	str	r3, [r5, #20]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5e:	2320      	movs	r3, #32
 800ad60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad64:	2330      	movs	r3, #48	; 0x30
 800ad66:	f04f 0901 	mov.w	r9, #1
 800ad6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af14 <_svfiprintf_r+0x1ec>
 800ad72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad76:	4623      	mov	r3, r4
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7e:	b10a      	cbz	r2, 800ad84 <_svfiprintf_r+0x5c>
 800ad80:	2a25      	cmp	r2, #37	; 0x25
 800ad82:	d1f9      	bne.n	800ad78 <_svfiprintf_r+0x50>
 800ad84:	ebba 0b04 	subs.w	fp, sl, r4
 800ad88:	d00b      	beq.n	800ada2 <_svfiprintf_r+0x7a>
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ff6d 	bl	800ac70 <__ssputs_r>
 800ad96:	3001      	adds	r0, #1
 800ad98:	f000 80aa 	beq.w	800aef0 <_svfiprintf_r+0x1c8>
 800ad9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad9e:	445a      	add	r2, fp
 800ada0:	9209      	str	r2, [sp, #36]	; 0x24
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 80a2 	beq.w	800aef0 <_svfiprintf_r+0x1c8>
 800adac:	2300      	movs	r3, #0
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb6:	f10a 0a01 	add.w	sl, sl, #1
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adc2:	931a      	str	r3, [sp, #104]	; 0x68
 800adc4:	4654      	mov	r4, sl
 800adc6:	2205      	movs	r2, #5
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	4851      	ldr	r0, [pc, #324]	; (800af14 <_svfiprintf_r+0x1ec>)
 800adce:	f7ff fafd 	bl	800a3cc <memchr>
 800add2:	9a04      	ldr	r2, [sp, #16]
 800add4:	b9d8      	cbnz	r0, 800ae0e <_svfiprintf_r+0xe6>
 800add6:	06d0      	lsls	r0, r2, #27
 800add8:	bf44      	itt	mi
 800adda:	2320      	movmi	r3, #32
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade0:	0711      	lsls	r1, r2, #28
 800ade2:	bf44      	itt	mi
 800ade4:	232b      	movmi	r3, #43	; 0x2b
 800ade6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b2a      	cmp	r3, #42	; 0x2a
 800adf0:	d015      	beq.n	800ae1e <_svfiprintf_r+0xf6>
 800adf2:	4654      	mov	r4, sl
 800adf4:	2000      	movs	r0, #0
 800adf6:	f04f 0c0a 	mov.w	ip, #10
 800adfa:	9a07      	ldr	r2, [sp, #28]
 800adfc:	4621      	mov	r1, r4
 800adfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae02:	3b30      	subs	r3, #48	; 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d94e      	bls.n	800aea6 <_svfiprintf_r+0x17e>
 800ae08:	b1b0      	cbz	r0, 800ae38 <_svfiprintf_r+0x110>
 800ae0a:	9207      	str	r2, [sp, #28]
 800ae0c:	e014      	b.n	800ae38 <_svfiprintf_r+0x110>
 800ae0e:	eba0 0308 	sub.w	r3, r0, r8
 800ae12:	fa09 f303 	lsl.w	r3, r9, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	46a2      	mov	sl, r4
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	e7d2      	b.n	800adc4 <_svfiprintf_r+0x9c>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9103      	str	r1, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbb      	ittet	lt
 800ae2a:	425b      	neglt	r3, r3
 800ae2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae30:	9307      	strge	r3, [sp, #28]
 800ae32:	9307      	strlt	r3, [sp, #28]
 800ae34:	bfb8      	it	lt
 800ae36:	9204      	strlt	r2, [sp, #16]
 800ae38:	7823      	ldrb	r3, [r4, #0]
 800ae3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae3c:	d10c      	bne.n	800ae58 <_svfiprintf_r+0x130>
 800ae3e:	7863      	ldrb	r3, [r4, #1]
 800ae40:	2b2a      	cmp	r3, #42	; 0x2a
 800ae42:	d135      	bne.n	800aeb0 <_svfiprintf_r+0x188>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	3402      	adds	r4, #2
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	9203      	str	r2, [sp, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfb8      	it	lt
 800ae52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae56:	9305      	str	r3, [sp, #20]
 800ae58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af24 <_svfiprintf_r+0x1fc>
 800ae5c:	2203      	movs	r2, #3
 800ae5e:	4650      	mov	r0, sl
 800ae60:	7821      	ldrb	r1, [r4, #0]
 800ae62:	f7ff fab3 	bl	800a3cc <memchr>
 800ae66:	b140      	cbz	r0, 800ae7a <_svfiprintf_r+0x152>
 800ae68:	2340      	movs	r3, #64	; 0x40
 800ae6a:	eba0 000a 	sub.w	r0, r0, sl
 800ae6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	3401      	adds	r4, #1
 800ae76:	4303      	orrs	r3, r0
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7e:	2206      	movs	r2, #6
 800ae80:	4825      	ldr	r0, [pc, #148]	; (800af18 <_svfiprintf_r+0x1f0>)
 800ae82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae86:	f7ff faa1 	bl	800a3cc <memchr>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d038      	beq.n	800af00 <_svfiprintf_r+0x1d8>
 800ae8e:	4b23      	ldr	r3, [pc, #140]	; (800af1c <_svfiprintf_r+0x1f4>)
 800ae90:	bb1b      	cbnz	r3, 800aeda <_svfiprintf_r+0x1b2>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	3307      	adds	r3, #7
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	3308      	adds	r3, #8
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea0:	4433      	add	r3, r6
 800aea2:	9309      	str	r3, [sp, #36]	; 0x24
 800aea4:	e767      	b.n	800ad76 <_svfiprintf_r+0x4e>
 800aea6:	460c      	mov	r4, r1
 800aea8:	2001      	movs	r0, #1
 800aeaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeae:	e7a5      	b.n	800adfc <_svfiprintf_r+0xd4>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	3401      	adds	r4, #1
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	4620      	mov	r0, r4
 800aebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec2:	3a30      	subs	r2, #48	; 0x30
 800aec4:	2a09      	cmp	r2, #9
 800aec6:	d903      	bls.n	800aed0 <_svfiprintf_r+0x1a8>
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0c5      	beq.n	800ae58 <_svfiprintf_r+0x130>
 800aecc:	9105      	str	r1, [sp, #20]
 800aece:	e7c3      	b.n	800ae58 <_svfiprintf_r+0x130>
 800aed0:	4604      	mov	r4, r0
 800aed2:	2301      	movs	r3, #1
 800aed4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aed8:	e7f0      	b.n	800aebc <_svfiprintf_r+0x194>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4638      	mov	r0, r7
 800aee2:	4b0f      	ldr	r3, [pc, #60]	; (800af20 <_svfiprintf_r+0x1f8>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	f7fe f805 	bl	8008ef4 <_printf_float>
 800aeea:	1c42      	adds	r2, r0, #1
 800aeec:	4606      	mov	r6, r0
 800aeee:	d1d6      	bne.n	800ae9e <_svfiprintf_r+0x176>
 800aef0:	89ab      	ldrh	r3, [r5, #12]
 800aef2:	065b      	lsls	r3, r3, #25
 800aef4:	f53f af2c 	bmi.w	800ad50 <_svfiprintf_r+0x28>
 800aef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefa:	b01d      	add	sp, #116	; 0x74
 800aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af00:	ab03      	add	r3, sp, #12
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	462a      	mov	r2, r5
 800af06:	4638      	mov	r0, r7
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <_svfiprintf_r+0x1f8>)
 800af0a:	a904      	add	r1, sp, #16
 800af0c:	f7fe fa8e 	bl	800942c <_printf_i>
 800af10:	e7eb      	b.n	800aeea <_svfiprintf_r+0x1c2>
 800af12:	bf00      	nop
 800af14:	0800debc 	.word	0x0800debc
 800af18:	0800dec6 	.word	0x0800dec6
 800af1c:	08008ef5 	.word	0x08008ef5
 800af20:	0800ac71 	.word	0x0800ac71
 800af24:	0800dec2 	.word	0x0800dec2

0800af28 <_sbrk_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	2300      	movs	r3, #0
 800af2c:	4d05      	ldr	r5, [pc, #20]	; (800af44 <_sbrk_r+0x1c>)
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f9 fdba 	bl	8004aac <_sbrk>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_sbrk_r+0x1a>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_sbrk_r+0x1a>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	20001984 	.word	0x20001984

0800af48 <__assert_func>:
 800af48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af4a:	4614      	mov	r4, r2
 800af4c:	461a      	mov	r2, r3
 800af4e:	4b09      	ldr	r3, [pc, #36]	; (800af74 <__assert_func+0x2c>)
 800af50:	4605      	mov	r5, r0
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68d8      	ldr	r0, [r3, #12]
 800af56:	b14c      	cbz	r4, 800af6c <__assert_func+0x24>
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <__assert_func+0x30>)
 800af5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af5e:	9100      	str	r1, [sp, #0]
 800af60:	462b      	mov	r3, r5
 800af62:	4906      	ldr	r1, [pc, #24]	; (800af7c <__assert_func+0x34>)
 800af64:	f000 f80e 	bl	800af84 <fiprintf>
 800af68:	f000 faa2 	bl	800b4b0 <abort>
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <__assert_func+0x38>)
 800af6e:	461c      	mov	r4, r3
 800af70:	e7f3      	b.n	800af5a <__assert_func+0x12>
 800af72:	bf00      	nop
 800af74:	20000024 	.word	0x20000024
 800af78:	0800decd 	.word	0x0800decd
 800af7c:	0800deda 	.word	0x0800deda
 800af80:	0800df08 	.word	0x0800df08

0800af84 <fiprintf>:
 800af84:	b40e      	push	{r1, r2, r3}
 800af86:	b503      	push	{r0, r1, lr}
 800af88:	4601      	mov	r1, r0
 800af8a:	ab03      	add	r3, sp, #12
 800af8c:	4805      	ldr	r0, [pc, #20]	; (800afa4 <fiprintf+0x20>)
 800af8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af92:	6800      	ldr	r0, [r0, #0]
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	f000 f88d 	bl	800b0b4 <_vfiprintf_r>
 800af9a:	b002      	add	sp, #8
 800af9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800afa0:	b003      	add	sp, #12
 800afa2:	4770      	bx	lr
 800afa4:	20000024 	.word	0x20000024

0800afa8 <__ascii_mbtowc>:
 800afa8:	b082      	sub	sp, #8
 800afaa:	b901      	cbnz	r1, 800afae <__ascii_mbtowc+0x6>
 800afac:	a901      	add	r1, sp, #4
 800afae:	b142      	cbz	r2, 800afc2 <__ascii_mbtowc+0x1a>
 800afb0:	b14b      	cbz	r3, 800afc6 <__ascii_mbtowc+0x1e>
 800afb2:	7813      	ldrb	r3, [r2, #0]
 800afb4:	600b      	str	r3, [r1, #0]
 800afb6:	7812      	ldrb	r2, [r2, #0]
 800afb8:	1e10      	subs	r0, r2, #0
 800afba:	bf18      	it	ne
 800afbc:	2001      	movne	r0, #1
 800afbe:	b002      	add	sp, #8
 800afc0:	4770      	bx	lr
 800afc2:	4610      	mov	r0, r2
 800afc4:	e7fb      	b.n	800afbe <__ascii_mbtowc+0x16>
 800afc6:	f06f 0001 	mvn.w	r0, #1
 800afca:	e7f8      	b.n	800afbe <__ascii_mbtowc+0x16>

0800afcc <memmove>:
 800afcc:	4288      	cmp	r0, r1
 800afce:	b510      	push	{r4, lr}
 800afd0:	eb01 0402 	add.w	r4, r1, r2
 800afd4:	d902      	bls.n	800afdc <memmove+0x10>
 800afd6:	4284      	cmp	r4, r0
 800afd8:	4623      	mov	r3, r4
 800afda:	d807      	bhi.n	800afec <memmove+0x20>
 800afdc:	1e43      	subs	r3, r0, #1
 800afde:	42a1      	cmp	r1, r4
 800afe0:	d008      	beq.n	800aff4 <memmove+0x28>
 800afe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afea:	e7f8      	b.n	800afde <memmove+0x12>
 800afec:	4601      	mov	r1, r0
 800afee:	4402      	add	r2, r0
 800aff0:	428a      	cmp	r2, r1
 800aff2:	d100      	bne.n	800aff6 <memmove+0x2a>
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800affa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800affe:	e7f7      	b.n	800aff0 <memmove+0x24>

0800b000 <__malloc_lock>:
 800b000:	4801      	ldr	r0, [pc, #4]	; (800b008 <__malloc_lock+0x8>)
 800b002:	f000 bc15 	b.w	800b830 <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	2000198c 	.word	0x2000198c

0800b00c <__malloc_unlock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__malloc_unlock+0x8>)
 800b00e:	f000 bc10 	b.w	800b832 <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	2000198c 	.word	0x2000198c

0800b018 <_realloc_r>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	4607      	mov	r7, r0
 800b01c:	4614      	mov	r4, r2
 800b01e:	460e      	mov	r6, r1
 800b020:	b921      	cbnz	r1, 800b02c <_realloc_r+0x14>
 800b022:	4611      	mov	r1, r2
 800b024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b028:	f7ff bdc8 	b.w	800abbc <_malloc_r>
 800b02c:	b922      	cbnz	r2, 800b038 <_realloc_r+0x20>
 800b02e:	f7ff fd79 	bl	800ab24 <_free_r>
 800b032:	4625      	mov	r5, r4
 800b034:	4628      	mov	r0, r5
 800b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b038:	f000 fc60 	bl	800b8fc <_malloc_usable_size_r>
 800b03c:	42a0      	cmp	r0, r4
 800b03e:	d20f      	bcs.n	800b060 <_realloc_r+0x48>
 800b040:	4621      	mov	r1, r4
 800b042:	4638      	mov	r0, r7
 800b044:	f7ff fdba 	bl	800abbc <_malloc_r>
 800b048:	4605      	mov	r5, r0
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0f2      	beq.n	800b034 <_realloc_r+0x1c>
 800b04e:	4631      	mov	r1, r6
 800b050:	4622      	mov	r2, r4
 800b052:	f7ff f9c9 	bl	800a3e8 <memcpy>
 800b056:	4631      	mov	r1, r6
 800b058:	4638      	mov	r0, r7
 800b05a:	f7ff fd63 	bl	800ab24 <_free_r>
 800b05e:	e7e9      	b.n	800b034 <_realloc_r+0x1c>
 800b060:	4635      	mov	r5, r6
 800b062:	e7e7      	b.n	800b034 <_realloc_r+0x1c>

0800b064 <__sfputc_r>:
 800b064:	6893      	ldr	r3, [r2, #8]
 800b066:	b410      	push	{r4}
 800b068:	3b01      	subs	r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	6093      	str	r3, [r2, #8]
 800b06e:	da07      	bge.n	800b080 <__sfputc_r+0x1c>
 800b070:	6994      	ldr	r4, [r2, #24]
 800b072:	42a3      	cmp	r3, r4
 800b074:	db01      	blt.n	800b07a <__sfputc_r+0x16>
 800b076:	290a      	cmp	r1, #10
 800b078:	d102      	bne.n	800b080 <__sfputc_r+0x1c>
 800b07a:	bc10      	pop	{r4}
 800b07c:	f000 b94a 	b.w	800b314 <__swbuf_r>
 800b080:	6813      	ldr	r3, [r2, #0]
 800b082:	1c58      	adds	r0, r3, #1
 800b084:	6010      	str	r0, [r2, #0]
 800b086:	7019      	strb	r1, [r3, #0]
 800b088:	4608      	mov	r0, r1
 800b08a:	bc10      	pop	{r4}
 800b08c:	4770      	bx	lr

0800b08e <__sfputs_r>:
 800b08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b090:	4606      	mov	r6, r0
 800b092:	460f      	mov	r7, r1
 800b094:	4614      	mov	r4, r2
 800b096:	18d5      	adds	r5, r2, r3
 800b098:	42ac      	cmp	r4, r5
 800b09a:	d101      	bne.n	800b0a0 <__sfputs_r+0x12>
 800b09c:	2000      	movs	r0, #0
 800b09e:	e007      	b.n	800b0b0 <__sfputs_r+0x22>
 800b0a0:	463a      	mov	r2, r7
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	f7ff ffdc 	bl	800b064 <__sfputc_r>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d1f3      	bne.n	800b098 <__sfputs_r+0xa>
 800b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0b4 <_vfiprintf_r>:
 800b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	4614      	mov	r4, r2
 800b0bc:	4698      	mov	r8, r3
 800b0be:	4606      	mov	r6, r0
 800b0c0:	b09d      	sub	sp, #116	; 0x74
 800b0c2:	b118      	cbz	r0, 800b0cc <_vfiprintf_r+0x18>
 800b0c4:	6983      	ldr	r3, [r0, #24]
 800b0c6:	b90b      	cbnz	r3, 800b0cc <_vfiprintf_r+0x18>
 800b0c8:	f000 fb14 	bl	800b6f4 <__sinit>
 800b0cc:	4b89      	ldr	r3, [pc, #548]	; (800b2f4 <_vfiprintf_r+0x240>)
 800b0ce:	429d      	cmp	r5, r3
 800b0d0:	d11b      	bne.n	800b10a <_vfiprintf_r+0x56>
 800b0d2:	6875      	ldr	r5, [r6, #4]
 800b0d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0d6:	07d9      	lsls	r1, r3, #31
 800b0d8:	d405      	bmi.n	800b0e6 <_vfiprintf_r+0x32>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	059a      	lsls	r2, r3, #22
 800b0de:	d402      	bmi.n	800b0e6 <_vfiprintf_r+0x32>
 800b0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0e2:	f000 fba5 	bl	800b830 <__retarget_lock_acquire_recursive>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	071b      	lsls	r3, r3, #28
 800b0ea:	d501      	bpl.n	800b0f0 <_vfiprintf_r+0x3c>
 800b0ec:	692b      	ldr	r3, [r5, #16]
 800b0ee:	b9eb      	cbnz	r3, 800b12c <_vfiprintf_r+0x78>
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f000 f96e 	bl	800b3d4 <__swsetup_r>
 800b0f8:	b1c0      	cbz	r0, 800b12c <_vfiprintf_r+0x78>
 800b0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0fc:	07dc      	lsls	r4, r3, #31
 800b0fe:	d50e      	bpl.n	800b11e <_vfiprintf_r+0x6a>
 800b100:	f04f 30ff 	mov.w	r0, #4294967295
 800b104:	b01d      	add	sp, #116	; 0x74
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	4b7b      	ldr	r3, [pc, #492]	; (800b2f8 <_vfiprintf_r+0x244>)
 800b10c:	429d      	cmp	r5, r3
 800b10e:	d101      	bne.n	800b114 <_vfiprintf_r+0x60>
 800b110:	68b5      	ldr	r5, [r6, #8]
 800b112:	e7df      	b.n	800b0d4 <_vfiprintf_r+0x20>
 800b114:	4b79      	ldr	r3, [pc, #484]	; (800b2fc <_vfiprintf_r+0x248>)
 800b116:	429d      	cmp	r5, r3
 800b118:	bf08      	it	eq
 800b11a:	68f5      	ldreq	r5, [r6, #12]
 800b11c:	e7da      	b.n	800b0d4 <_vfiprintf_r+0x20>
 800b11e:	89ab      	ldrh	r3, [r5, #12]
 800b120:	0598      	lsls	r0, r3, #22
 800b122:	d4ed      	bmi.n	800b100 <_vfiprintf_r+0x4c>
 800b124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b126:	f000 fb84 	bl	800b832 <__retarget_lock_release_recursive>
 800b12a:	e7e9      	b.n	800b100 <_vfiprintf_r+0x4c>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9309      	str	r3, [sp, #36]	; 0x24
 800b130:	2320      	movs	r3, #32
 800b132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b136:	2330      	movs	r3, #48	; 0x30
 800b138:	f04f 0901 	mov.w	r9, #1
 800b13c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b140:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b300 <_vfiprintf_r+0x24c>
 800b144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b148:	4623      	mov	r3, r4
 800b14a:	469a      	mov	sl, r3
 800b14c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b150:	b10a      	cbz	r2, 800b156 <_vfiprintf_r+0xa2>
 800b152:	2a25      	cmp	r2, #37	; 0x25
 800b154:	d1f9      	bne.n	800b14a <_vfiprintf_r+0x96>
 800b156:	ebba 0b04 	subs.w	fp, sl, r4
 800b15a:	d00b      	beq.n	800b174 <_vfiprintf_r+0xc0>
 800b15c:	465b      	mov	r3, fp
 800b15e:	4622      	mov	r2, r4
 800b160:	4629      	mov	r1, r5
 800b162:	4630      	mov	r0, r6
 800b164:	f7ff ff93 	bl	800b08e <__sfputs_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	f000 80aa 	beq.w	800b2c2 <_vfiprintf_r+0x20e>
 800b16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b170:	445a      	add	r2, fp
 800b172:	9209      	str	r2, [sp, #36]	; 0x24
 800b174:	f89a 3000 	ldrb.w	r3, [sl]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 80a2 	beq.w	800b2c2 <_vfiprintf_r+0x20e>
 800b17e:	2300      	movs	r3, #0
 800b180:	f04f 32ff 	mov.w	r2, #4294967295
 800b184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b188:	f10a 0a01 	add.w	sl, sl, #1
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b194:	931a      	str	r3, [sp, #104]	; 0x68
 800b196:	4654      	mov	r4, sl
 800b198:	2205      	movs	r2, #5
 800b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19e:	4858      	ldr	r0, [pc, #352]	; (800b300 <_vfiprintf_r+0x24c>)
 800b1a0:	f7ff f914 	bl	800a3cc <memchr>
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	b9d8      	cbnz	r0, 800b1e0 <_vfiprintf_r+0x12c>
 800b1a8:	06d1      	lsls	r1, r2, #27
 800b1aa:	bf44      	itt	mi
 800b1ac:	2320      	movmi	r3, #32
 800b1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b2:	0713      	lsls	r3, r2, #28
 800b1b4:	bf44      	itt	mi
 800b1b6:	232b      	movmi	r3, #43	; 0x2b
 800b1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c2:	d015      	beq.n	800b1f0 <_vfiprintf_r+0x13c>
 800b1c4:	4654      	mov	r4, sl
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	9a07      	ldr	r2, [sp, #28]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d4:	3b30      	subs	r3, #48	; 0x30
 800b1d6:	2b09      	cmp	r3, #9
 800b1d8:	d94e      	bls.n	800b278 <_vfiprintf_r+0x1c4>
 800b1da:	b1b0      	cbz	r0, 800b20a <_vfiprintf_r+0x156>
 800b1dc:	9207      	str	r2, [sp, #28]
 800b1de:	e014      	b.n	800b20a <_vfiprintf_r+0x156>
 800b1e0:	eba0 0308 	sub.w	r3, r0, r8
 800b1e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	46a2      	mov	sl, r4
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	e7d2      	b.n	800b196 <_vfiprintf_r+0xe2>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	1d19      	adds	r1, r3, #4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	9103      	str	r1, [sp, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfbb      	ittet	lt
 800b1fc:	425b      	neglt	r3, r3
 800b1fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b202:	9307      	strge	r3, [sp, #28]
 800b204:	9307      	strlt	r3, [sp, #28]
 800b206:	bfb8      	it	lt
 800b208:	9204      	strlt	r2, [sp, #16]
 800b20a:	7823      	ldrb	r3, [r4, #0]
 800b20c:	2b2e      	cmp	r3, #46	; 0x2e
 800b20e:	d10c      	bne.n	800b22a <_vfiprintf_r+0x176>
 800b210:	7863      	ldrb	r3, [r4, #1]
 800b212:	2b2a      	cmp	r3, #42	; 0x2a
 800b214:	d135      	bne.n	800b282 <_vfiprintf_r+0x1ce>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	3402      	adds	r4, #2
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	9203      	str	r2, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfb8      	it	lt
 800b224:	f04f 33ff 	movlt.w	r3, #4294967295
 800b228:	9305      	str	r3, [sp, #20]
 800b22a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b310 <_vfiprintf_r+0x25c>
 800b22e:	2203      	movs	r2, #3
 800b230:	4650      	mov	r0, sl
 800b232:	7821      	ldrb	r1, [r4, #0]
 800b234:	f7ff f8ca 	bl	800a3cc <memchr>
 800b238:	b140      	cbz	r0, 800b24c <_vfiprintf_r+0x198>
 800b23a:	2340      	movs	r3, #64	; 0x40
 800b23c:	eba0 000a 	sub.w	r0, r0, sl
 800b240:	fa03 f000 	lsl.w	r0, r3, r0
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	3401      	adds	r4, #1
 800b248:	4303      	orrs	r3, r0
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b250:	2206      	movs	r2, #6
 800b252:	482c      	ldr	r0, [pc, #176]	; (800b304 <_vfiprintf_r+0x250>)
 800b254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b258:	f7ff f8b8 	bl	800a3cc <memchr>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d03f      	beq.n	800b2e0 <_vfiprintf_r+0x22c>
 800b260:	4b29      	ldr	r3, [pc, #164]	; (800b308 <_vfiprintf_r+0x254>)
 800b262:	bb1b      	cbnz	r3, 800b2ac <_vfiprintf_r+0x1f8>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	3307      	adds	r3, #7
 800b268:	f023 0307 	bic.w	r3, r3, #7
 800b26c:	3308      	adds	r3, #8
 800b26e:	9303      	str	r3, [sp, #12]
 800b270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b272:	443b      	add	r3, r7
 800b274:	9309      	str	r3, [sp, #36]	; 0x24
 800b276:	e767      	b.n	800b148 <_vfiprintf_r+0x94>
 800b278:	460c      	mov	r4, r1
 800b27a:	2001      	movs	r0, #1
 800b27c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b280:	e7a5      	b.n	800b1ce <_vfiprintf_r+0x11a>
 800b282:	2300      	movs	r3, #0
 800b284:	f04f 0c0a 	mov.w	ip, #10
 800b288:	4619      	mov	r1, r3
 800b28a:	3401      	adds	r4, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	4620      	mov	r0, r4
 800b290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b294:	3a30      	subs	r2, #48	; 0x30
 800b296:	2a09      	cmp	r2, #9
 800b298:	d903      	bls.n	800b2a2 <_vfiprintf_r+0x1ee>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0c5      	beq.n	800b22a <_vfiprintf_r+0x176>
 800b29e:	9105      	str	r1, [sp, #20]
 800b2a0:	e7c3      	b.n	800b22a <_vfiprintf_r+0x176>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2aa:	e7f0      	b.n	800b28e <_vfiprintf_r+0x1da>
 800b2ac:	ab03      	add	r3, sp, #12
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	462a      	mov	r2, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4b15      	ldr	r3, [pc, #84]	; (800b30c <_vfiprintf_r+0x258>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	f7fd fe1c 	bl	8008ef4 <_printf_float>
 800b2bc:	4607      	mov	r7, r0
 800b2be:	1c78      	adds	r0, r7, #1
 800b2c0:	d1d6      	bne.n	800b270 <_vfiprintf_r+0x1bc>
 800b2c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2c4:	07d9      	lsls	r1, r3, #31
 800b2c6:	d405      	bmi.n	800b2d4 <_vfiprintf_r+0x220>
 800b2c8:	89ab      	ldrh	r3, [r5, #12]
 800b2ca:	059a      	lsls	r2, r3, #22
 800b2cc:	d402      	bmi.n	800b2d4 <_vfiprintf_r+0x220>
 800b2ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2d0:	f000 faaf 	bl	800b832 <__retarget_lock_release_recursive>
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	065b      	lsls	r3, r3, #25
 800b2d8:	f53f af12 	bmi.w	800b100 <_vfiprintf_r+0x4c>
 800b2dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2de:	e711      	b.n	800b104 <_vfiprintf_r+0x50>
 800b2e0:	ab03      	add	r3, sp, #12
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	462a      	mov	r2, r5
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4b08      	ldr	r3, [pc, #32]	; (800b30c <_vfiprintf_r+0x258>)
 800b2ea:	a904      	add	r1, sp, #16
 800b2ec:	f7fe f89e 	bl	800942c <_printf_i>
 800b2f0:	e7e4      	b.n	800b2bc <_vfiprintf_r+0x208>
 800b2f2:	bf00      	nop
 800b2f4:	0800e034 	.word	0x0800e034
 800b2f8:	0800e054 	.word	0x0800e054
 800b2fc:	0800e014 	.word	0x0800e014
 800b300:	0800debc 	.word	0x0800debc
 800b304:	0800dec6 	.word	0x0800dec6
 800b308:	08008ef5 	.word	0x08008ef5
 800b30c:	0800b08f 	.word	0x0800b08f
 800b310:	0800dec2 	.word	0x0800dec2

0800b314 <__swbuf_r>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	460e      	mov	r6, r1
 800b318:	4614      	mov	r4, r2
 800b31a:	4605      	mov	r5, r0
 800b31c:	b118      	cbz	r0, 800b326 <__swbuf_r+0x12>
 800b31e:	6983      	ldr	r3, [r0, #24]
 800b320:	b90b      	cbnz	r3, 800b326 <__swbuf_r+0x12>
 800b322:	f000 f9e7 	bl	800b6f4 <__sinit>
 800b326:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <__swbuf_r+0x98>)
 800b328:	429c      	cmp	r4, r3
 800b32a:	d12b      	bne.n	800b384 <__swbuf_r+0x70>
 800b32c:	686c      	ldr	r4, [r5, #4]
 800b32e:	69a3      	ldr	r3, [r4, #24]
 800b330:	60a3      	str	r3, [r4, #8]
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	071a      	lsls	r2, r3, #28
 800b336:	d52f      	bpl.n	800b398 <__swbuf_r+0x84>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	b36b      	cbz	r3, 800b398 <__swbuf_r+0x84>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	b2f6      	uxtb	r6, r6
 800b342:	1ac0      	subs	r0, r0, r3
 800b344:	6963      	ldr	r3, [r4, #20]
 800b346:	4637      	mov	r7, r6
 800b348:	4283      	cmp	r3, r0
 800b34a:	dc04      	bgt.n	800b356 <__swbuf_r+0x42>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 f93c 	bl	800b5cc <_fflush_r>
 800b354:	bb30      	cbnz	r0, 800b3a4 <__swbuf_r+0x90>
 800b356:	68a3      	ldr	r3, [r4, #8]
 800b358:	3001      	adds	r0, #1
 800b35a:	3b01      	subs	r3, #1
 800b35c:	60a3      	str	r3, [r4, #8]
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	6022      	str	r2, [r4, #0]
 800b364:	701e      	strb	r6, [r3, #0]
 800b366:	6963      	ldr	r3, [r4, #20]
 800b368:	4283      	cmp	r3, r0
 800b36a:	d004      	beq.n	800b376 <__swbuf_r+0x62>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	07db      	lsls	r3, r3, #31
 800b370:	d506      	bpl.n	800b380 <__swbuf_r+0x6c>
 800b372:	2e0a      	cmp	r6, #10
 800b374:	d104      	bne.n	800b380 <__swbuf_r+0x6c>
 800b376:	4621      	mov	r1, r4
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 f927 	bl	800b5cc <_fflush_r>
 800b37e:	b988      	cbnz	r0, 800b3a4 <__swbuf_r+0x90>
 800b380:	4638      	mov	r0, r7
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b384:	4b0a      	ldr	r3, [pc, #40]	; (800b3b0 <__swbuf_r+0x9c>)
 800b386:	429c      	cmp	r4, r3
 800b388:	d101      	bne.n	800b38e <__swbuf_r+0x7a>
 800b38a:	68ac      	ldr	r4, [r5, #8]
 800b38c:	e7cf      	b.n	800b32e <__swbuf_r+0x1a>
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <__swbuf_r+0xa0>)
 800b390:	429c      	cmp	r4, r3
 800b392:	bf08      	it	eq
 800b394:	68ec      	ldreq	r4, [r5, #12]
 800b396:	e7ca      	b.n	800b32e <__swbuf_r+0x1a>
 800b398:	4621      	mov	r1, r4
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 f81a 	bl	800b3d4 <__swsetup_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d0cb      	beq.n	800b33c <__swbuf_r+0x28>
 800b3a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b3a8:	e7ea      	b.n	800b380 <__swbuf_r+0x6c>
 800b3aa:	bf00      	nop
 800b3ac:	0800e034 	.word	0x0800e034
 800b3b0:	0800e054 	.word	0x0800e054
 800b3b4:	0800e014 	.word	0x0800e014

0800b3b8 <__ascii_wctomb>:
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	b141      	cbz	r1, 800b3d0 <__ascii_wctomb+0x18>
 800b3be:	2aff      	cmp	r2, #255	; 0xff
 800b3c0:	d904      	bls.n	800b3cc <__ascii_wctomb+0x14>
 800b3c2:	228a      	movs	r2, #138	; 0x8a
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	4770      	bx	lr
 800b3cc:	2001      	movs	r0, #1
 800b3ce:	700a      	strb	r2, [r1, #0]
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <__swsetup_r>:
 800b3d4:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <__swsetup_r+0xcc>)
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	681d      	ldr	r5, [r3, #0]
 800b3da:	4606      	mov	r6, r0
 800b3dc:	460c      	mov	r4, r1
 800b3de:	b125      	cbz	r5, 800b3ea <__swsetup_r+0x16>
 800b3e0:	69ab      	ldr	r3, [r5, #24]
 800b3e2:	b913      	cbnz	r3, 800b3ea <__swsetup_r+0x16>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 f985 	bl	800b6f4 <__sinit>
 800b3ea:	4b2e      	ldr	r3, [pc, #184]	; (800b4a4 <__swsetup_r+0xd0>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	d10f      	bne.n	800b410 <__swsetup_r+0x3c>
 800b3f0:	686c      	ldr	r4, [r5, #4]
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3f8:	0719      	lsls	r1, r3, #28
 800b3fa:	d42c      	bmi.n	800b456 <__swsetup_r+0x82>
 800b3fc:	06dd      	lsls	r5, r3, #27
 800b3fe:	d411      	bmi.n	800b424 <__swsetup_r+0x50>
 800b400:	2309      	movs	r3, #9
 800b402:	6033      	str	r3, [r6, #0]
 800b404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	81a3      	strh	r3, [r4, #12]
 800b40e:	e03e      	b.n	800b48e <__swsetup_r+0xba>
 800b410:	4b25      	ldr	r3, [pc, #148]	; (800b4a8 <__swsetup_r+0xd4>)
 800b412:	429c      	cmp	r4, r3
 800b414:	d101      	bne.n	800b41a <__swsetup_r+0x46>
 800b416:	68ac      	ldr	r4, [r5, #8]
 800b418:	e7eb      	b.n	800b3f2 <__swsetup_r+0x1e>
 800b41a:	4b24      	ldr	r3, [pc, #144]	; (800b4ac <__swsetup_r+0xd8>)
 800b41c:	429c      	cmp	r4, r3
 800b41e:	bf08      	it	eq
 800b420:	68ec      	ldreq	r4, [r5, #12]
 800b422:	e7e6      	b.n	800b3f2 <__swsetup_r+0x1e>
 800b424:	0758      	lsls	r0, r3, #29
 800b426:	d512      	bpl.n	800b44e <__swsetup_r+0x7a>
 800b428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b42a:	b141      	cbz	r1, 800b43e <__swsetup_r+0x6a>
 800b42c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b430:	4299      	cmp	r1, r3
 800b432:	d002      	beq.n	800b43a <__swsetup_r+0x66>
 800b434:	4630      	mov	r0, r6
 800b436:	f7ff fb75 	bl	800ab24 <_free_r>
 800b43a:	2300      	movs	r3, #0
 800b43c:	6363      	str	r3, [r4, #52]	; 0x34
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	2300      	movs	r3, #0
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	f043 0308 	orr.w	r3, r3, #8
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	b94b      	cbnz	r3, 800b46e <__swsetup_r+0x9a>
 800b45a:	89a3      	ldrh	r3, [r4, #12]
 800b45c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b464:	d003      	beq.n	800b46e <__swsetup_r+0x9a>
 800b466:	4621      	mov	r1, r4
 800b468:	4630      	mov	r0, r6
 800b46a:	f000 fa07 	bl	800b87c <__smakebuf_r>
 800b46e:	89a0      	ldrh	r0, [r4, #12]
 800b470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b474:	f010 0301 	ands.w	r3, r0, #1
 800b478:	d00a      	beq.n	800b490 <__swsetup_r+0xbc>
 800b47a:	2300      	movs	r3, #0
 800b47c:	60a3      	str	r3, [r4, #8]
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	425b      	negs	r3, r3
 800b482:	61a3      	str	r3, [r4, #24]
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	b943      	cbnz	r3, 800b49a <__swsetup_r+0xc6>
 800b488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b48c:	d1ba      	bne.n	800b404 <__swsetup_r+0x30>
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	0781      	lsls	r1, r0, #30
 800b492:	bf58      	it	pl
 800b494:	6963      	ldrpl	r3, [r4, #20]
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	e7f4      	b.n	800b484 <__swsetup_r+0xb0>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e7f7      	b.n	800b48e <__swsetup_r+0xba>
 800b49e:	bf00      	nop
 800b4a0:	20000024 	.word	0x20000024
 800b4a4:	0800e034 	.word	0x0800e034
 800b4a8:	0800e054 	.word	0x0800e054
 800b4ac:	0800e014 	.word	0x0800e014

0800b4b0 <abort>:
 800b4b0:	2006      	movs	r0, #6
 800b4b2:	b508      	push	{r3, lr}
 800b4b4:	f000 fa52 	bl	800b95c <raise>
 800b4b8:	2001      	movs	r0, #1
 800b4ba:	f7f9 fa84 	bl	80049c6 <_exit>
	...

0800b4c0 <__sflush_r>:
 800b4c0:	898a      	ldrh	r2, [r1, #12]
 800b4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	0710      	lsls	r0, r2, #28
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	d458      	bmi.n	800b580 <__sflush_r+0xc0>
 800b4ce:	684b      	ldr	r3, [r1, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dc05      	bgt.n	800b4e0 <__sflush_r+0x20>
 800b4d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dc02      	bgt.n	800b4e0 <__sflush_r+0x20>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d0f9      	beq.n	800b4da <__sflush_r+0x1a>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4ec:	682f      	ldr	r7, [r5, #0]
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	d032      	beq.n	800b558 <__sflush_r+0x98>
 800b4f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	075a      	lsls	r2, r3, #29
 800b4f8:	d505      	bpl.n	800b506 <__sflush_r+0x46>
 800b4fa:	6863      	ldr	r3, [r4, #4]
 800b4fc:	1ac0      	subs	r0, r0, r3
 800b4fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b500:	b10b      	cbz	r3, 800b506 <__sflush_r+0x46>
 800b502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b504:	1ac0      	subs	r0, r0, r3
 800b506:	2300      	movs	r3, #0
 800b508:	4602      	mov	r2, r0
 800b50a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b50c:	4628      	mov	r0, r5
 800b50e:	6a21      	ldr	r1, [r4, #32]
 800b510:	47b0      	blx	r6
 800b512:	1c43      	adds	r3, r0, #1
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	d106      	bne.n	800b526 <__sflush_r+0x66>
 800b518:	6829      	ldr	r1, [r5, #0]
 800b51a:	291d      	cmp	r1, #29
 800b51c:	d82c      	bhi.n	800b578 <__sflush_r+0xb8>
 800b51e:	4a2a      	ldr	r2, [pc, #168]	; (800b5c8 <__sflush_r+0x108>)
 800b520:	40ca      	lsrs	r2, r1
 800b522:	07d6      	lsls	r6, r2, #31
 800b524:	d528      	bpl.n	800b578 <__sflush_r+0xb8>
 800b526:	2200      	movs	r2, #0
 800b528:	6062      	str	r2, [r4, #4]
 800b52a:	6922      	ldr	r2, [r4, #16]
 800b52c:	04d9      	lsls	r1, r3, #19
 800b52e:	6022      	str	r2, [r4, #0]
 800b530:	d504      	bpl.n	800b53c <__sflush_r+0x7c>
 800b532:	1c42      	adds	r2, r0, #1
 800b534:	d101      	bne.n	800b53a <__sflush_r+0x7a>
 800b536:	682b      	ldr	r3, [r5, #0]
 800b538:	b903      	cbnz	r3, 800b53c <__sflush_r+0x7c>
 800b53a:	6560      	str	r0, [r4, #84]	; 0x54
 800b53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53e:	602f      	str	r7, [r5, #0]
 800b540:	2900      	cmp	r1, #0
 800b542:	d0ca      	beq.n	800b4da <__sflush_r+0x1a>
 800b544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b548:	4299      	cmp	r1, r3
 800b54a:	d002      	beq.n	800b552 <__sflush_r+0x92>
 800b54c:	4628      	mov	r0, r5
 800b54e:	f7ff fae9 	bl	800ab24 <_free_r>
 800b552:	2000      	movs	r0, #0
 800b554:	6360      	str	r0, [r4, #52]	; 0x34
 800b556:	e7c1      	b.n	800b4dc <__sflush_r+0x1c>
 800b558:	6a21      	ldr	r1, [r4, #32]
 800b55a:	2301      	movs	r3, #1
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b0      	blx	r6
 800b560:	1c41      	adds	r1, r0, #1
 800b562:	d1c7      	bne.n	800b4f4 <__sflush_r+0x34>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0c4      	beq.n	800b4f4 <__sflush_r+0x34>
 800b56a:	2b1d      	cmp	r3, #29
 800b56c:	d001      	beq.n	800b572 <__sflush_r+0xb2>
 800b56e:	2b16      	cmp	r3, #22
 800b570:	d101      	bne.n	800b576 <__sflush_r+0xb6>
 800b572:	602f      	str	r7, [r5, #0]
 800b574:	e7b1      	b.n	800b4da <__sflush_r+0x1a>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	e7ad      	b.n	800b4dc <__sflush_r+0x1c>
 800b580:	690f      	ldr	r7, [r1, #16]
 800b582:	2f00      	cmp	r7, #0
 800b584:	d0a9      	beq.n	800b4da <__sflush_r+0x1a>
 800b586:	0793      	lsls	r3, r2, #30
 800b588:	bf18      	it	ne
 800b58a:	2300      	movne	r3, #0
 800b58c:	680e      	ldr	r6, [r1, #0]
 800b58e:	bf08      	it	eq
 800b590:	694b      	ldreq	r3, [r1, #20]
 800b592:	eba6 0807 	sub.w	r8, r6, r7
 800b596:	600f      	str	r7, [r1, #0]
 800b598:	608b      	str	r3, [r1, #8]
 800b59a:	f1b8 0f00 	cmp.w	r8, #0
 800b59e:	dd9c      	ble.n	800b4da <__sflush_r+0x1a>
 800b5a0:	4643      	mov	r3, r8
 800b5a2:	463a      	mov	r2, r7
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	6a21      	ldr	r1, [r4, #32]
 800b5a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5aa:	47b0      	blx	r6
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	dc06      	bgt.n	800b5be <__sflush_r+0xfe>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	e78e      	b.n	800b4dc <__sflush_r+0x1c>
 800b5be:	4407      	add	r7, r0
 800b5c0:	eba8 0800 	sub.w	r8, r8, r0
 800b5c4:	e7e9      	b.n	800b59a <__sflush_r+0xda>
 800b5c6:	bf00      	nop
 800b5c8:	20400001 	.word	0x20400001

0800b5cc <_fflush_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	690b      	ldr	r3, [r1, #16]
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	b913      	cbnz	r3, 800b5dc <_fflush_r+0x10>
 800b5d6:	2500      	movs	r5, #0
 800b5d8:	4628      	mov	r0, r5
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	b118      	cbz	r0, 800b5e6 <_fflush_r+0x1a>
 800b5de:	6983      	ldr	r3, [r0, #24]
 800b5e0:	b90b      	cbnz	r3, 800b5e6 <_fflush_r+0x1a>
 800b5e2:	f000 f887 	bl	800b6f4 <__sinit>
 800b5e6:	4b14      	ldr	r3, [pc, #80]	; (800b638 <_fflush_r+0x6c>)
 800b5e8:	429c      	cmp	r4, r3
 800b5ea:	d11b      	bne.n	800b624 <_fflush_r+0x58>
 800b5ec:	686c      	ldr	r4, [r5, #4]
 800b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0ef      	beq.n	800b5d6 <_fflush_r+0xa>
 800b5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5f8:	07d0      	lsls	r0, r2, #31
 800b5fa:	d404      	bmi.n	800b606 <_fflush_r+0x3a>
 800b5fc:	0599      	lsls	r1, r3, #22
 800b5fe:	d402      	bmi.n	800b606 <_fflush_r+0x3a>
 800b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b602:	f000 f915 	bl	800b830 <__retarget_lock_acquire_recursive>
 800b606:	4628      	mov	r0, r5
 800b608:	4621      	mov	r1, r4
 800b60a:	f7ff ff59 	bl	800b4c0 <__sflush_r>
 800b60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b610:	4605      	mov	r5, r0
 800b612:	07da      	lsls	r2, r3, #31
 800b614:	d4e0      	bmi.n	800b5d8 <_fflush_r+0xc>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	059b      	lsls	r3, r3, #22
 800b61a:	d4dd      	bmi.n	800b5d8 <_fflush_r+0xc>
 800b61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b61e:	f000 f908 	bl	800b832 <__retarget_lock_release_recursive>
 800b622:	e7d9      	b.n	800b5d8 <_fflush_r+0xc>
 800b624:	4b05      	ldr	r3, [pc, #20]	; (800b63c <_fflush_r+0x70>)
 800b626:	429c      	cmp	r4, r3
 800b628:	d101      	bne.n	800b62e <_fflush_r+0x62>
 800b62a:	68ac      	ldr	r4, [r5, #8]
 800b62c:	e7df      	b.n	800b5ee <_fflush_r+0x22>
 800b62e:	4b04      	ldr	r3, [pc, #16]	; (800b640 <_fflush_r+0x74>)
 800b630:	429c      	cmp	r4, r3
 800b632:	bf08      	it	eq
 800b634:	68ec      	ldreq	r4, [r5, #12]
 800b636:	e7da      	b.n	800b5ee <_fflush_r+0x22>
 800b638:	0800e034 	.word	0x0800e034
 800b63c:	0800e054 	.word	0x0800e054
 800b640:	0800e014 	.word	0x0800e014

0800b644 <std>:
 800b644:	2300      	movs	r3, #0
 800b646:	b510      	push	{r4, lr}
 800b648:	4604      	mov	r4, r0
 800b64a:	e9c0 3300 	strd	r3, r3, [r0]
 800b64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b652:	6083      	str	r3, [r0, #8]
 800b654:	8181      	strh	r1, [r0, #12]
 800b656:	6643      	str	r3, [r0, #100]	; 0x64
 800b658:	81c2      	strh	r2, [r0, #14]
 800b65a:	6183      	str	r3, [r0, #24]
 800b65c:	4619      	mov	r1, r3
 800b65e:	2208      	movs	r2, #8
 800b660:	305c      	adds	r0, #92	; 0x5c
 800b662:	f7fd fba1 	bl	8008da8 <memset>
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <std+0x38>)
 800b668:	6224      	str	r4, [r4, #32]
 800b66a:	6263      	str	r3, [r4, #36]	; 0x24
 800b66c:	4b04      	ldr	r3, [pc, #16]	; (800b680 <std+0x3c>)
 800b66e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <std+0x40>)
 800b672:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b674:	4b04      	ldr	r3, [pc, #16]	; (800b688 <std+0x44>)
 800b676:	6323      	str	r3, [r4, #48]	; 0x30
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	bf00      	nop
 800b67c:	0800b995 	.word	0x0800b995
 800b680:	0800b9b7 	.word	0x0800b9b7
 800b684:	0800b9ef 	.word	0x0800b9ef
 800b688:	0800ba13 	.word	0x0800ba13

0800b68c <_cleanup_r>:
 800b68c:	4901      	ldr	r1, [pc, #4]	; (800b694 <_cleanup_r+0x8>)
 800b68e:	f000 b8af 	b.w	800b7f0 <_fwalk_reent>
 800b692:	bf00      	nop
 800b694:	0800b5cd 	.word	0x0800b5cd

0800b698 <__sfmoreglue>:
 800b698:	b570      	push	{r4, r5, r6, lr}
 800b69a:	2568      	movs	r5, #104	; 0x68
 800b69c:	1e4a      	subs	r2, r1, #1
 800b69e:	4355      	muls	r5, r2
 800b6a0:	460e      	mov	r6, r1
 800b6a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6a6:	f7ff fa89 	bl	800abbc <_malloc_r>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	b140      	cbz	r0, 800b6c0 <__sfmoreglue+0x28>
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	e9c0 1600 	strd	r1, r6, [r0]
 800b6b4:	300c      	adds	r0, #12
 800b6b6:	60a0      	str	r0, [r4, #8]
 800b6b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6bc:	f7fd fb74 	bl	8008da8 <memset>
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	bd70      	pop	{r4, r5, r6, pc}

0800b6c4 <__sfp_lock_acquire>:
 800b6c4:	4801      	ldr	r0, [pc, #4]	; (800b6cc <__sfp_lock_acquire+0x8>)
 800b6c6:	f000 b8b3 	b.w	800b830 <__retarget_lock_acquire_recursive>
 800b6ca:	bf00      	nop
 800b6cc:	20001990 	.word	0x20001990

0800b6d0 <__sfp_lock_release>:
 800b6d0:	4801      	ldr	r0, [pc, #4]	; (800b6d8 <__sfp_lock_release+0x8>)
 800b6d2:	f000 b8ae 	b.w	800b832 <__retarget_lock_release_recursive>
 800b6d6:	bf00      	nop
 800b6d8:	20001990 	.word	0x20001990

0800b6dc <__sinit_lock_acquire>:
 800b6dc:	4801      	ldr	r0, [pc, #4]	; (800b6e4 <__sinit_lock_acquire+0x8>)
 800b6de:	f000 b8a7 	b.w	800b830 <__retarget_lock_acquire_recursive>
 800b6e2:	bf00      	nop
 800b6e4:	2000198b 	.word	0x2000198b

0800b6e8 <__sinit_lock_release>:
 800b6e8:	4801      	ldr	r0, [pc, #4]	; (800b6f0 <__sinit_lock_release+0x8>)
 800b6ea:	f000 b8a2 	b.w	800b832 <__retarget_lock_release_recursive>
 800b6ee:	bf00      	nop
 800b6f0:	2000198b 	.word	0x2000198b

0800b6f4 <__sinit>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	f7ff fff0 	bl	800b6dc <__sinit_lock_acquire>
 800b6fc:	69a3      	ldr	r3, [r4, #24]
 800b6fe:	b11b      	cbz	r3, 800b708 <__sinit+0x14>
 800b700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b704:	f7ff bff0 	b.w	800b6e8 <__sinit_lock_release>
 800b708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b70c:	6523      	str	r3, [r4, #80]	; 0x50
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <__sinit+0x68>)
 800b710:	4a13      	ldr	r2, [pc, #76]	; (800b760 <__sinit+0x6c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	62a2      	str	r2, [r4, #40]	; 0x28
 800b716:	42a3      	cmp	r3, r4
 800b718:	bf08      	it	eq
 800b71a:	2301      	moveq	r3, #1
 800b71c:	4620      	mov	r0, r4
 800b71e:	bf08      	it	eq
 800b720:	61a3      	streq	r3, [r4, #24]
 800b722:	f000 f81f 	bl	800b764 <__sfp>
 800b726:	6060      	str	r0, [r4, #4]
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 f81b 	bl	800b764 <__sfp>
 800b72e:	60a0      	str	r0, [r4, #8]
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f817 	bl	800b764 <__sfp>
 800b736:	2200      	movs	r2, #0
 800b738:	2104      	movs	r1, #4
 800b73a:	60e0      	str	r0, [r4, #12]
 800b73c:	6860      	ldr	r0, [r4, #4]
 800b73e:	f7ff ff81 	bl	800b644 <std>
 800b742:	2201      	movs	r2, #1
 800b744:	2109      	movs	r1, #9
 800b746:	68a0      	ldr	r0, [r4, #8]
 800b748:	f7ff ff7c 	bl	800b644 <std>
 800b74c:	2202      	movs	r2, #2
 800b74e:	2112      	movs	r1, #18
 800b750:	68e0      	ldr	r0, [r4, #12]
 800b752:	f7ff ff77 	bl	800b644 <std>
 800b756:	2301      	movs	r3, #1
 800b758:	61a3      	str	r3, [r4, #24]
 800b75a:	e7d1      	b.n	800b700 <__sinit+0xc>
 800b75c:	0800dc90 	.word	0x0800dc90
 800b760:	0800b68d 	.word	0x0800b68d

0800b764 <__sfp>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	4607      	mov	r7, r0
 800b768:	f7ff ffac 	bl	800b6c4 <__sfp_lock_acquire>
 800b76c:	4b1e      	ldr	r3, [pc, #120]	; (800b7e8 <__sfp+0x84>)
 800b76e:	681e      	ldr	r6, [r3, #0]
 800b770:	69b3      	ldr	r3, [r6, #24]
 800b772:	b913      	cbnz	r3, 800b77a <__sfp+0x16>
 800b774:	4630      	mov	r0, r6
 800b776:	f7ff ffbd 	bl	800b6f4 <__sinit>
 800b77a:	3648      	adds	r6, #72	; 0x48
 800b77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b780:	3b01      	subs	r3, #1
 800b782:	d503      	bpl.n	800b78c <__sfp+0x28>
 800b784:	6833      	ldr	r3, [r6, #0]
 800b786:	b30b      	cbz	r3, 800b7cc <__sfp+0x68>
 800b788:	6836      	ldr	r6, [r6, #0]
 800b78a:	e7f7      	b.n	800b77c <__sfp+0x18>
 800b78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b790:	b9d5      	cbnz	r5, 800b7c8 <__sfp+0x64>
 800b792:	4b16      	ldr	r3, [pc, #88]	; (800b7ec <__sfp+0x88>)
 800b794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b798:	60e3      	str	r3, [r4, #12]
 800b79a:	6665      	str	r5, [r4, #100]	; 0x64
 800b79c:	f000 f847 	bl	800b82e <__retarget_lock_init_recursive>
 800b7a0:	f7ff ff96 	bl	800b6d0 <__sfp_lock_release>
 800b7a4:	2208      	movs	r2, #8
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7b0:	6025      	str	r5, [r4, #0]
 800b7b2:	61a5      	str	r5, [r4, #24]
 800b7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7b8:	f7fd faf6 	bl	8008da8 <memset>
 800b7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c8:	3468      	adds	r4, #104	; 0x68
 800b7ca:	e7d9      	b.n	800b780 <__sfp+0x1c>
 800b7cc:	2104      	movs	r1, #4
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f7ff ff62 	bl	800b698 <__sfmoreglue>
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	6030      	str	r0, [r6, #0]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d1d5      	bne.n	800b788 <__sfp+0x24>
 800b7dc:	f7ff ff78 	bl	800b6d0 <__sfp_lock_release>
 800b7e0:	230c      	movs	r3, #12
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	e7ee      	b.n	800b7c4 <__sfp+0x60>
 800b7e6:	bf00      	nop
 800b7e8:	0800dc90 	.word	0x0800dc90
 800b7ec:	ffff0001 	.word	0xffff0001

0800b7f0 <_fwalk_reent>:
 800b7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	4688      	mov	r8, r1
 800b7f8:	2700      	movs	r7, #0
 800b7fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b802:	f1b9 0901 	subs.w	r9, r9, #1
 800b806:	d505      	bpl.n	800b814 <_fwalk_reent+0x24>
 800b808:	6824      	ldr	r4, [r4, #0]
 800b80a:	2c00      	cmp	r4, #0
 800b80c:	d1f7      	bne.n	800b7fe <_fwalk_reent+0xe>
 800b80e:	4638      	mov	r0, r7
 800b810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b814:	89ab      	ldrh	r3, [r5, #12]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d907      	bls.n	800b82a <_fwalk_reent+0x3a>
 800b81a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b81e:	3301      	adds	r3, #1
 800b820:	d003      	beq.n	800b82a <_fwalk_reent+0x3a>
 800b822:	4629      	mov	r1, r5
 800b824:	4630      	mov	r0, r6
 800b826:	47c0      	blx	r8
 800b828:	4307      	orrs	r7, r0
 800b82a:	3568      	adds	r5, #104	; 0x68
 800b82c:	e7e9      	b.n	800b802 <_fwalk_reent+0x12>

0800b82e <__retarget_lock_init_recursive>:
 800b82e:	4770      	bx	lr

0800b830 <__retarget_lock_acquire_recursive>:
 800b830:	4770      	bx	lr

0800b832 <__retarget_lock_release_recursive>:
 800b832:	4770      	bx	lr

0800b834 <__swhatbuf_r>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	460e      	mov	r6, r1
 800b838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83c:	4614      	mov	r4, r2
 800b83e:	2900      	cmp	r1, #0
 800b840:	461d      	mov	r5, r3
 800b842:	b096      	sub	sp, #88	; 0x58
 800b844:	da07      	bge.n	800b856 <__swhatbuf_r+0x22>
 800b846:	2300      	movs	r3, #0
 800b848:	602b      	str	r3, [r5, #0]
 800b84a:	89b3      	ldrh	r3, [r6, #12]
 800b84c:	061a      	lsls	r2, r3, #24
 800b84e:	d410      	bmi.n	800b872 <__swhatbuf_r+0x3e>
 800b850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b854:	e00e      	b.n	800b874 <__swhatbuf_r+0x40>
 800b856:	466a      	mov	r2, sp
 800b858:	f000 f902 	bl	800ba60 <_fstat_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	dbf2      	blt.n	800b846 <__swhatbuf_r+0x12>
 800b860:	9a01      	ldr	r2, [sp, #4]
 800b862:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b866:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b86a:	425a      	negs	r2, r3
 800b86c:	415a      	adcs	r2, r3
 800b86e:	602a      	str	r2, [r5, #0]
 800b870:	e7ee      	b.n	800b850 <__swhatbuf_r+0x1c>
 800b872:	2340      	movs	r3, #64	; 0x40
 800b874:	2000      	movs	r0, #0
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	b016      	add	sp, #88	; 0x58
 800b87a:	bd70      	pop	{r4, r5, r6, pc}

0800b87c <__smakebuf_r>:
 800b87c:	898b      	ldrh	r3, [r1, #12]
 800b87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b880:	079d      	lsls	r5, r3, #30
 800b882:	4606      	mov	r6, r0
 800b884:	460c      	mov	r4, r1
 800b886:	d507      	bpl.n	800b898 <__smakebuf_r+0x1c>
 800b888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	2301      	movs	r3, #1
 800b892:	6163      	str	r3, [r4, #20]
 800b894:	b002      	add	sp, #8
 800b896:	bd70      	pop	{r4, r5, r6, pc}
 800b898:	466a      	mov	r2, sp
 800b89a:	ab01      	add	r3, sp, #4
 800b89c:	f7ff ffca 	bl	800b834 <__swhatbuf_r>
 800b8a0:	9900      	ldr	r1, [sp, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff f989 	bl	800abbc <_malloc_r>
 800b8aa:	b948      	cbnz	r0, 800b8c0 <__smakebuf_r+0x44>
 800b8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b0:	059a      	lsls	r2, r3, #22
 800b8b2:	d4ef      	bmi.n	800b894 <__smakebuf_r+0x18>
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	f043 0302 	orr.w	r3, r3, #2
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	e7e3      	b.n	800b888 <__smakebuf_r+0xc>
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <__smakebuf_r+0x7c>)
 800b8c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	6020      	str	r0, [r4, #0]
 800b8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8cc:	81a3      	strh	r3, [r4, #12]
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	6120      	str	r0, [r4, #16]
 800b8d2:	6163      	str	r3, [r4, #20]
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	b15b      	cbz	r3, 800b8f0 <__smakebuf_r+0x74>
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8de:	f000 f8d1 	bl	800ba84 <_isatty_r>
 800b8e2:	b128      	cbz	r0, 800b8f0 <__smakebuf_r+0x74>
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	f023 0303 	bic.w	r3, r3, #3
 800b8ea:	f043 0301 	orr.w	r3, r3, #1
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	89a0      	ldrh	r0, [r4, #12]
 800b8f2:	4305      	orrs	r5, r0
 800b8f4:	81a5      	strh	r5, [r4, #12]
 800b8f6:	e7cd      	b.n	800b894 <__smakebuf_r+0x18>
 800b8f8:	0800b68d 	.word	0x0800b68d

0800b8fc <_malloc_usable_size_r>:
 800b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b900:	1f18      	subs	r0, r3, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfbc      	itt	lt
 800b906:	580b      	ldrlt	r3, [r1, r0]
 800b908:	18c0      	addlt	r0, r0, r3
 800b90a:	4770      	bx	lr

0800b90c <_raise_r>:
 800b90c:	291f      	cmp	r1, #31
 800b90e:	b538      	push	{r3, r4, r5, lr}
 800b910:	4604      	mov	r4, r0
 800b912:	460d      	mov	r5, r1
 800b914:	d904      	bls.n	800b920 <_raise_r+0x14>
 800b916:	2316      	movs	r3, #22
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	f04f 30ff 	mov.w	r0, #4294967295
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b922:	b112      	cbz	r2, 800b92a <_raise_r+0x1e>
 800b924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b928:	b94b      	cbnz	r3, 800b93e <_raise_r+0x32>
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 f830 	bl	800b990 <_getpid_r>
 800b930:	462a      	mov	r2, r5
 800b932:	4601      	mov	r1, r0
 800b934:	4620      	mov	r0, r4
 800b936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93a:	f000 b817 	b.w	800b96c <_kill_r>
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d00a      	beq.n	800b958 <_raise_r+0x4c>
 800b942:	1c59      	adds	r1, r3, #1
 800b944:	d103      	bne.n	800b94e <_raise_r+0x42>
 800b946:	2316      	movs	r3, #22
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	2001      	movs	r0, #1
 800b94c:	e7e7      	b.n	800b91e <_raise_r+0x12>
 800b94e:	2400      	movs	r4, #0
 800b950:	4628      	mov	r0, r5
 800b952:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b956:	4798      	blx	r3
 800b958:	2000      	movs	r0, #0
 800b95a:	e7e0      	b.n	800b91e <_raise_r+0x12>

0800b95c <raise>:
 800b95c:	4b02      	ldr	r3, [pc, #8]	; (800b968 <raise+0xc>)
 800b95e:	4601      	mov	r1, r0
 800b960:	6818      	ldr	r0, [r3, #0]
 800b962:	f7ff bfd3 	b.w	800b90c <_raise_r>
 800b966:	bf00      	nop
 800b968:	20000024 	.word	0x20000024

0800b96c <_kill_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	2300      	movs	r3, #0
 800b970:	4d06      	ldr	r5, [pc, #24]	; (800b98c <_kill_r+0x20>)
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	f7f9 f814 	bl	80049a6 <_kill>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	d102      	bne.n	800b988 <_kill_r+0x1c>
 800b982:	682b      	ldr	r3, [r5, #0]
 800b984:	b103      	cbz	r3, 800b988 <_kill_r+0x1c>
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	bd38      	pop	{r3, r4, r5, pc}
 800b98a:	bf00      	nop
 800b98c:	20001984 	.word	0x20001984

0800b990 <_getpid_r>:
 800b990:	f7f9 b802 	b.w	8004998 <_getpid>

0800b994 <__sread>:
 800b994:	b510      	push	{r4, lr}
 800b996:	460c      	mov	r4, r1
 800b998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99c:	f000 f894 	bl	800bac8 <_read_r>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	bfab      	itete	ge
 800b9a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a8:	181b      	addge	r3, r3, r0
 800b9aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ae:	bfac      	ite	ge
 800b9b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9b2:	81a3      	strhlt	r3, [r4, #12]
 800b9b4:	bd10      	pop	{r4, pc}

0800b9b6 <__swrite>:
 800b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ba:	461f      	mov	r7, r3
 800b9bc:	898b      	ldrh	r3, [r1, #12]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	05db      	lsls	r3, r3, #23
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	4616      	mov	r6, r2
 800b9c6:	d505      	bpl.n	800b9d4 <__swrite+0x1e>
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d0:	f000 f868 	bl	800baa4 <_lseek_r>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	4632      	mov	r2, r6
 800b9d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	4628      	mov	r0, r5
 800b9e0:	463b      	mov	r3, r7
 800b9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	f000 b817 	b.w	800ba1c <_write_r>

0800b9ee <__sseek>:
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f6:	f000 f855 	bl	800baa4 <_lseek_r>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	bf15      	itete	ne
 800ba00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba0a:	81a3      	strheq	r3, [r4, #12]
 800ba0c:	bf18      	it	ne
 800ba0e:	81a3      	strhne	r3, [r4, #12]
 800ba10:	bd10      	pop	{r4, pc}

0800ba12 <__sclose>:
 800ba12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba16:	f000 b813 	b.w	800ba40 <_close_r>
	...

0800ba1c <_write_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4604      	mov	r4, r0
 800ba20:	4608      	mov	r0, r1
 800ba22:	4611      	mov	r1, r2
 800ba24:	2200      	movs	r2, #0
 800ba26:	4d05      	ldr	r5, [pc, #20]	; (800ba3c <_write_r+0x20>)
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7f8 fff2 	bl	8004a14 <_write>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_write_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_write_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20001984 	.word	0x20001984

0800ba40 <_close_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	2300      	movs	r3, #0
 800ba44:	4d05      	ldr	r5, [pc, #20]	; (800ba5c <_close_r+0x1c>)
 800ba46:	4604      	mov	r4, r0
 800ba48:	4608      	mov	r0, r1
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	f7f8 fffe 	bl	8004a4c <_close>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	d102      	bne.n	800ba5a <_close_r+0x1a>
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	b103      	cbz	r3, 800ba5a <_close_r+0x1a>
 800ba58:	6023      	str	r3, [r4, #0]
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	20001984 	.word	0x20001984

0800ba60 <_fstat_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	2300      	movs	r3, #0
 800ba64:	4d06      	ldr	r5, [pc, #24]	; (800ba80 <_fstat_r+0x20>)
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	f7f8 fff8 	bl	8004a62 <_fstat>
 800ba72:	1c43      	adds	r3, r0, #1
 800ba74:	d102      	bne.n	800ba7c <_fstat_r+0x1c>
 800ba76:	682b      	ldr	r3, [r5, #0]
 800ba78:	b103      	cbz	r3, 800ba7c <_fstat_r+0x1c>
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	bd38      	pop	{r3, r4, r5, pc}
 800ba7e:	bf00      	nop
 800ba80:	20001984 	.word	0x20001984

0800ba84 <_isatty_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	2300      	movs	r3, #0
 800ba88:	4d05      	ldr	r5, [pc, #20]	; (800baa0 <_isatty_r+0x1c>)
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	602b      	str	r3, [r5, #0]
 800ba90:	f7f8 fff6 	bl	8004a80 <_isatty>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_isatty_r+0x1a>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_isatty_r+0x1a>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	20001984 	.word	0x20001984

0800baa4 <_lseek_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	4611      	mov	r1, r2
 800baac:	2200      	movs	r2, #0
 800baae:	4d05      	ldr	r5, [pc, #20]	; (800bac4 <_lseek_r+0x20>)
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	f7f8 ffee 	bl	8004a94 <_lseek>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_lseek_r+0x1e>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_lseek_r+0x1e>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	20001984 	.word	0x20001984

0800bac8 <_read_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	4611      	mov	r1, r2
 800bad0:	2200      	movs	r2, #0
 800bad2:	4d05      	ldr	r5, [pc, #20]	; (800bae8 <_read_r+0x20>)
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f7f8 ff7f 	bl	80049da <_read>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_read_r+0x1e>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_read_r+0x1e>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	20001984 	.word	0x20001984

0800baec <cos>:
 800baec:	b530      	push	{r4, r5, lr}
 800baee:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <cos+0x7c>)
 800baf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800baf4:	4293      	cmp	r3, r2
 800baf6:	b087      	sub	sp, #28
 800baf8:	dc04      	bgt.n	800bb04 <cos+0x18>
 800bafa:	2200      	movs	r2, #0
 800bafc:	2300      	movs	r3, #0
 800bafe:	f001 f8df 	bl	800ccc0 <__kernel_cos>
 800bb02:	e006      	b.n	800bb12 <cos+0x26>
 800bb04:	4a19      	ldr	r2, [pc, #100]	; (800bb6c <cos+0x80>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	dd05      	ble.n	800bb16 <cos+0x2a>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	f7f4 fb97 	bl	8000240 <__aeabi_dsub>
 800bb12:	b007      	add	sp, #28
 800bb14:	bd30      	pop	{r4, r5, pc}
 800bb16:	aa02      	add	r2, sp, #8
 800bb18:	f000 fe36 	bl	800c788 <__ieee754_rem_pio2>
 800bb1c:	f000 0003 	and.w	r0, r0, #3
 800bb20:	2801      	cmp	r0, #1
 800bb22:	d007      	beq.n	800bb34 <cos+0x48>
 800bb24:	2802      	cmp	r0, #2
 800bb26:	d00f      	beq.n	800bb48 <cos+0x5c>
 800bb28:	b9a8      	cbnz	r0, 800bb56 <cos+0x6a>
 800bb2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb32:	e7e4      	b.n	800bafe <cos+0x12>
 800bb34:	9000      	str	r0, [sp, #0]
 800bb36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb3e:	f001 fcc7 	bl	800d4d0 <__kernel_sin>
 800bb42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bb46:	e7e4      	b.n	800bb12 <cos+0x26>
 800bb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb50:	f001 f8b6 	bl	800ccc0 <__kernel_cos>
 800bb54:	e7f5      	b.n	800bb42 <cos+0x56>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb62:	f001 fcb5 	bl	800d4d0 <__kernel_sin>
 800bb66:	e7d4      	b.n	800bb12 <cos+0x26>
 800bb68:	3fe921fb 	.word	0x3fe921fb
 800bb6c:	7fefffff 	.word	0x7fefffff

0800bb70 <sin>:
 800bb70:	b530      	push	{r4, r5, lr}
 800bb72:	4a20      	ldr	r2, [pc, #128]	; (800bbf4 <sin+0x84>)
 800bb74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	dc06      	bgt.n	800bb8c <sin+0x1c>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	2200      	movs	r2, #0
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	2300      	movs	r3, #0
 800bb86:	f001 fca3 	bl	800d4d0 <__kernel_sin>
 800bb8a:	e006      	b.n	800bb9a <sin+0x2a>
 800bb8c:	4a1a      	ldr	r2, [pc, #104]	; (800bbf8 <sin+0x88>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	dd05      	ble.n	800bb9e <sin+0x2e>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	f7f4 fb53 	bl	8000240 <__aeabi_dsub>
 800bb9a:	b007      	add	sp, #28
 800bb9c:	bd30      	pop	{r4, r5, pc}
 800bb9e:	aa02      	add	r2, sp, #8
 800bba0:	f000 fdf2 	bl	800c788 <__ieee754_rem_pio2>
 800bba4:	f000 0003 	and.w	r0, r0, #3
 800bba8:	2801      	cmp	r0, #1
 800bbaa:	d009      	beq.n	800bbc0 <sin+0x50>
 800bbac:	2802      	cmp	r0, #2
 800bbae:	d00e      	beq.n	800bbce <sin+0x5e>
 800bbb0:	b9c0      	cbnz	r0, 800bbe4 <sin+0x74>
 800bbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbbe:	e7e2      	b.n	800bb86 <sin+0x16>
 800bbc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbc8:	f001 f87a 	bl	800ccc0 <__kernel_cos>
 800bbcc:	e7e5      	b.n	800bb9a <sin+0x2a>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbda:	f001 fc79 	bl	800d4d0 <__kernel_sin>
 800bbde:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bbe2:	e7da      	b.n	800bb9a <sin+0x2a>
 800bbe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbec:	f001 f868 	bl	800ccc0 <__kernel_cos>
 800bbf0:	e7f5      	b.n	800bbde <sin+0x6e>
 800bbf2:	bf00      	nop
 800bbf4:	3fe921fb 	.word	0x3fe921fb
 800bbf8:	7fefffff 	.word	0x7fefffff

0800bbfc <pow>:
 800bbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc00:	461f      	mov	r7, r3
 800bc02:	4680      	mov	r8, r0
 800bc04:	4689      	mov	r9, r1
 800bc06:	4616      	mov	r6, r2
 800bc08:	f000 f8a6 	bl	800bd58 <__ieee754_pow>
 800bc0c:	4b4d      	ldr	r3, [pc, #308]	; (800bd44 <pow+0x148>)
 800bc0e:	4604      	mov	r4, r0
 800bc10:	f993 3000 	ldrsb.w	r3, [r3]
 800bc14:	460d      	mov	r5, r1
 800bc16:	3301      	adds	r3, #1
 800bc18:	d015      	beq.n	800bc46 <pow+0x4a>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 ff5f 	bl	8000ae4 <__aeabi_dcmpun>
 800bc26:	b970      	cbnz	r0, 800bc46 <pow+0x4a>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 ff58 	bl	8000ae4 <__aeabi_dcmpun>
 800bc34:	2200      	movs	r2, #0
 800bc36:	2300      	movs	r3, #0
 800bc38:	b148      	cbz	r0, 800bc4e <pow+0x52>
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 ff1f 	bl	8000a80 <__aeabi_dcmpeq>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d17b      	bne.n	800bd3e <pow+0x142>
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	4640      	mov	r0, r8
 800bc50:	4649      	mov	r1, r9
 800bc52:	f7f4 ff15 	bl	8000a80 <__aeabi_dcmpeq>
 800bc56:	b1e0      	cbz	r0, 800bc92 <pow+0x96>
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 ff0e 	bl	8000a80 <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d16a      	bne.n	800bd3e <pow+0x142>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	f001 fce9 	bl	800d642 <finite>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d0e8      	beq.n	800bc46 <pow+0x4a>
 800bc74:	2200      	movs	r2, #0
 800bc76:	2300      	movs	r3, #0
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	f7f4 ff0a 	bl	8000a94 <__aeabi_dcmplt>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d0e0      	beq.n	800bc46 <pow+0x4a>
 800bc84:	f7fd f866 	bl	8008d54 <__errno>
 800bc88:	2321      	movs	r3, #33	; 0x21
 800bc8a:	2400      	movs	r4, #0
 800bc8c:	6003      	str	r3, [r0, #0]
 800bc8e:	4d2e      	ldr	r5, [pc, #184]	; (800bd48 <pow+0x14c>)
 800bc90:	e7d9      	b.n	800bc46 <pow+0x4a>
 800bc92:	4620      	mov	r0, r4
 800bc94:	4629      	mov	r1, r5
 800bc96:	f001 fcd4 	bl	800d642 <finite>
 800bc9a:	bba8      	cbnz	r0, 800bd08 <pow+0x10c>
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f001 fccf 	bl	800d642 <finite>
 800bca4:	b380      	cbz	r0, 800bd08 <pow+0x10c>
 800bca6:	4630      	mov	r0, r6
 800bca8:	4639      	mov	r1, r7
 800bcaa:	f001 fcca 	bl	800d642 <finite>
 800bcae:	b358      	cbz	r0, 800bd08 <pow+0x10c>
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f7f4 ff14 	bl	8000ae4 <__aeabi_dcmpun>
 800bcbc:	b160      	cbz	r0, 800bcd8 <pow+0xdc>
 800bcbe:	f7fd f849 	bl	8008d54 <__errno>
 800bcc2:	2321      	movs	r3, #33	; 0x21
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	6003      	str	r3, [r0, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4610      	mov	r0, r2
 800bccc:	4619      	mov	r1, r3
 800bcce:	f7f4 fd99 	bl	8000804 <__aeabi_ddiv>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	e7b6      	b.n	800bc46 <pow+0x4a>
 800bcd8:	f7fd f83c 	bl	8008d54 <__errno>
 800bcdc:	2322      	movs	r3, #34	; 0x22
 800bcde:	2200      	movs	r2, #0
 800bce0:	6003      	str	r3, [r0, #0]
 800bce2:	4649      	mov	r1, r9
 800bce4:	2300      	movs	r3, #0
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7f4 fed4 	bl	8000a94 <__aeabi_dcmplt>
 800bcec:	2400      	movs	r4, #0
 800bcee:	b148      	cbz	r0, 800bd04 <pow+0x108>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f001 fd32 	bl	800d75c <rint>
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	463b      	mov	r3, r7
 800bcfc:	f7f4 fec0 	bl	8000a80 <__aeabi_dcmpeq>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d0c4      	beq.n	800bc8e <pow+0x92>
 800bd04:	4d11      	ldr	r5, [pc, #68]	; (800bd4c <pow+0x150>)
 800bd06:	e79e      	b.n	800bc46 <pow+0x4a>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 feb6 	bl	8000a80 <__aeabi_dcmpeq>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d096      	beq.n	800bc46 <pow+0x4a>
 800bd18:	4640      	mov	r0, r8
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	f001 fc91 	bl	800d642 <finite>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d090      	beq.n	800bc46 <pow+0x4a>
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	f001 fc8b 	bl	800d642 <finite>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d08a      	beq.n	800bc46 <pow+0x4a>
 800bd30:	f7fd f810 	bl	8008d54 <__errno>
 800bd34:	2322      	movs	r3, #34	; 0x22
 800bd36:	2400      	movs	r4, #0
 800bd38:	2500      	movs	r5, #0
 800bd3a:	6003      	str	r3, [r0, #0]
 800bd3c:	e783      	b.n	800bc46 <pow+0x4a>
 800bd3e:	2400      	movs	r4, #0
 800bd40:	4d03      	ldr	r5, [pc, #12]	; (800bd50 <pow+0x154>)
 800bd42:	e780      	b.n	800bc46 <pow+0x4a>
 800bd44:	200001f4 	.word	0x200001f4
 800bd48:	fff00000 	.word	0xfff00000
 800bd4c:	7ff00000 	.word	0x7ff00000
 800bd50:	3ff00000 	.word	0x3ff00000
 800bd54:	00000000 	.word	0x00000000

0800bd58 <__ieee754_pow>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	b093      	sub	sp, #76	; 0x4c
 800bd5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd62:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800bd66:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bd6a:	ea55 0302 	orrs.w	r3, r5, r2
 800bd6e:	4607      	mov	r7, r0
 800bd70:	4688      	mov	r8, r1
 800bd72:	f000 84bf 	beq.w	800c6f4 <__ieee754_pow+0x99c>
 800bd76:	4b7e      	ldr	r3, [pc, #504]	; (800bf70 <__ieee754_pow+0x218>)
 800bd78:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	4689      	mov	r9, r1
 800bd80:	4682      	mov	sl, r0
 800bd82:	dc09      	bgt.n	800bd98 <__ieee754_pow+0x40>
 800bd84:	d103      	bne.n	800bd8e <__ieee754_pow+0x36>
 800bd86:	b978      	cbnz	r0, 800bda8 <__ieee754_pow+0x50>
 800bd88:	42a5      	cmp	r5, r4
 800bd8a:	dd02      	ble.n	800bd92 <__ieee754_pow+0x3a>
 800bd8c:	e00c      	b.n	800bda8 <__ieee754_pow+0x50>
 800bd8e:	429d      	cmp	r5, r3
 800bd90:	dc02      	bgt.n	800bd98 <__ieee754_pow+0x40>
 800bd92:	429d      	cmp	r5, r3
 800bd94:	d10e      	bne.n	800bdb4 <__ieee754_pow+0x5c>
 800bd96:	b16a      	cbz	r2, 800bdb4 <__ieee754_pow+0x5c>
 800bd98:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd9c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bda0:	ea54 030a 	orrs.w	r3, r4, sl
 800bda4:	f000 84a6 	beq.w	800c6f4 <__ieee754_pow+0x99c>
 800bda8:	4872      	ldr	r0, [pc, #456]	; (800bf74 <__ieee754_pow+0x21c>)
 800bdaa:	b013      	add	sp, #76	; 0x4c
 800bdac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	f001 bcce 	b.w	800d750 <nan>
 800bdb4:	f1b9 0f00 	cmp.w	r9, #0
 800bdb8:	da39      	bge.n	800be2e <__ieee754_pow+0xd6>
 800bdba:	4b6f      	ldr	r3, [pc, #444]	; (800bf78 <__ieee754_pow+0x220>)
 800bdbc:	429d      	cmp	r5, r3
 800bdbe:	dc54      	bgt.n	800be6a <__ieee754_pow+0x112>
 800bdc0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	f340 84a6 	ble.w	800c716 <__ieee754_pow+0x9be>
 800bdca:	152b      	asrs	r3, r5, #20
 800bdcc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdd0:	2b14      	cmp	r3, #20
 800bdd2:	dd0f      	ble.n	800bdf4 <__ieee754_pow+0x9c>
 800bdd4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bdd8:	fa22 f103 	lsr.w	r1, r2, r3
 800bddc:	fa01 f303 	lsl.w	r3, r1, r3
 800bde0:	4293      	cmp	r3, r2
 800bde2:	f040 8498 	bne.w	800c716 <__ieee754_pow+0x9be>
 800bde6:	f001 0101 	and.w	r1, r1, #1
 800bdea:	f1c1 0302 	rsb	r3, r1, #2
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	b182      	cbz	r2, 800be14 <__ieee754_pow+0xbc>
 800bdf2:	e05e      	b.n	800beb2 <__ieee754_pow+0x15a>
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	d15a      	bne.n	800beae <__ieee754_pow+0x156>
 800bdf8:	f1c3 0314 	rsb	r3, r3, #20
 800bdfc:	fa45 f103 	asr.w	r1, r5, r3
 800be00:	fa01 f303 	lsl.w	r3, r1, r3
 800be04:	42ab      	cmp	r3, r5
 800be06:	f040 8483 	bne.w	800c710 <__ieee754_pow+0x9b8>
 800be0a:	f001 0101 	and.w	r1, r1, #1
 800be0e:	f1c1 0302 	rsb	r3, r1, #2
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	4b59      	ldr	r3, [pc, #356]	; (800bf7c <__ieee754_pow+0x224>)
 800be16:	429d      	cmp	r5, r3
 800be18:	d130      	bne.n	800be7c <__ieee754_pow+0x124>
 800be1a:	2e00      	cmp	r6, #0
 800be1c:	f280 8474 	bge.w	800c708 <__ieee754_pow+0x9b0>
 800be20:	463a      	mov	r2, r7
 800be22:	4643      	mov	r3, r8
 800be24:	2000      	movs	r0, #0
 800be26:	4955      	ldr	r1, [pc, #340]	; (800bf7c <__ieee754_pow+0x224>)
 800be28:	f7f4 fcec 	bl	8000804 <__aeabi_ddiv>
 800be2c:	e02f      	b.n	800be8e <__ieee754_pow+0x136>
 800be2e:	2300      	movs	r3, #0
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	2a00      	cmp	r2, #0
 800be34:	d13d      	bne.n	800beb2 <__ieee754_pow+0x15a>
 800be36:	4b4e      	ldr	r3, [pc, #312]	; (800bf70 <__ieee754_pow+0x218>)
 800be38:	429d      	cmp	r5, r3
 800be3a:	d1eb      	bne.n	800be14 <__ieee754_pow+0xbc>
 800be3c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800be40:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800be44:	ea53 030a 	orrs.w	r3, r3, sl
 800be48:	f000 8454 	beq.w	800c6f4 <__ieee754_pow+0x99c>
 800be4c:	4b4c      	ldr	r3, [pc, #304]	; (800bf80 <__ieee754_pow+0x228>)
 800be4e:	429c      	cmp	r4, r3
 800be50:	dd0d      	ble.n	800be6e <__ieee754_pow+0x116>
 800be52:	2e00      	cmp	r6, #0
 800be54:	f280 8454 	bge.w	800c700 <__ieee754_pow+0x9a8>
 800be58:	f04f 0b00 	mov.w	fp, #0
 800be5c:	f04f 0c00 	mov.w	ip, #0
 800be60:	4658      	mov	r0, fp
 800be62:	4661      	mov	r1, ip
 800be64:	b013      	add	sp, #76	; 0x4c
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	2302      	movs	r3, #2
 800be6c:	e7e0      	b.n	800be30 <__ieee754_pow+0xd8>
 800be6e:	2e00      	cmp	r6, #0
 800be70:	daf2      	bge.n	800be58 <__ieee754_pow+0x100>
 800be72:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800be76:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800be7a:	e7f1      	b.n	800be60 <__ieee754_pow+0x108>
 800be7c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800be80:	d108      	bne.n	800be94 <__ieee754_pow+0x13c>
 800be82:	463a      	mov	r2, r7
 800be84:	4643      	mov	r3, r8
 800be86:	4638      	mov	r0, r7
 800be88:	4641      	mov	r1, r8
 800be8a:	f7f4 fb91 	bl	80005b0 <__aeabi_dmul>
 800be8e:	4683      	mov	fp, r0
 800be90:	468c      	mov	ip, r1
 800be92:	e7e5      	b.n	800be60 <__ieee754_pow+0x108>
 800be94:	4b3b      	ldr	r3, [pc, #236]	; (800bf84 <__ieee754_pow+0x22c>)
 800be96:	429e      	cmp	r6, r3
 800be98:	d10b      	bne.n	800beb2 <__ieee754_pow+0x15a>
 800be9a:	f1b9 0f00 	cmp.w	r9, #0
 800be9e:	db08      	blt.n	800beb2 <__ieee754_pow+0x15a>
 800bea0:	4638      	mov	r0, r7
 800bea2:	4641      	mov	r1, r8
 800bea4:	b013      	add	sp, #76	; 0x4c
 800bea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beaa:	f000 be5d 	b.w	800cb68 <__ieee754_sqrt>
 800beae:	2300      	movs	r3, #0
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	4638      	mov	r0, r7
 800beb4:	4641      	mov	r1, r8
 800beb6:	f001 fbc1 	bl	800d63c <fabs>
 800beba:	4683      	mov	fp, r0
 800bebc:	468c      	mov	ip, r1
 800bebe:	f1ba 0f00 	cmp.w	sl, #0
 800bec2:	d129      	bne.n	800bf18 <__ieee754_pow+0x1c0>
 800bec4:	b124      	cbz	r4, 800bed0 <__ieee754_pow+0x178>
 800bec6:	4b2d      	ldr	r3, [pc, #180]	; (800bf7c <__ieee754_pow+0x224>)
 800bec8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800becc:	429a      	cmp	r2, r3
 800bece:	d123      	bne.n	800bf18 <__ieee754_pow+0x1c0>
 800bed0:	2e00      	cmp	r6, #0
 800bed2:	da07      	bge.n	800bee4 <__ieee754_pow+0x18c>
 800bed4:	465a      	mov	r2, fp
 800bed6:	4663      	mov	r3, ip
 800bed8:	2000      	movs	r0, #0
 800beda:	4928      	ldr	r1, [pc, #160]	; (800bf7c <__ieee754_pow+0x224>)
 800bedc:	f7f4 fc92 	bl	8000804 <__aeabi_ddiv>
 800bee0:	4683      	mov	fp, r0
 800bee2:	468c      	mov	ip, r1
 800bee4:	f1b9 0f00 	cmp.w	r9, #0
 800bee8:	daba      	bge.n	800be60 <__ieee754_pow+0x108>
 800beea:	9b00      	ldr	r3, [sp, #0]
 800beec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bef0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bef4:	4323      	orrs	r3, r4
 800bef6:	d108      	bne.n	800bf0a <__ieee754_pow+0x1b2>
 800bef8:	465a      	mov	r2, fp
 800befa:	4663      	mov	r3, ip
 800befc:	4658      	mov	r0, fp
 800befe:	4661      	mov	r1, ip
 800bf00:	f7f4 f99e 	bl	8000240 <__aeabi_dsub>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	e78e      	b.n	800be28 <__ieee754_pow+0xd0>
 800bf0a:	9b00      	ldr	r3, [sp, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d1a7      	bne.n	800be60 <__ieee754_pow+0x108>
 800bf10:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bf14:	469c      	mov	ip, r3
 800bf16:	e7a3      	b.n	800be60 <__ieee754_pow+0x108>
 800bf18:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf22:	9b00      	ldr	r3, [sp, #0]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	d104      	bne.n	800bf32 <__ieee754_pow+0x1da>
 800bf28:	463a      	mov	r2, r7
 800bf2a:	4643      	mov	r3, r8
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	4641      	mov	r1, r8
 800bf30:	e7e6      	b.n	800bf00 <__ieee754_pow+0x1a8>
 800bf32:	4b15      	ldr	r3, [pc, #84]	; (800bf88 <__ieee754_pow+0x230>)
 800bf34:	429d      	cmp	r5, r3
 800bf36:	f340 80f9 	ble.w	800c12c <__ieee754_pow+0x3d4>
 800bf3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bf3e:	429d      	cmp	r5, r3
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <__ieee754_pow+0x228>)
 800bf42:	dd09      	ble.n	800bf58 <__ieee754_pow+0x200>
 800bf44:	429c      	cmp	r4, r3
 800bf46:	dc0c      	bgt.n	800bf62 <__ieee754_pow+0x20a>
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	da85      	bge.n	800be58 <__ieee754_pow+0x100>
 800bf4c:	a306      	add	r3, pc, #24	; (adr r3, 800bf68 <__ieee754_pow+0x210>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	4610      	mov	r0, r2
 800bf54:	4619      	mov	r1, r3
 800bf56:	e798      	b.n	800be8a <__ieee754_pow+0x132>
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	dbf5      	blt.n	800bf48 <__ieee754_pow+0x1f0>
 800bf5c:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <__ieee754_pow+0x224>)
 800bf5e:	429c      	cmp	r4, r3
 800bf60:	dd14      	ble.n	800bf8c <__ieee754_pow+0x234>
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	dcf2      	bgt.n	800bf4c <__ieee754_pow+0x1f4>
 800bf66:	e777      	b.n	800be58 <__ieee754_pow+0x100>
 800bf68:	8800759c 	.word	0x8800759c
 800bf6c:	7e37e43c 	.word	0x7e37e43c
 800bf70:	7ff00000 	.word	0x7ff00000
 800bf74:	0800df08 	.word	0x0800df08
 800bf78:	433fffff 	.word	0x433fffff
 800bf7c:	3ff00000 	.word	0x3ff00000
 800bf80:	3fefffff 	.word	0x3fefffff
 800bf84:	3fe00000 	.word	0x3fe00000
 800bf88:	41e00000 	.word	0x41e00000
 800bf8c:	4661      	mov	r1, ip
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4658      	mov	r0, fp
 800bf92:	4b61      	ldr	r3, [pc, #388]	; (800c118 <__ieee754_pow+0x3c0>)
 800bf94:	f7f4 f954 	bl	8000240 <__aeabi_dsub>
 800bf98:	a355      	add	r3, pc, #340	; (adr r3, 800c0f0 <__ieee754_pow+0x398>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	f7f4 fb05 	bl	80005b0 <__aeabi_dmul>
 800bfa6:	a354      	add	r3, pc, #336	; (adr r3, 800c0f8 <__ieee754_pow+0x3a0>)
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	4606      	mov	r6, r0
 800bfae:	460f      	mov	r7, r1
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f7f4 fafc 	bl	80005b0 <__aeabi_dmul>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4682      	mov	sl, r0
 800bfbc:	468b      	mov	fp, r1
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4b56      	ldr	r3, [pc, #344]	; (800c11c <__ieee754_pow+0x3c4>)
 800bfc4:	f7f4 faf4 	bl	80005b0 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	a14c      	add	r1, pc, #304	; (adr r1, 800c100 <__ieee754_pow+0x3a8>)
 800bfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfd2:	f7f4 f935 	bl	8000240 <__aeabi_dsub>
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	462b      	mov	r3, r5
 800bfda:	f7f4 fae9 	bl	80005b0 <__aeabi_dmul>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	494e      	ldr	r1, [pc, #312]	; (800c120 <__ieee754_pow+0x3c8>)
 800bfe6:	f7f4 f92b 	bl	8000240 <__aeabi_dsub>
 800bfea:	4622      	mov	r2, r4
 800bfec:	462b      	mov	r3, r5
 800bfee:	4680      	mov	r8, r0
 800bff0:	4689      	mov	r9, r1
 800bff2:	4620      	mov	r0, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	f7f4 fadb 	bl	80005b0 <__aeabi_dmul>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4640      	mov	r0, r8
 800c000:	4649      	mov	r1, r9
 800c002:	f7f4 fad5 	bl	80005b0 <__aeabi_dmul>
 800c006:	a340      	add	r3, pc, #256	; (adr r3, 800c108 <__ieee754_pow+0x3b0>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f7f4 fad0 	bl	80005b0 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	f7f4 f912 	bl	8000240 <__aeabi_dsub>
 800c01c:	f04f 0a00 	mov.w	sl, #0
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4604      	mov	r4, r0
 800c026:	460d      	mov	r5, r1
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 f90a 	bl	8000244 <__adddf3>
 800c030:	4632      	mov	r2, r6
 800c032:	463b      	mov	r3, r7
 800c034:	4650      	mov	r0, sl
 800c036:	468b      	mov	fp, r1
 800c038:	f7f4 f902 	bl	8000240 <__aeabi_dsub>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4620      	mov	r0, r4
 800c042:	4629      	mov	r1, r5
 800c044:	f7f4 f8fc 	bl	8000240 <__aeabi_dsub>
 800c048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c04c:	9b00      	ldr	r3, [sp, #0]
 800c04e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c050:	3b01      	subs	r3, #1
 800c052:	4313      	orrs	r3, r2
 800c054:	f04f 0600 	mov.w	r6, #0
 800c058:	f04f 0200 	mov.w	r2, #0
 800c05c:	bf0c      	ite	eq
 800c05e:	4b31      	ldreq	r3, [pc, #196]	; (800c124 <__ieee754_pow+0x3cc>)
 800c060:	4b2d      	ldrne	r3, [pc, #180]	; (800c118 <__ieee754_pow+0x3c0>)
 800c062:	4604      	mov	r4, r0
 800c064:	460d      	mov	r5, r1
 800c066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06a:	e9cd 2300 	strd	r2, r3, [sp]
 800c06e:	4632      	mov	r2, r6
 800c070:	463b      	mov	r3, r7
 800c072:	f7f4 f8e5 	bl	8000240 <__aeabi_dsub>
 800c076:	4652      	mov	r2, sl
 800c078:	465b      	mov	r3, fp
 800c07a:	f7f4 fa99 	bl	80005b0 <__aeabi_dmul>
 800c07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c082:	4680      	mov	r8, r0
 800c084:	4689      	mov	r9, r1
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fa91 	bl	80005b0 <__aeabi_dmul>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	f7f4 f8d5 	bl	8000244 <__adddf3>
 800c09a:	4632      	mov	r2, r6
 800c09c:	463b      	mov	r3, r7
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	4650      	mov	r0, sl
 800c0a4:	4659      	mov	r1, fp
 800c0a6:	f7f4 fa83 	bl	80005b0 <__aeabi_dmul>
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0ba:	f7f4 f8c3 	bl	8000244 <__adddf3>
 800c0be:	4b1a      	ldr	r3, [pc, #104]	; (800c128 <__ieee754_pow+0x3d0>)
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	4299      	cmp	r1, r3
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	460e      	mov	r6, r1
 800c0c8:	f340 82ed 	ble.w	800c6a6 <__ieee754_pow+0x94e>
 800c0cc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c0d0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c0d4:	4303      	orrs	r3, r0
 800c0d6:	f000 81e7 	beq.w	800c4a8 <__ieee754_pow+0x750>
 800c0da:	a30d      	add	r3, pc, #52	; (adr r3, 800c110 <__ieee754_pow+0x3b8>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e4:	f7f4 fa64 	bl	80005b0 <__aeabi_dmul>
 800c0e8:	a309      	add	r3, pc, #36	; (adr r3, 800c110 <__ieee754_pow+0x3b8>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	e6cc      	b.n	800be8a <__ieee754_pow+0x132>
 800c0f0:	60000000 	.word	0x60000000
 800c0f4:	3ff71547 	.word	0x3ff71547
 800c0f8:	f85ddf44 	.word	0xf85ddf44
 800c0fc:	3e54ae0b 	.word	0x3e54ae0b
 800c100:	55555555 	.word	0x55555555
 800c104:	3fd55555 	.word	0x3fd55555
 800c108:	652b82fe 	.word	0x652b82fe
 800c10c:	3ff71547 	.word	0x3ff71547
 800c110:	8800759c 	.word	0x8800759c
 800c114:	7e37e43c 	.word	0x7e37e43c
 800c118:	3ff00000 	.word	0x3ff00000
 800c11c:	3fd00000 	.word	0x3fd00000
 800c120:	3fe00000 	.word	0x3fe00000
 800c124:	bff00000 	.word	0xbff00000
 800c128:	408fffff 	.word	0x408fffff
 800c12c:	4bd4      	ldr	r3, [pc, #848]	; (800c480 <__ieee754_pow+0x728>)
 800c12e:	2200      	movs	r2, #0
 800c130:	ea09 0303 	and.w	r3, r9, r3
 800c134:	b943      	cbnz	r3, 800c148 <__ieee754_pow+0x3f0>
 800c136:	4658      	mov	r0, fp
 800c138:	4661      	mov	r1, ip
 800c13a:	4bd2      	ldr	r3, [pc, #840]	; (800c484 <__ieee754_pow+0x72c>)
 800c13c:	f7f4 fa38 	bl	80005b0 <__aeabi_dmul>
 800c140:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c144:	4683      	mov	fp, r0
 800c146:	460c      	mov	r4, r1
 800c148:	1523      	asrs	r3, r4, #20
 800c14a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c14e:	4413      	add	r3, r2
 800c150:	930b      	str	r3, [sp, #44]	; 0x2c
 800c152:	4bcd      	ldr	r3, [pc, #820]	; (800c488 <__ieee754_pow+0x730>)
 800c154:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c158:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c15c:	429c      	cmp	r4, r3
 800c15e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c162:	dd08      	ble.n	800c176 <__ieee754_pow+0x41e>
 800c164:	4bc9      	ldr	r3, [pc, #804]	; (800c48c <__ieee754_pow+0x734>)
 800c166:	429c      	cmp	r4, r3
 800c168:	f340 819c 	ble.w	800c4a4 <__ieee754_pow+0x74c>
 800c16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c16e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c172:	3301      	adds	r3, #1
 800c174:	930b      	str	r3, [sp, #44]	; 0x2c
 800c176:	2600      	movs	r6, #0
 800c178:	00f3      	lsls	r3, r6, #3
 800c17a:	930d      	str	r3, [sp, #52]	; 0x34
 800c17c:	4bc4      	ldr	r3, [pc, #784]	; (800c490 <__ieee754_pow+0x738>)
 800c17e:	4658      	mov	r0, fp
 800c180:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c184:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c188:	4629      	mov	r1, r5
 800c18a:	461a      	mov	r2, r3
 800c18c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c190:	4623      	mov	r3, r4
 800c192:	f7f4 f855 	bl	8000240 <__aeabi_dsub>
 800c196:	46da      	mov	sl, fp
 800c198:	462b      	mov	r3, r5
 800c19a:	4652      	mov	r2, sl
 800c19c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c1a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1a4:	f7f4 f84e 	bl	8000244 <__adddf3>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	49b9      	ldr	r1, [pc, #740]	; (800c494 <__ieee754_pow+0x73c>)
 800c1b0:	f7f4 fb28 	bl	8000804 <__aeabi_ddiv>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c1c0:	f7f4 f9f6 	bl	80005b0 <__aeabi_dmul>
 800c1c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1c8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c1cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	46ab      	mov	fp, r5
 800c1d6:	106d      	asrs	r5, r5, #1
 800c1d8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c1e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c1e6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	4614      	mov	r4, r2
 800c1f0:	461d      	mov	r5, r3
 800c1f2:	f7f4 f9dd 	bl	80005b0 <__aeabi_dmul>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c1fe:	f7f4 f81f 	bl	8000240 <__aeabi_dsub>
 800c202:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c206:	4606      	mov	r6, r0
 800c208:	460f      	mov	r7, r1
 800c20a:	4620      	mov	r0, r4
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 f817 	bl	8000240 <__aeabi_dsub>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4650      	mov	r0, sl
 800c218:	4659      	mov	r1, fp
 800c21a:	f7f4 f811 	bl	8000240 <__aeabi_dsub>
 800c21e:	4642      	mov	r2, r8
 800c220:	464b      	mov	r3, r9
 800c222:	f7f4 f9c5 	bl	80005b0 <__aeabi_dmul>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 f807 	bl	8000240 <__aeabi_dsub>
 800c232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c236:	f7f4 f9bb 	bl	80005b0 <__aeabi_dmul>
 800c23a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c23e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c242:	4610      	mov	r0, r2
 800c244:	4619      	mov	r1, r3
 800c246:	f7f4 f9b3 	bl	80005b0 <__aeabi_dmul>
 800c24a:	a37b      	add	r3, pc, #492	; (adr r3, 800c438 <__ieee754_pow+0x6e0>)
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	4604      	mov	r4, r0
 800c252:	460d      	mov	r5, r1
 800c254:	f7f4 f9ac 	bl	80005b0 <__aeabi_dmul>
 800c258:	a379      	add	r3, pc, #484	; (adr r3, 800c440 <__ieee754_pow+0x6e8>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f3 fff1 	bl	8000244 <__adddf3>
 800c262:	4622      	mov	r2, r4
 800c264:	462b      	mov	r3, r5
 800c266:	f7f4 f9a3 	bl	80005b0 <__aeabi_dmul>
 800c26a:	a377      	add	r3, pc, #476	; (adr r3, 800c448 <__ieee754_pow+0x6f0>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f3 ffe8 	bl	8000244 <__adddf3>
 800c274:	4622      	mov	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	f7f4 f99a 	bl	80005b0 <__aeabi_dmul>
 800c27c:	a374      	add	r3, pc, #464	; (adr r3, 800c450 <__ieee754_pow+0x6f8>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f3 ffdf 	bl	8000244 <__adddf3>
 800c286:	4622      	mov	r2, r4
 800c288:	462b      	mov	r3, r5
 800c28a:	f7f4 f991 	bl	80005b0 <__aeabi_dmul>
 800c28e:	a372      	add	r3, pc, #456	; (adr r3, 800c458 <__ieee754_pow+0x700>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f7f3 ffd6 	bl	8000244 <__adddf3>
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	f7f4 f988 	bl	80005b0 <__aeabi_dmul>
 800c2a0:	a36f      	add	r3, pc, #444	; (adr r3, 800c460 <__ieee754_pow+0x708>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f3 ffcd 	bl	8000244 <__adddf3>
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	460f      	mov	r7, r1
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f7f4 f97b 	bl	80005b0 <__aeabi_dmul>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f4 f975 	bl	80005b0 <__aeabi_dmul>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ce:	4642      	mov	r2, r8
 800c2d0:	464b      	mov	r3, r9
 800c2d2:	f7f3 ffb7 	bl	8000244 <__adddf3>
 800c2d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2da:	f7f4 f969 	bl	80005b0 <__aeabi_dmul>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	f7f3 ffaf 	bl	8000244 <__adddf3>
 800c2e6:	4642      	mov	r2, r8
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	460f      	mov	r7, r1
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	f7f4 f95d 	bl	80005b0 <__aeabi_dmul>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4b67      	ldr	r3, [pc, #412]	; (800c498 <__ieee754_pow+0x740>)
 800c2fa:	4682      	mov	sl, r0
 800c2fc:	468b      	mov	fp, r1
 800c2fe:	f7f3 ffa1 	bl	8000244 <__adddf3>
 800c302:	4632      	mov	r2, r6
 800c304:	463b      	mov	r3, r7
 800c306:	f7f3 ff9d 	bl	8000244 <__adddf3>
 800c30a:	9c04      	ldr	r4, [sp, #16]
 800c30c:	460d      	mov	r5, r1
 800c30e:	4622      	mov	r2, r4
 800c310:	460b      	mov	r3, r1
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f4 f94b 	bl	80005b0 <__aeabi_dmul>
 800c31a:	2200      	movs	r2, #0
 800c31c:	4680      	mov	r8, r0
 800c31e:	4689      	mov	r9, r1
 800c320:	4620      	mov	r0, r4
 800c322:	4629      	mov	r1, r5
 800c324:	4b5c      	ldr	r3, [pc, #368]	; (800c498 <__ieee754_pow+0x740>)
 800c326:	f7f3 ff8b 	bl	8000240 <__aeabi_dsub>
 800c32a:	4652      	mov	r2, sl
 800c32c:	465b      	mov	r3, fp
 800c32e:	f7f3 ff87 	bl	8000240 <__aeabi_dsub>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f3 ff81 	bl	8000240 <__aeabi_dsub>
 800c33e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c342:	f7f4 f935 	bl	80005b0 <__aeabi_dmul>
 800c346:	4622      	mov	r2, r4
 800c348:	4606      	mov	r6, r0
 800c34a:	460f      	mov	r7, r1
 800c34c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c350:	462b      	mov	r3, r5
 800c352:	f7f4 f92d 	bl	80005b0 <__aeabi_dmul>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4630      	mov	r0, r6
 800c35c:	4639      	mov	r1, r7
 800c35e:	f7f3 ff71 	bl	8000244 <__adddf3>
 800c362:	4606      	mov	r6, r0
 800c364:	460f      	mov	r7, r1
 800c366:	4602      	mov	r2, r0
 800c368:	460b      	mov	r3, r1
 800c36a:	4640      	mov	r0, r8
 800c36c:	4649      	mov	r1, r9
 800c36e:	f7f3 ff69 	bl	8000244 <__adddf3>
 800c372:	a33d      	add	r3, pc, #244	; (adr r3, 800c468 <__ieee754_pow+0x710>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	9c04      	ldr	r4, [sp, #16]
 800c37a:	460d      	mov	r5, r1
 800c37c:	4620      	mov	r0, r4
 800c37e:	f7f4 f917 	bl	80005b0 <__aeabi_dmul>
 800c382:	4642      	mov	r2, r8
 800c384:	464b      	mov	r3, r9
 800c386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c38a:	4620      	mov	r0, r4
 800c38c:	4629      	mov	r1, r5
 800c38e:	f7f3 ff57 	bl	8000240 <__aeabi_dsub>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	4630      	mov	r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	f7f3 ff51 	bl	8000240 <__aeabi_dsub>
 800c39e:	a334      	add	r3, pc, #208	; (adr r3, 800c470 <__ieee754_pow+0x718>)
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f7f4 f904 	bl	80005b0 <__aeabi_dmul>
 800c3a8:	a333      	add	r3, pc, #204	; (adr r3, 800c478 <__ieee754_pow+0x720>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7f4 f8fb 	bl	80005b0 <__aeabi_dmul>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	f7f3 ff3f 	bl	8000244 <__adddf3>
 800c3c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3c8:	4b34      	ldr	r3, [pc, #208]	; (800c49c <__ieee754_pow+0x744>)
 800c3ca:	4413      	add	r3, r2
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 ff38 	bl	8000244 <__adddf3>
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c3d8:	4689      	mov	r9, r1
 800c3da:	f7f4 f87f 	bl	80004dc <__aeabi_i2d>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e4:	4b2e      	ldr	r3, [pc, #184]	; (800c4a0 <__ieee754_pow+0x748>)
 800c3e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	f7f3 ff26 	bl	8000244 <__adddf3>
 800c3f8:	4632      	mov	r2, r6
 800c3fa:	463b      	mov	r3, r7
 800c3fc:	f7f3 ff22 	bl	8000244 <__adddf3>
 800c400:	4622      	mov	r2, r4
 800c402:	462b      	mov	r3, r5
 800c404:	f7f3 ff1e 	bl	8000244 <__adddf3>
 800c408:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c40c:	4622      	mov	r2, r4
 800c40e:	462b      	mov	r3, r5
 800c410:	4650      	mov	r0, sl
 800c412:	468b      	mov	fp, r1
 800c414:	f7f3 ff14 	bl	8000240 <__aeabi_dsub>
 800c418:	4632      	mov	r2, r6
 800c41a:	463b      	mov	r3, r7
 800c41c:	f7f3 ff10 	bl	8000240 <__aeabi_dsub>
 800c420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c424:	f7f3 ff0c 	bl	8000240 <__aeabi_dsub>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4640      	mov	r0, r8
 800c42e:	4649      	mov	r1, r9
 800c430:	e608      	b.n	800c044 <__ieee754_pow+0x2ec>
 800c432:	bf00      	nop
 800c434:	f3af 8000 	nop.w
 800c438:	4a454eef 	.word	0x4a454eef
 800c43c:	3fca7e28 	.word	0x3fca7e28
 800c440:	93c9db65 	.word	0x93c9db65
 800c444:	3fcd864a 	.word	0x3fcd864a
 800c448:	a91d4101 	.word	0xa91d4101
 800c44c:	3fd17460 	.word	0x3fd17460
 800c450:	518f264d 	.word	0x518f264d
 800c454:	3fd55555 	.word	0x3fd55555
 800c458:	db6fabff 	.word	0xdb6fabff
 800c45c:	3fdb6db6 	.word	0x3fdb6db6
 800c460:	33333303 	.word	0x33333303
 800c464:	3fe33333 	.word	0x3fe33333
 800c468:	e0000000 	.word	0xe0000000
 800c46c:	3feec709 	.word	0x3feec709
 800c470:	dc3a03fd 	.word	0xdc3a03fd
 800c474:	3feec709 	.word	0x3feec709
 800c478:	145b01f5 	.word	0x145b01f5
 800c47c:	be3e2fe0 	.word	0xbe3e2fe0
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	43400000 	.word	0x43400000
 800c488:	0003988e 	.word	0x0003988e
 800c48c:	000bb679 	.word	0x000bb679
 800c490:	0800e078 	.word	0x0800e078
 800c494:	3ff00000 	.word	0x3ff00000
 800c498:	40080000 	.word	0x40080000
 800c49c:	0800e098 	.word	0x0800e098
 800c4a0:	0800e088 	.word	0x0800e088
 800c4a4:	2601      	movs	r6, #1
 800c4a6:	e667      	b.n	800c178 <__ieee754_pow+0x420>
 800c4a8:	a39d      	add	r3, pc, #628	; (adr r3, 800c720 <__ieee754_pow+0x9c8>)
 800c4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	f7f3 fec7 	bl	8000244 <__adddf3>
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4bc:	462b      	mov	r3, r5
 800c4be:	4650      	mov	r0, sl
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	f7f3 febd 	bl	8000240 <__aeabi_dsub>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4ce:	f7f4 faff 	bl	8000ad0 <__aeabi_dcmpgt>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f47f ae01 	bne.w	800c0da <__ieee754_pow+0x382>
 800c4d8:	4aa5      	ldr	r2, [pc, #660]	; (800c770 <__ieee754_pow+0xa18>)
 800c4da:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	f340 8103 	ble.w	800c6ea <__ieee754_pow+0x992>
 800c4e4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	151b      	asrs	r3, r3, #20
 800c4ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c4f0:	fa4a f303 	asr.w	r3, sl, r3
 800c4f4:	4433      	add	r3, r6
 800c4f6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c4fa:	4f9e      	ldr	r7, [pc, #632]	; (800c774 <__ieee754_pow+0xa1c>)
 800c4fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c500:	4117      	asrs	r7, r2
 800c502:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c506:	ea23 0107 	bic.w	r1, r3, r7
 800c50a:	f1c2 0214 	rsb	r2, r2, #20
 800c50e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c512:	460b      	mov	r3, r1
 800c514:	fa4a fa02 	asr.w	sl, sl, r2
 800c518:	2e00      	cmp	r6, #0
 800c51a:	4602      	mov	r2, r0
 800c51c:	4629      	mov	r1, r5
 800c51e:	4620      	mov	r0, r4
 800c520:	bfb8      	it	lt
 800c522:	f1ca 0a00 	rsblt	sl, sl, #0
 800c526:	f7f3 fe8b 	bl	8000240 <__aeabi_dsub>
 800c52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c532:	2400      	movs	r4, #0
 800c534:	4642      	mov	r2, r8
 800c536:	464b      	mov	r3, r9
 800c538:	f7f3 fe84 	bl	8000244 <__adddf3>
 800c53c:	a37a      	add	r3, pc, #488	; (adr r3, 800c728 <__ieee754_pow+0x9d0>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	4620      	mov	r0, r4
 800c544:	460d      	mov	r5, r1
 800c546:	f7f4 f833 	bl	80005b0 <__aeabi_dmul>
 800c54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	4620      	mov	r0, r4
 800c554:	4629      	mov	r1, r5
 800c556:	f7f3 fe73 	bl	8000240 <__aeabi_dsub>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4640      	mov	r0, r8
 800c560:	4649      	mov	r1, r9
 800c562:	f7f3 fe6d 	bl	8000240 <__aeabi_dsub>
 800c566:	a372      	add	r3, pc, #456	; (adr r3, 800c730 <__ieee754_pow+0x9d8>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	f7f4 f820 	bl	80005b0 <__aeabi_dmul>
 800c570:	a371      	add	r3, pc, #452	; (adr r3, 800c738 <__ieee754_pow+0x9e0>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	4680      	mov	r8, r0
 800c578:	4689      	mov	r9, r1
 800c57a:	4620      	mov	r0, r4
 800c57c:	4629      	mov	r1, r5
 800c57e:	f7f4 f817 	bl	80005b0 <__aeabi_dmul>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4640      	mov	r0, r8
 800c588:	4649      	mov	r1, r9
 800c58a:	f7f3 fe5b 	bl	8000244 <__adddf3>
 800c58e:	4604      	mov	r4, r0
 800c590:	460d      	mov	r5, r1
 800c592:	4602      	mov	r2, r0
 800c594:	460b      	mov	r3, r1
 800c596:	4630      	mov	r0, r6
 800c598:	4639      	mov	r1, r7
 800c59a:	f7f3 fe53 	bl	8000244 <__adddf3>
 800c59e:	4632      	mov	r2, r6
 800c5a0:	463b      	mov	r3, r7
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	f7f3 fe4b 	bl	8000240 <__aeabi_dsub>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f7f3 fe45 	bl	8000240 <__aeabi_dsub>
 800c5b6:	4642      	mov	r2, r8
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	464b      	mov	r3, r9
 800c5be:	4640      	mov	r0, r8
 800c5c0:	4649      	mov	r1, r9
 800c5c2:	f7f3 fff5 	bl	80005b0 <__aeabi_dmul>
 800c5c6:	a35e      	add	r3, pc, #376	; (adr r3, 800c740 <__ieee754_pow+0x9e8>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	f7f3 ffee 	bl	80005b0 <__aeabi_dmul>
 800c5d4:	a35c      	add	r3, pc, #368	; (adr r3, 800c748 <__ieee754_pow+0x9f0>)
 800c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5da:	f7f3 fe31 	bl	8000240 <__aeabi_dsub>
 800c5de:	4622      	mov	r2, r4
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	f7f3 ffe5 	bl	80005b0 <__aeabi_dmul>
 800c5e6:	a35a      	add	r3, pc, #360	; (adr r3, 800c750 <__ieee754_pow+0x9f8>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f7f3 fe2a 	bl	8000244 <__adddf3>
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	f7f3 ffdc 	bl	80005b0 <__aeabi_dmul>
 800c5f8:	a357      	add	r3, pc, #348	; (adr r3, 800c758 <__ieee754_pow+0xa00>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f7f3 fe1f 	bl	8000240 <__aeabi_dsub>
 800c602:	4622      	mov	r2, r4
 800c604:	462b      	mov	r3, r5
 800c606:	f7f3 ffd3 	bl	80005b0 <__aeabi_dmul>
 800c60a:	a355      	add	r3, pc, #340	; (adr r3, 800c760 <__ieee754_pow+0xa08>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f3 fe18 	bl	8000244 <__adddf3>
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f3 ffca 	bl	80005b0 <__aeabi_dmul>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4640      	mov	r0, r8
 800c622:	4649      	mov	r1, r9
 800c624:	f7f3 fe0c 	bl	8000240 <__aeabi_dsub>
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4640      	mov	r0, r8
 800c632:	4649      	mov	r1, r9
 800c634:	f7f3 ffbc 	bl	80005b0 <__aeabi_dmul>
 800c638:	2200      	movs	r2, #0
 800c63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c642:	4620      	mov	r0, r4
 800c644:	4629      	mov	r1, r5
 800c646:	f7f3 fdfb 	bl	8000240 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	f7f4 f8d7 	bl	8000804 <__aeabi_ddiv>
 800c656:	4632      	mov	r2, r6
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	463b      	mov	r3, r7
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	f7f3 ffa5 	bl	80005b0 <__aeabi_dmul>
 800c666:	4632      	mov	r2, r6
 800c668:	463b      	mov	r3, r7
 800c66a:	f7f3 fdeb 	bl	8000244 <__adddf3>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f3 fde3 	bl	8000240 <__aeabi_dsub>
 800c67a:	4642      	mov	r2, r8
 800c67c:	464b      	mov	r3, r9
 800c67e:	f7f3 fddf 	bl	8000240 <__aeabi_dsub>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	2000      	movs	r0, #0
 800c688:	493b      	ldr	r1, [pc, #236]	; (800c778 <__ieee754_pow+0xa20>)
 800c68a:	f7f3 fdd9 	bl	8000240 <__aeabi_dsub>
 800c68e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c692:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c696:	da2b      	bge.n	800c6f0 <__ieee754_pow+0x998>
 800c698:	4652      	mov	r2, sl
 800c69a:	f001 f8e9 	bl	800d870 <scalbn>
 800c69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a2:	f7ff bbf2 	b.w	800be8a <__ieee754_pow+0x132>
 800c6a6:	4b35      	ldr	r3, [pc, #212]	; (800c77c <__ieee754_pow+0xa24>)
 800c6a8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c6ac:	429f      	cmp	r7, r3
 800c6ae:	f77f af13 	ble.w	800c4d8 <__ieee754_pow+0x780>
 800c6b2:	4b33      	ldr	r3, [pc, #204]	; (800c780 <__ieee754_pow+0xa28>)
 800c6b4:	440b      	add	r3, r1
 800c6b6:	4303      	orrs	r3, r0
 800c6b8:	d00b      	beq.n	800c6d2 <__ieee754_pow+0x97a>
 800c6ba:	a32b      	add	r3, pc, #172	; (adr r3, 800c768 <__ieee754_pow+0xa10>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6c4:	f7f3 ff74 	bl	80005b0 <__aeabi_dmul>
 800c6c8:	a327      	add	r3, pc, #156	; (adr r3, 800c768 <__ieee754_pow+0xa10>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7ff bbdc 	b.w	800be8a <__ieee754_pow+0x132>
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	462b      	mov	r3, r5
 800c6d6:	f7f3 fdb3 	bl	8000240 <__aeabi_dsub>
 800c6da:	4642      	mov	r2, r8
 800c6dc:	464b      	mov	r3, r9
 800c6de:	f7f4 f9ed 	bl	8000abc <__aeabi_dcmpge>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f43f aef8 	beq.w	800c4d8 <__ieee754_pow+0x780>
 800c6e8:	e7e7      	b.n	800c6ba <__ieee754_pow+0x962>
 800c6ea:	f04f 0a00 	mov.w	sl, #0
 800c6ee:	e71e      	b.n	800c52e <__ieee754_pow+0x7d6>
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	e7d4      	b.n	800c69e <__ieee754_pow+0x946>
 800c6f4:	f04f 0b00 	mov.w	fp, #0
 800c6f8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c778 <__ieee754_pow+0xa20>
 800c6fc:	f7ff bbb0 	b.w	800be60 <__ieee754_pow+0x108>
 800c700:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c704:	f7ff bbac 	b.w	800be60 <__ieee754_pow+0x108>
 800c708:	4638      	mov	r0, r7
 800c70a:	4641      	mov	r1, r8
 800c70c:	f7ff bbbf 	b.w	800be8e <__ieee754_pow+0x136>
 800c710:	9200      	str	r2, [sp, #0]
 800c712:	f7ff bb7f 	b.w	800be14 <__ieee754_pow+0xbc>
 800c716:	2300      	movs	r3, #0
 800c718:	f7ff bb69 	b.w	800bdee <__ieee754_pow+0x96>
 800c71c:	f3af 8000 	nop.w
 800c720:	652b82fe 	.word	0x652b82fe
 800c724:	3c971547 	.word	0x3c971547
 800c728:	00000000 	.word	0x00000000
 800c72c:	3fe62e43 	.word	0x3fe62e43
 800c730:	fefa39ef 	.word	0xfefa39ef
 800c734:	3fe62e42 	.word	0x3fe62e42
 800c738:	0ca86c39 	.word	0x0ca86c39
 800c73c:	be205c61 	.word	0xbe205c61
 800c740:	72bea4d0 	.word	0x72bea4d0
 800c744:	3e663769 	.word	0x3e663769
 800c748:	c5d26bf1 	.word	0xc5d26bf1
 800c74c:	3ebbbd41 	.word	0x3ebbbd41
 800c750:	af25de2c 	.word	0xaf25de2c
 800c754:	3f11566a 	.word	0x3f11566a
 800c758:	16bebd93 	.word	0x16bebd93
 800c75c:	3f66c16c 	.word	0x3f66c16c
 800c760:	5555553e 	.word	0x5555553e
 800c764:	3fc55555 	.word	0x3fc55555
 800c768:	c2f8f359 	.word	0xc2f8f359
 800c76c:	01a56e1f 	.word	0x01a56e1f
 800c770:	3fe00000 	.word	0x3fe00000
 800c774:	000fffff 	.word	0x000fffff
 800c778:	3ff00000 	.word	0x3ff00000
 800c77c:	4090cbff 	.word	0x4090cbff
 800c780:	3f6f3400 	.word	0x3f6f3400
 800c784:	00000000 	.word	0x00000000

0800c788 <__ieee754_rem_pio2>:
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	4614      	mov	r4, r2
 800c78e:	4ac4      	ldr	r2, [pc, #784]	; (800caa0 <__ieee754_rem_pio2+0x318>)
 800c790:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c794:	b08d      	sub	sp, #52	; 0x34
 800c796:	4592      	cmp	sl, r2
 800c798:	9104      	str	r1, [sp, #16]
 800c79a:	dc07      	bgt.n	800c7ac <__ieee754_rem_pio2+0x24>
 800c79c:	2200      	movs	r2, #0
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e9c4 0100 	strd	r0, r1, [r4]
 800c7a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	e024      	b.n	800c7f6 <__ieee754_rem_pio2+0x6e>
 800c7ac:	4abd      	ldr	r2, [pc, #756]	; (800caa4 <__ieee754_rem_pio2+0x31c>)
 800c7ae:	4592      	cmp	sl, r2
 800c7b0:	dc72      	bgt.n	800c898 <__ieee754_rem_pio2+0x110>
 800c7b2:	9b04      	ldr	r3, [sp, #16]
 800c7b4:	4dbc      	ldr	r5, [pc, #752]	; (800caa8 <__ieee754_rem_pio2+0x320>)
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	a3ab      	add	r3, pc, #684	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x2e0>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	dd36      	ble.n	800c82e <__ieee754_rem_pio2+0xa6>
 800c7c0:	f7f3 fd3e 	bl	8000240 <__aeabi_dsub>
 800c7c4:	45aa      	cmp	sl, r5
 800c7c6:	4606      	mov	r6, r0
 800c7c8:	460f      	mov	r7, r1
 800c7ca:	d018      	beq.n	800c7fe <__ieee754_rem_pio2+0x76>
 800c7cc:	a3a8      	add	r3, pc, #672	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x2e8>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd35 	bl	8000240 <__aeabi_dsub>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4630      	mov	r0, r6
 800c7dc:	e9c4 2300 	strd	r2, r3, [r4]
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	f7f3 fd2d 	bl	8000240 <__aeabi_dsub>
 800c7e6:	a3a2      	add	r3, pc, #648	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x2e8>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f7f3 fd28 	bl	8000240 <__aeabi_dsub>
 800c7f0:	2501      	movs	r5, #1
 800c7f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	b00d      	add	sp, #52	; 0x34
 800c7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fe:	a39e      	add	r3, pc, #632	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x2f0>)
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	f7f3 fd1c 	bl	8000240 <__aeabi_dsub>
 800c808:	a39d      	add	r3, pc, #628	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x2f8>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	4606      	mov	r6, r0
 800c810:	460f      	mov	r7, r1
 800c812:	f7f3 fd15 	bl	8000240 <__aeabi_dsub>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4630      	mov	r0, r6
 800c81c:	e9c4 2300 	strd	r2, r3, [r4]
 800c820:	4639      	mov	r1, r7
 800c822:	f7f3 fd0d 	bl	8000240 <__aeabi_dsub>
 800c826:	a396      	add	r3, pc, #600	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x2f8>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	e7de      	b.n	800c7ec <__ieee754_rem_pio2+0x64>
 800c82e:	f7f3 fd09 	bl	8000244 <__adddf3>
 800c832:	45aa      	cmp	sl, r5
 800c834:	4606      	mov	r6, r0
 800c836:	460f      	mov	r7, r1
 800c838:	d016      	beq.n	800c868 <__ieee754_rem_pio2+0xe0>
 800c83a:	a38d      	add	r3, pc, #564	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x2e8>)
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	f7f3 fd00 	bl	8000244 <__adddf3>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4630      	mov	r0, r6
 800c84a:	e9c4 2300 	strd	r2, r3, [r4]
 800c84e:	4639      	mov	r1, r7
 800c850:	f7f3 fcf6 	bl	8000240 <__aeabi_dsub>
 800c854:	a386      	add	r3, pc, #536	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x2e8>)
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f7f3 fcf3 	bl	8000244 <__adddf3>
 800c85e:	f04f 35ff 	mov.w	r5, #4294967295
 800c862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c866:	e7c6      	b.n	800c7f6 <__ieee754_rem_pio2+0x6e>
 800c868:	a383      	add	r3, pc, #524	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x2f0>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f3 fce9 	bl	8000244 <__adddf3>
 800c872:	a383      	add	r3, pc, #524	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x2f8>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	4606      	mov	r6, r0
 800c87a:	460f      	mov	r7, r1
 800c87c:	f7f3 fce2 	bl	8000244 <__adddf3>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4630      	mov	r0, r6
 800c886:	e9c4 2300 	strd	r2, r3, [r4]
 800c88a:	4639      	mov	r1, r7
 800c88c:	f7f3 fcd8 	bl	8000240 <__aeabi_dsub>
 800c890:	a37b      	add	r3, pc, #492	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x2f8>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	e7e0      	b.n	800c85a <__ieee754_rem_pio2+0xd2>
 800c898:	4a84      	ldr	r2, [pc, #528]	; (800caac <__ieee754_rem_pio2+0x324>)
 800c89a:	4592      	cmp	sl, r2
 800c89c:	f300 80d5 	bgt.w	800ca4a <__ieee754_rem_pio2+0x2c2>
 800c8a0:	f000 fecc 	bl	800d63c <fabs>
 800c8a4:	a378      	add	r3, pc, #480	; (adr r3, 800ca88 <__ieee754_rem_pio2+0x300>)
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460f      	mov	r7, r1
 800c8ae:	f7f3 fe7f 	bl	80005b0 <__aeabi_dmul>
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4b7e      	ldr	r3, [pc, #504]	; (800cab0 <__ieee754_rem_pio2+0x328>)
 800c8b6:	f7f3 fcc5 	bl	8000244 <__adddf3>
 800c8ba:	f7f4 f929 	bl	8000b10 <__aeabi_d2iz>
 800c8be:	4605      	mov	r5, r0
 800c8c0:	f7f3 fe0c 	bl	80004dc <__aeabi_i2d>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8cc:	a366      	add	r3, pc, #408	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x2e0>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	f7f3 fe6d 	bl	80005b0 <__aeabi_dmul>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4630      	mov	r0, r6
 800c8dc:	4639      	mov	r1, r7
 800c8de:	f7f3 fcaf 	bl	8000240 <__aeabi_dsub>
 800c8e2:	a363      	add	r3, pc, #396	; (adr r3, 800ca70 <__ieee754_rem_pio2+0x2e8>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	4680      	mov	r8, r0
 800c8ea:	4689      	mov	r9, r1
 800c8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f0:	f7f3 fe5e 	bl	80005b0 <__aeabi_dmul>
 800c8f4:	2d1f      	cmp	r5, #31
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	dc0e      	bgt.n	800c91a <__ieee754_rem_pio2+0x192>
 800c8fc:	4b6d      	ldr	r3, [pc, #436]	; (800cab4 <__ieee754_rem_pio2+0x32c>)
 800c8fe:	1e6a      	subs	r2, r5, #1
 800c900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c904:	4553      	cmp	r3, sl
 800c906:	d008      	beq.n	800c91a <__ieee754_rem_pio2+0x192>
 800c908:	4632      	mov	r2, r6
 800c90a:	463b      	mov	r3, r7
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f3 fc96 	bl	8000240 <__aeabi_dsub>
 800c914:	e9c4 0100 	strd	r0, r1, [r4]
 800c918:	e013      	b.n	800c942 <__ieee754_rem_pio2+0x1ba>
 800c91a:	463b      	mov	r3, r7
 800c91c:	4632      	mov	r2, r6
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 fc8d 	bl	8000240 <__aeabi_dsub>
 800c926:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c92a:	9305      	str	r3, [sp, #20]
 800c92c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c930:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c934:	f1ba 0f10 	cmp.w	sl, #16
 800c938:	dc1f      	bgt.n	800c97a <__ieee754_rem_pio2+0x1f2>
 800c93a:	4602      	mov	r2, r0
 800c93c:	460b      	mov	r3, r1
 800c93e:	e9c4 2300 	strd	r2, r3, [r4]
 800c942:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c946:	4640      	mov	r0, r8
 800c948:	4653      	mov	r3, sl
 800c94a:	4649      	mov	r1, r9
 800c94c:	f7f3 fc78 	bl	8000240 <__aeabi_dsub>
 800c950:	4632      	mov	r2, r6
 800c952:	463b      	mov	r3, r7
 800c954:	f7f3 fc74 	bl	8000240 <__aeabi_dsub>
 800c958:	460b      	mov	r3, r1
 800c95a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c95e:	9904      	ldr	r1, [sp, #16]
 800c960:	4602      	mov	r2, r0
 800c962:	2900      	cmp	r1, #0
 800c964:	f6bf af47 	bge.w	800c7f6 <__ieee754_rem_pio2+0x6e>
 800c968:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c96c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c974:	60e3      	str	r3, [r4, #12]
 800c976:	426d      	negs	r5, r5
 800c978:	e73d      	b.n	800c7f6 <__ieee754_rem_pio2+0x6e>
 800c97a:	a33f      	add	r3, pc, #252	; (adr r3, 800ca78 <__ieee754_rem_pio2+0x2f0>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c984:	f7f3 fe14 	bl	80005b0 <__aeabi_dmul>
 800c988:	4606      	mov	r6, r0
 800c98a:	460f      	mov	r7, r1
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4640      	mov	r0, r8
 800c992:	4649      	mov	r1, r9
 800c994:	f7f3 fc54 	bl	8000240 <__aeabi_dsub>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4682      	mov	sl, r0
 800c99e:	468b      	mov	fp, r1
 800c9a0:	4640      	mov	r0, r8
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	f7f3 fc4c 	bl	8000240 <__aeabi_dsub>
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	463b      	mov	r3, r7
 800c9ac:	f7f3 fc48 	bl	8000240 <__aeabi_dsub>
 800c9b0:	a333      	add	r3, pc, #204	; (adr r3, 800ca80 <__ieee754_rem_pio2+0x2f8>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9be:	f7f3 fdf7 	bl	80005b0 <__aeabi_dmul>
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	463b      	mov	r3, r7
 800c9c6:	f7f3 fc3b 	bl	8000240 <__aeabi_dsub>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	460f      	mov	r7, r1
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	f7f3 fc33 	bl	8000240 <__aeabi_dsub>
 800c9da:	9a05      	ldr	r2, [sp, #20]
 800c9dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	2b31      	cmp	r3, #49	; 0x31
 800c9e4:	dc06      	bgt.n	800c9f4 <__ieee754_rem_pio2+0x26c>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	46d0      	mov	r8, sl
 800c9ec:	46d9      	mov	r9, fp
 800c9ee:	e9c4 2300 	strd	r2, r3, [r4]
 800c9f2:	e7a6      	b.n	800c942 <__ieee754_rem_pio2+0x1ba>
 800c9f4:	a326      	add	r3, pc, #152	; (adr r3, 800ca90 <__ieee754_rem_pio2+0x308>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9fe:	f7f3 fdd7 	bl	80005b0 <__aeabi_dmul>
 800ca02:	4606      	mov	r6, r0
 800ca04:	460f      	mov	r7, r1
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	f7f3 fc17 	bl	8000240 <__aeabi_dsub>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4680      	mov	r8, r0
 800ca18:	4689      	mov	r9, r1
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	4659      	mov	r1, fp
 800ca1e:	f7f3 fc0f 	bl	8000240 <__aeabi_dsub>
 800ca22:	4632      	mov	r2, r6
 800ca24:	463b      	mov	r3, r7
 800ca26:	f7f3 fc0b 	bl	8000240 <__aeabi_dsub>
 800ca2a:	a31b      	add	r3, pc, #108	; (adr r3, 800ca98 <__ieee754_rem_pio2+0x310>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	4606      	mov	r6, r0
 800ca32:	460f      	mov	r7, r1
 800ca34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca38:	f7f3 fdba 	bl	80005b0 <__aeabi_dmul>
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	463b      	mov	r3, r7
 800ca40:	f7f3 fbfe 	bl	8000240 <__aeabi_dsub>
 800ca44:	4606      	mov	r6, r0
 800ca46:	460f      	mov	r7, r1
 800ca48:	e75e      	b.n	800c908 <__ieee754_rem_pio2+0x180>
 800ca4a:	4a1b      	ldr	r2, [pc, #108]	; (800cab8 <__ieee754_rem_pio2+0x330>)
 800ca4c:	4592      	cmp	sl, r2
 800ca4e:	dd35      	ble.n	800cabc <__ieee754_rem_pio2+0x334>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	f7f3 fbf4 	bl	8000240 <__aeabi_dsub>
 800ca58:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca5c:	e9c4 0100 	strd	r0, r1, [r4]
 800ca60:	e6a2      	b.n	800c7a8 <__ieee754_rem_pio2+0x20>
 800ca62:	bf00      	nop
 800ca64:	f3af 8000 	nop.w
 800ca68:	54400000 	.word	0x54400000
 800ca6c:	3ff921fb 	.word	0x3ff921fb
 800ca70:	1a626331 	.word	0x1a626331
 800ca74:	3dd0b461 	.word	0x3dd0b461
 800ca78:	1a600000 	.word	0x1a600000
 800ca7c:	3dd0b461 	.word	0x3dd0b461
 800ca80:	2e037073 	.word	0x2e037073
 800ca84:	3ba3198a 	.word	0x3ba3198a
 800ca88:	6dc9c883 	.word	0x6dc9c883
 800ca8c:	3fe45f30 	.word	0x3fe45f30
 800ca90:	2e000000 	.word	0x2e000000
 800ca94:	3ba3198a 	.word	0x3ba3198a
 800ca98:	252049c1 	.word	0x252049c1
 800ca9c:	397b839a 	.word	0x397b839a
 800caa0:	3fe921fb 	.word	0x3fe921fb
 800caa4:	4002d97b 	.word	0x4002d97b
 800caa8:	3ff921fb 	.word	0x3ff921fb
 800caac:	413921fb 	.word	0x413921fb
 800cab0:	3fe00000 	.word	0x3fe00000
 800cab4:	0800e0a8 	.word	0x0800e0a8
 800cab8:	7fefffff 	.word	0x7fefffff
 800cabc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800cac0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cac4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800cac8:	460f      	mov	r7, r1
 800caca:	4606      	mov	r6, r0
 800cacc:	f7f4 f820 	bl	8000b10 <__aeabi_d2iz>
 800cad0:	f7f3 fd04 	bl	80004dc <__aeabi_i2d>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4630      	mov	r0, r6
 800cada:	4639      	mov	r1, r7
 800cadc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cae0:	f7f3 fbae 	bl	8000240 <__aeabi_dsub>
 800cae4:	2200      	movs	r2, #0
 800cae6:	4b1e      	ldr	r3, [pc, #120]	; (800cb60 <__ieee754_rem_pio2+0x3d8>)
 800cae8:	f7f3 fd62 	bl	80005b0 <__aeabi_dmul>
 800caec:	460f      	mov	r7, r1
 800caee:	4606      	mov	r6, r0
 800caf0:	f7f4 f80e 	bl	8000b10 <__aeabi_d2iz>
 800caf4:	f7f3 fcf2 	bl	80004dc <__aeabi_i2d>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4630      	mov	r0, r6
 800cafe:	4639      	mov	r1, r7
 800cb00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cb04:	f7f3 fb9c 	bl	8000240 <__aeabi_dsub>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4b15      	ldr	r3, [pc, #84]	; (800cb60 <__ieee754_rem_pio2+0x3d8>)
 800cb0c:	f7f3 fd50 	bl	80005b0 <__aeabi_dmul>
 800cb10:	f04f 0803 	mov.w	r8, #3
 800cb14:	2600      	movs	r6, #0
 800cb16:	2700      	movs	r7, #0
 800cb18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cb1c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800cb20:	4632      	mov	r2, r6
 800cb22:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800cb26:	463b      	mov	r3, r7
 800cb28:	46c2      	mov	sl, r8
 800cb2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb2e:	f7f3 ffa7 	bl	8000a80 <__aeabi_dcmpeq>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d1f4      	bne.n	800cb20 <__ieee754_rem_pio2+0x398>
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <__ieee754_rem_pio2+0x3dc>)
 800cb38:	462a      	mov	r2, r5
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	4621      	mov	r1, r4
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	a806      	add	r0, sp, #24
 800cb44:	4653      	mov	r3, sl
 800cb46:	f000 f979 	bl	800ce3c <__kernel_rem_pio2>
 800cb4a:	9b04      	ldr	r3, [sp, #16]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f6bf ae51 	bge.w	800c7f6 <__ieee754_rem_pio2+0x6e>
 800cb54:	6863      	ldr	r3, [r4, #4]
 800cb56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb5a:	6063      	str	r3, [r4, #4]
 800cb5c:	68e3      	ldr	r3, [r4, #12]
 800cb5e:	e707      	b.n	800c970 <__ieee754_rem_pio2+0x1e8>
 800cb60:	41700000 	.word	0x41700000
 800cb64:	0800e128 	.word	0x0800e128

0800cb68 <__ieee754_sqrt>:
 800cb68:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ccbc <__ieee754_sqrt+0x154>
 800cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb70:	ea3c 0c01 	bics.w	ip, ip, r1
 800cb74:	460b      	mov	r3, r1
 800cb76:	4606      	mov	r6, r0
 800cb78:	460d      	mov	r5, r1
 800cb7a:	460a      	mov	r2, r1
 800cb7c:	4607      	mov	r7, r0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	d10e      	bne.n	800cba0 <__ieee754_sqrt+0x38>
 800cb82:	4602      	mov	r2, r0
 800cb84:	f7f3 fd14 	bl	80005b0 <__aeabi_dmul>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fb58 	bl	8000244 <__adddf3>
 800cb94:	4606      	mov	r6, r0
 800cb96:	460d      	mov	r5, r1
 800cb98:	4630      	mov	r0, r6
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba0:	2900      	cmp	r1, #0
 800cba2:	dc0d      	bgt.n	800cbc0 <__ieee754_sqrt+0x58>
 800cba4:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cba8:	ea5c 0707 	orrs.w	r7, ip, r7
 800cbac:	d0f4      	beq.n	800cb98 <__ieee754_sqrt+0x30>
 800cbae:	b139      	cbz	r1, 800cbc0 <__ieee754_sqrt+0x58>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	f7f3 fb45 	bl	8000240 <__aeabi_dsub>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	f7f3 fe23 	bl	8000804 <__aeabi_ddiv>
 800cbbe:	e7e9      	b.n	800cb94 <__ieee754_sqrt+0x2c>
 800cbc0:	1512      	asrs	r2, r2, #20
 800cbc2:	d074      	beq.n	800ccae <__ieee754_sqrt+0x146>
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	07d5      	lsls	r5, r2, #31
 800cbc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbcc:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800cbd0:	bf5e      	ittt	pl
 800cbd2:	0fe3      	lsrpl	r3, r4, #31
 800cbd4:	0064      	lslpl	r4, r4, #1
 800cbd6:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800cbda:	0fe3      	lsrs	r3, r4, #31
 800cbdc:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cbe0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800cbe4:	2516      	movs	r5, #22
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cbec:	1076      	asrs	r6, r6, #1
 800cbee:	0064      	lsls	r4, r4, #1
 800cbf0:	188f      	adds	r7, r1, r2
 800cbf2:	429f      	cmp	r7, r3
 800cbf4:	bfde      	ittt	le
 800cbf6:	1bdb      	suble	r3, r3, r7
 800cbf8:	18b9      	addle	r1, r7, r2
 800cbfa:	1880      	addle	r0, r0, r2
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	3d01      	subs	r5, #1
 800cc00:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cc04:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc08:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cc0c:	d1f0      	bne.n	800cbf0 <__ieee754_sqrt+0x88>
 800cc0e:	462a      	mov	r2, r5
 800cc10:	f04f 0e20 	mov.w	lr, #32
 800cc14:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800cc18:	428b      	cmp	r3, r1
 800cc1a:	eb07 0c05 	add.w	ip, r7, r5
 800cc1e:	dc02      	bgt.n	800cc26 <__ieee754_sqrt+0xbe>
 800cc20:	d113      	bne.n	800cc4a <__ieee754_sqrt+0xe2>
 800cc22:	45a4      	cmp	ip, r4
 800cc24:	d811      	bhi.n	800cc4a <__ieee754_sqrt+0xe2>
 800cc26:	f1bc 0f00 	cmp.w	ip, #0
 800cc2a:	eb0c 0507 	add.w	r5, ip, r7
 800cc2e:	da43      	bge.n	800ccb8 <__ieee754_sqrt+0x150>
 800cc30:	2d00      	cmp	r5, #0
 800cc32:	db41      	blt.n	800ccb8 <__ieee754_sqrt+0x150>
 800cc34:	f101 0801 	add.w	r8, r1, #1
 800cc38:	1a5b      	subs	r3, r3, r1
 800cc3a:	4641      	mov	r1, r8
 800cc3c:	45a4      	cmp	ip, r4
 800cc3e:	bf88      	it	hi
 800cc40:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cc44:	eba4 040c 	sub.w	r4, r4, ip
 800cc48:	443a      	add	r2, r7
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	f1be 0e01 	subs.w	lr, lr, #1
 800cc50:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800cc54:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800cc58:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800cc5c:	d1dc      	bne.n	800cc18 <__ieee754_sqrt+0xb0>
 800cc5e:	4323      	orrs	r3, r4
 800cc60:	d006      	beq.n	800cc70 <__ieee754_sqrt+0x108>
 800cc62:	1c54      	adds	r4, r2, #1
 800cc64:	bf0b      	itete	eq
 800cc66:	4672      	moveq	r2, lr
 800cc68:	3201      	addne	r2, #1
 800cc6a:	3001      	addeq	r0, #1
 800cc6c:	f022 0201 	bicne.w	r2, r2, #1
 800cc70:	1043      	asrs	r3, r0, #1
 800cc72:	07c1      	lsls	r1, r0, #31
 800cc74:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cc78:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc80:	bf48      	it	mi
 800cc82:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cc86:	4610      	mov	r0, r2
 800cc88:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800cc8c:	e782      	b.n	800cb94 <__ieee754_sqrt+0x2c>
 800cc8e:	0ae3      	lsrs	r3, r4, #11
 800cc90:	3915      	subs	r1, #21
 800cc92:	0564      	lsls	r4, r4, #21
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0fa      	beq.n	800cc8e <__ieee754_sqrt+0x126>
 800cc98:	02de      	lsls	r6, r3, #11
 800cc9a:	d50a      	bpl.n	800ccb2 <__ieee754_sqrt+0x14a>
 800cc9c:	f1c2 0020 	rsb	r0, r2, #32
 800cca0:	fa24 f000 	lsr.w	r0, r4, r0
 800cca4:	1e55      	subs	r5, r2, #1
 800cca6:	4094      	lsls	r4, r2
 800cca8:	4303      	orrs	r3, r0
 800ccaa:	1b4a      	subs	r2, r1, r5
 800ccac:	e78a      	b.n	800cbc4 <__ieee754_sqrt+0x5c>
 800ccae:	4611      	mov	r1, r2
 800ccb0:	e7f0      	b.n	800cc94 <__ieee754_sqrt+0x12c>
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	3201      	adds	r2, #1
 800ccb6:	e7ef      	b.n	800cc98 <__ieee754_sqrt+0x130>
 800ccb8:	4688      	mov	r8, r1
 800ccba:	e7bd      	b.n	800cc38 <__ieee754_sqrt+0xd0>
 800ccbc:	7ff00000 	.word	0x7ff00000

0800ccc0 <__kernel_cos>:
 800ccc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ccc8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cccc:	4680      	mov	r8, r0
 800ccce:	460f      	mov	r7, r1
 800ccd0:	e9cd 2300 	strd	r2, r3, [sp]
 800ccd4:	da04      	bge.n	800cce0 <__kernel_cos+0x20>
 800ccd6:	f7f3 ff1b 	bl	8000b10 <__aeabi_d2iz>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f000 8086 	beq.w	800cdec <__kernel_cos+0x12c>
 800cce0:	4642      	mov	r2, r8
 800cce2:	463b      	mov	r3, r7
 800cce4:	4640      	mov	r0, r8
 800cce6:	4639      	mov	r1, r7
 800cce8:	f7f3 fc62 	bl	80005b0 <__aeabi_dmul>
 800ccec:	2200      	movs	r2, #0
 800ccee:	4b4e      	ldr	r3, [pc, #312]	; (800ce28 <__kernel_cos+0x168>)
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	f7f3 fc5c 	bl	80005b0 <__aeabi_dmul>
 800ccf8:	a33f      	add	r3, pc, #252	; (adr r3, 800cdf8 <__kernel_cos+0x138>)
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	4682      	mov	sl, r0
 800cd00:	468b      	mov	fp, r1
 800cd02:	4620      	mov	r0, r4
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7f3 fc53 	bl	80005b0 <__aeabi_dmul>
 800cd0a:	a33d      	add	r3, pc, #244	; (adr r3, 800ce00 <__kernel_cos+0x140>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fa98 	bl	8000244 <__adddf3>
 800cd14:	4622      	mov	r2, r4
 800cd16:	462b      	mov	r3, r5
 800cd18:	f7f3 fc4a 	bl	80005b0 <__aeabi_dmul>
 800cd1c:	a33a      	add	r3, pc, #232	; (adr r3, 800ce08 <__kernel_cos+0x148>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	f7f3 fa8d 	bl	8000240 <__aeabi_dsub>
 800cd26:	4622      	mov	r2, r4
 800cd28:	462b      	mov	r3, r5
 800cd2a:	f7f3 fc41 	bl	80005b0 <__aeabi_dmul>
 800cd2e:	a338      	add	r3, pc, #224	; (adr r3, 800ce10 <__kernel_cos+0x150>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	f7f3 fa86 	bl	8000244 <__adddf3>
 800cd38:	4622      	mov	r2, r4
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	f7f3 fc38 	bl	80005b0 <__aeabi_dmul>
 800cd40:	a335      	add	r3, pc, #212	; (adr r3, 800ce18 <__kernel_cos+0x158>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fa7b 	bl	8000240 <__aeabi_dsub>
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	462b      	mov	r3, r5
 800cd4e:	f7f3 fc2f 	bl	80005b0 <__aeabi_dmul>
 800cd52:	a333      	add	r3, pc, #204	; (adr r3, 800ce20 <__kernel_cos+0x160>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fa74 	bl	8000244 <__adddf3>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	462b      	mov	r3, r5
 800cd60:	f7f3 fc26 	bl	80005b0 <__aeabi_dmul>
 800cd64:	4622      	mov	r2, r4
 800cd66:	462b      	mov	r3, r5
 800cd68:	f7f3 fc22 	bl	80005b0 <__aeabi_dmul>
 800cd6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd70:	4604      	mov	r4, r0
 800cd72:	460d      	mov	r5, r1
 800cd74:	4640      	mov	r0, r8
 800cd76:	4639      	mov	r1, r7
 800cd78:	f7f3 fc1a 	bl	80005b0 <__aeabi_dmul>
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	4602      	mov	r2, r0
 800cd80:	4629      	mov	r1, r5
 800cd82:	4620      	mov	r0, r4
 800cd84:	f7f3 fa5c 	bl	8000240 <__aeabi_dsub>
 800cd88:	4b28      	ldr	r3, [pc, #160]	; (800ce2c <__kernel_cos+0x16c>)
 800cd8a:	4680      	mov	r8, r0
 800cd8c:	429e      	cmp	r6, r3
 800cd8e:	4689      	mov	r9, r1
 800cd90:	dc0e      	bgt.n	800cdb0 <__kernel_cos+0xf0>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4650      	mov	r0, sl
 800cd98:	4659      	mov	r1, fp
 800cd9a:	f7f3 fa51 	bl	8000240 <__aeabi_dsub>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	2000      	movs	r0, #0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4922      	ldr	r1, [pc, #136]	; (800ce30 <__kernel_cos+0x170>)
 800cda6:	f7f3 fa4b 	bl	8000240 <__aeabi_dsub>
 800cdaa:	b003      	add	sp, #12
 800cdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb0:	2400      	movs	r4, #0
 800cdb2:	4b20      	ldr	r3, [pc, #128]	; (800ce34 <__kernel_cos+0x174>)
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	429e      	cmp	r6, r3
 800cdb8:	bfcc      	ite	gt
 800cdba:	4d1f      	ldrgt	r5, [pc, #124]	; (800ce38 <__kernel_cos+0x178>)
 800cdbc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800cdc0:	462b      	mov	r3, r5
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	491a      	ldr	r1, [pc, #104]	; (800ce30 <__kernel_cos+0x170>)
 800cdc6:	f7f3 fa3b 	bl	8000240 <__aeabi_dsub>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	4606      	mov	r6, r0
 800cdce:	460f      	mov	r7, r1
 800cdd0:	462b      	mov	r3, r5
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	4659      	mov	r1, fp
 800cdd6:	f7f3 fa33 	bl	8000240 <__aeabi_dsub>
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	f7f3 fa2f 	bl	8000240 <__aeabi_dsub>
 800cde2:	4602      	mov	r2, r0
 800cde4:	460b      	mov	r3, r1
 800cde6:	4630      	mov	r0, r6
 800cde8:	4639      	mov	r1, r7
 800cdea:	e7dc      	b.n	800cda6 <__kernel_cos+0xe6>
 800cdec:	2000      	movs	r0, #0
 800cdee:	4910      	ldr	r1, [pc, #64]	; (800ce30 <__kernel_cos+0x170>)
 800cdf0:	e7db      	b.n	800cdaa <__kernel_cos+0xea>
 800cdf2:	bf00      	nop
 800cdf4:	f3af 8000 	nop.w
 800cdf8:	be8838d4 	.word	0xbe8838d4
 800cdfc:	bda8fae9 	.word	0xbda8fae9
 800ce00:	bdb4b1c4 	.word	0xbdb4b1c4
 800ce04:	3e21ee9e 	.word	0x3e21ee9e
 800ce08:	809c52ad 	.word	0x809c52ad
 800ce0c:	3e927e4f 	.word	0x3e927e4f
 800ce10:	19cb1590 	.word	0x19cb1590
 800ce14:	3efa01a0 	.word	0x3efa01a0
 800ce18:	16c15177 	.word	0x16c15177
 800ce1c:	3f56c16c 	.word	0x3f56c16c
 800ce20:	5555554c 	.word	0x5555554c
 800ce24:	3fa55555 	.word	0x3fa55555
 800ce28:	3fe00000 	.word	0x3fe00000
 800ce2c:	3fd33332 	.word	0x3fd33332
 800ce30:	3ff00000 	.word	0x3ff00000
 800ce34:	3fe90000 	.word	0x3fe90000
 800ce38:	3fd20000 	.word	0x3fd20000

0800ce3c <__kernel_rem_pio2>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ce44:	9308      	str	r3, [sp, #32]
 800ce46:	9101      	str	r1, [sp, #4]
 800ce48:	4bc0      	ldr	r3, [pc, #768]	; (800d14c <__kernel_rem_pio2+0x310>)
 800ce4a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ce4c:	f112 0f14 	cmn.w	r2, #20
 800ce50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce54:	bfa8      	it	ge
 800ce56:	1ed4      	subge	r4, r2, #3
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	9b08      	ldr	r3, [sp, #32]
 800ce5c:	bfb8      	it	lt
 800ce5e:	2400      	movlt	r4, #0
 800ce60:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce64:	9306      	str	r3, [sp, #24]
 800ce66:	bfa4      	itt	ge
 800ce68:	2318      	movge	r3, #24
 800ce6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ce6e:	f06f 0317 	mvn.w	r3, #23
 800ce72:	fb04 3303 	mla	r3, r4, r3, r3
 800ce76:	eb03 0a02 	add.w	sl, r3, r2
 800ce7a:	9a06      	ldr	r2, [sp, #24]
 800ce7c:	9b04      	ldr	r3, [sp, #16]
 800ce7e:	1aa7      	subs	r7, r4, r2
 800ce80:	eb03 0802 	add.w	r8, r3, r2
 800ce84:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ce86:	2500      	movs	r5, #0
 800ce88:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9009      	str	r0, [sp, #36]	; 0x24
 800ce92:	ae20      	add	r6, sp, #128	; 0x80
 800ce94:	4545      	cmp	r5, r8
 800ce96:	dd19      	ble.n	800cecc <__kernel_rem_pio2+0x90>
 800ce98:	9b08      	ldr	r3, [sp, #32]
 800ce9a:	aa20      	add	r2, sp, #128	; 0x80
 800ce9c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cea0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cea4:	f1c3 0301 	rsb	r3, r3, #1
 800cea8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	9b07      	ldr	r3, [sp, #28]
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	4443      	add	r3, r8
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	db35      	blt.n	800cf24 <__kernel_rem_pio2+0xe8>
 800ceb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceba:	2200      	movs	r2, #0
 800cebc:	f1a3 0908 	sub.w	r9, r3, #8
 800cec0:	2300      	movs	r3, #0
 800cec2:	462f      	mov	r7, r5
 800cec4:	2600      	movs	r6, #0
 800cec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceca:	e01f      	b.n	800cf0c <__kernel_rem_pio2+0xd0>
 800cecc:	42ef      	cmn	r7, r5
 800cece:	d40b      	bmi.n	800cee8 <__kernel_rem_pio2+0xac>
 800ced0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ced4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ced8:	f7f3 fb00 	bl	80004dc <__aeabi_i2d>
 800cedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cee4:	3501      	adds	r5, #1
 800cee6:	e7d5      	b.n	800ce94 <__kernel_rem_pio2+0x58>
 800cee8:	4610      	mov	r0, r2
 800ceea:	4619      	mov	r1, r3
 800ceec:	e7f8      	b.n	800cee0 <__kernel_rem_pio2+0xa4>
 800ceee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cef2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cef6:	f7f3 fb5b 	bl	80005b0 <__aeabi_dmul>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf02:	f7f3 f99f 	bl	8000244 <__adddf3>
 800cf06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0a:	3601      	adds	r6, #1
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	3f08      	subs	r7, #8
 800cf10:	429e      	cmp	r6, r3
 800cf12:	ddec      	ble.n	800ceee <__kernel_rem_pio2+0xb2>
 800cf14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf18:	3508      	adds	r5, #8
 800cf1a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800cf1e:	f108 0801 	add.w	r8, r8, #1
 800cf22:	e7c4      	b.n	800ceae <__kernel_rem_pio2+0x72>
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	aa0c      	add	r2, sp, #48	; 0x30
 800cf28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf2e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cf30:	9f04      	ldr	r7, [sp, #16]
 800cf32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cf36:	930a      	str	r3, [sp, #40]	; 0x28
 800cf38:	463e      	mov	r6, r7
 800cf3a:	ab98      	add	r3, sp, #608	; 0x260
 800cf3c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cf40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf44:	f8cd b008 	str.w	fp, [sp, #8]
 800cf48:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800cf4c:	2e00      	cmp	r6, #0
 800cf4e:	dc71      	bgt.n	800d034 <__kernel_rem_pio2+0x1f8>
 800cf50:	4652      	mov	r2, sl
 800cf52:	4620      	mov	r0, r4
 800cf54:	4629      	mov	r1, r5
 800cf56:	f000 fc8b 	bl	800d870 <scalbn>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf60:	4604      	mov	r4, r0
 800cf62:	460d      	mov	r5, r1
 800cf64:	f7f3 fb24 	bl	80005b0 <__aeabi_dmul>
 800cf68:	f000 fb72 	bl	800d650 <floor>
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	4b78      	ldr	r3, [pc, #480]	; (800d150 <__kernel_rem_pio2+0x314>)
 800cf70:	f7f3 fb1e 	bl	80005b0 <__aeabi_dmul>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4620      	mov	r0, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	f7f3 f960 	bl	8000240 <__aeabi_dsub>
 800cf80:	460d      	mov	r5, r1
 800cf82:	4604      	mov	r4, r0
 800cf84:	f7f3 fdc4 	bl	8000b10 <__aeabi_d2iz>
 800cf88:	9007      	str	r0, [sp, #28]
 800cf8a:	f7f3 faa7 	bl	80004dc <__aeabi_i2d>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	4620      	mov	r0, r4
 800cf94:	4629      	mov	r1, r5
 800cf96:	f7f3 f953 	bl	8000240 <__aeabi_dsub>
 800cf9a:	f1ba 0f00 	cmp.w	sl, #0
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	4689      	mov	r9, r1
 800cfa2:	dd70      	ble.n	800d086 <__kernel_rem_pio2+0x24a>
 800cfa4:	1e7a      	subs	r2, r7, #1
 800cfa6:	ab0c      	add	r3, sp, #48	; 0x30
 800cfa8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cfac:	9c07      	ldr	r4, [sp, #28]
 800cfae:	f1ca 0118 	rsb	r1, sl, #24
 800cfb2:	fa40 f301 	asr.w	r3, r0, r1
 800cfb6:	441c      	add	r4, r3
 800cfb8:	408b      	lsls	r3, r1
 800cfba:	1ac0      	subs	r0, r0, r3
 800cfbc:	ab0c      	add	r3, sp, #48	; 0x30
 800cfbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cfc2:	f1ca 0317 	rsb	r3, sl, #23
 800cfc6:	9407      	str	r4, [sp, #28]
 800cfc8:	fa40 f303 	asr.w	r3, r0, r3
 800cfcc:	9302      	str	r3, [sp, #8]
 800cfce:	9b02      	ldr	r3, [sp, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	dd66      	ble.n	800d0a2 <__kernel_rem_pio2+0x266>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cfda:	4614      	mov	r4, r2
 800cfdc:	9b07      	ldr	r3, [sp, #28]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	9307      	str	r3, [sp, #28]
 800cfe2:	4297      	cmp	r7, r2
 800cfe4:	f300 809f 	bgt.w	800d126 <__kernel_rem_pio2+0x2ea>
 800cfe8:	f1ba 0f00 	cmp.w	sl, #0
 800cfec:	dd07      	ble.n	800cffe <__kernel_rem_pio2+0x1c2>
 800cfee:	f1ba 0f01 	cmp.w	sl, #1
 800cff2:	f000 80b9 	beq.w	800d168 <__kernel_rem_pio2+0x32c>
 800cff6:	f1ba 0f02 	cmp.w	sl, #2
 800cffa:	f000 80bf 	beq.w	800d17c <__kernel_rem_pio2+0x340>
 800cffe:	9b02      	ldr	r3, [sp, #8]
 800d000:	2b02      	cmp	r3, #2
 800d002:	d14e      	bne.n	800d0a2 <__kernel_rem_pio2+0x266>
 800d004:	4642      	mov	r2, r8
 800d006:	464b      	mov	r3, r9
 800d008:	2000      	movs	r0, #0
 800d00a:	4952      	ldr	r1, [pc, #328]	; (800d154 <__kernel_rem_pio2+0x318>)
 800d00c:	f7f3 f918 	bl	8000240 <__aeabi_dsub>
 800d010:	4680      	mov	r8, r0
 800d012:	4689      	mov	r9, r1
 800d014:	2c00      	cmp	r4, #0
 800d016:	d044      	beq.n	800d0a2 <__kernel_rem_pio2+0x266>
 800d018:	4652      	mov	r2, sl
 800d01a:	2000      	movs	r0, #0
 800d01c:	494d      	ldr	r1, [pc, #308]	; (800d154 <__kernel_rem_pio2+0x318>)
 800d01e:	f000 fc27 	bl	800d870 <scalbn>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 f909 	bl	8000240 <__aeabi_dsub>
 800d02e:	4680      	mov	r8, r0
 800d030:	4689      	mov	r9, r1
 800d032:	e036      	b.n	800d0a2 <__kernel_rem_pio2+0x266>
 800d034:	2200      	movs	r2, #0
 800d036:	4b48      	ldr	r3, [pc, #288]	; (800d158 <__kernel_rem_pio2+0x31c>)
 800d038:	4620      	mov	r0, r4
 800d03a:	4629      	mov	r1, r5
 800d03c:	f7f3 fab8 	bl	80005b0 <__aeabi_dmul>
 800d040:	f7f3 fd66 	bl	8000b10 <__aeabi_d2iz>
 800d044:	f7f3 fa4a 	bl	80004dc <__aeabi_i2d>
 800d048:	2200      	movs	r2, #0
 800d04a:	4b44      	ldr	r3, [pc, #272]	; (800d15c <__kernel_rem_pio2+0x320>)
 800d04c:	4680      	mov	r8, r0
 800d04e:	4689      	mov	r9, r1
 800d050:	f7f3 faae 	bl	80005b0 <__aeabi_dmul>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4620      	mov	r0, r4
 800d05a:	4629      	mov	r1, r5
 800d05c:	f7f3 f8f0 	bl	8000240 <__aeabi_dsub>
 800d060:	f7f3 fd56 	bl	8000b10 <__aeabi_d2iz>
 800d064:	9b02      	ldr	r3, [sp, #8]
 800d066:	3e01      	subs	r6, #1
 800d068:	f843 0b04 	str.w	r0, [r3], #4
 800d06c:	9302      	str	r3, [sp, #8]
 800d06e:	ab70      	add	r3, sp, #448	; 0x1c0
 800d070:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d074:	4640      	mov	r0, r8
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	4649      	mov	r1, r9
 800d07c:	f7f3 f8e2 	bl	8000244 <__adddf3>
 800d080:	4604      	mov	r4, r0
 800d082:	460d      	mov	r5, r1
 800d084:	e762      	b.n	800cf4c <__kernel_rem_pio2+0x110>
 800d086:	d105      	bne.n	800d094 <__kernel_rem_pio2+0x258>
 800d088:	1e7b      	subs	r3, r7, #1
 800d08a:	aa0c      	add	r2, sp, #48	; 0x30
 800d08c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d090:	15c3      	asrs	r3, r0, #23
 800d092:	e79b      	b.n	800cfcc <__kernel_rem_pio2+0x190>
 800d094:	2200      	movs	r2, #0
 800d096:	4b32      	ldr	r3, [pc, #200]	; (800d160 <__kernel_rem_pio2+0x324>)
 800d098:	f7f3 fd10 	bl	8000abc <__aeabi_dcmpge>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d13f      	bne.n	800d120 <__kernel_rem_pio2+0x2e4>
 800d0a0:	9002      	str	r0, [sp, #8]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4640      	mov	r0, r8
 800d0a8:	4649      	mov	r1, r9
 800d0aa:	f7f3 fce9 	bl	8000a80 <__aeabi_dcmpeq>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f000 80b5 	beq.w	800d21e <__kernel_rem_pio2+0x3e2>
 800d0b4:	1e7c      	subs	r4, r7, #1
 800d0b6:	4623      	mov	r3, r4
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	9904      	ldr	r1, [sp, #16]
 800d0bc:	428b      	cmp	r3, r1
 800d0be:	da64      	bge.n	800d18a <__kernel_rem_pio2+0x34e>
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	d078      	beq.n	800d1b6 <__kernel_rem_pio2+0x37a>
 800d0c4:	ab0c      	add	r3, sp, #48	; 0x30
 800d0c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d0ca:	f1aa 0a18 	sub.w	sl, sl, #24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 80a3 	beq.w	800d21a <__kernel_rem_pio2+0x3de>
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	491e      	ldr	r1, [pc, #120]	; (800d154 <__kernel_rem_pio2+0x318>)
 800d0da:	f000 fbc9 	bl	800d870 <scalbn>
 800d0de:	46a2      	mov	sl, r4
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	460f      	mov	r7, r1
 800d0e4:	f04f 0800 	mov.w	r8, #0
 800d0e8:	00e3      	lsls	r3, r4, #3
 800d0ea:	9306      	str	r3, [sp, #24]
 800d0ec:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800d158 <__kernel_rem_pio2+0x31c>
 800d0f0:	ab70      	add	r3, sp, #448	; 0x1c0
 800d0f2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800d0f6:	f1ba 0f00 	cmp.w	sl, #0
 800d0fa:	f280 80c6 	bge.w	800d28a <__kernel_rem_pio2+0x44e>
 800d0fe:	4627      	mov	r7, r4
 800d100:	f04f 0800 	mov.w	r8, #0
 800d104:	2f00      	cmp	r7, #0
 800d106:	f2c0 80f3 	blt.w	800d2f0 <__kernel_rem_pio2+0x4b4>
 800d10a:	4b16      	ldr	r3, [pc, #88]	; (800d164 <__kernel_rem_pio2+0x328>)
 800d10c:	f04f 0a00 	mov.w	sl, #0
 800d110:	461d      	mov	r5, r3
 800d112:	ab70      	add	r3, sp, #448	; 0x1c0
 800d114:	f04f 0b00 	mov.w	fp, #0
 800d118:	2600      	movs	r6, #0
 800d11a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d11e:	e0d9      	b.n	800d2d4 <__kernel_rem_pio2+0x498>
 800d120:	2302      	movs	r3, #2
 800d122:	9302      	str	r3, [sp, #8]
 800d124:	e756      	b.n	800cfd4 <__kernel_rem_pio2+0x198>
 800d126:	f8db 3000 	ldr.w	r3, [fp]
 800d12a:	b954      	cbnz	r4, 800d142 <__kernel_rem_pio2+0x306>
 800d12c:	b123      	cbz	r3, 800d138 <__kernel_rem_pio2+0x2fc>
 800d12e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d132:	f8cb 3000 	str.w	r3, [fp]
 800d136:	2301      	movs	r3, #1
 800d138:	461c      	mov	r4, r3
 800d13a:	3201      	adds	r2, #1
 800d13c:	f10b 0b04 	add.w	fp, fp, #4
 800d140:	e74f      	b.n	800cfe2 <__kernel_rem_pio2+0x1a6>
 800d142:	1acb      	subs	r3, r1, r3
 800d144:	f8cb 3000 	str.w	r3, [fp]
 800d148:	4623      	mov	r3, r4
 800d14a:	e7f5      	b.n	800d138 <__kernel_rem_pio2+0x2fc>
 800d14c:	0800e270 	.word	0x0800e270
 800d150:	40200000 	.word	0x40200000
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	3e700000 	.word	0x3e700000
 800d15c:	41700000 	.word	0x41700000
 800d160:	3fe00000 	.word	0x3fe00000
 800d164:	0800e230 	.word	0x0800e230
 800d168:	1e7a      	subs	r2, r7, #1
 800d16a:	ab0c      	add	r3, sp, #48	; 0x30
 800d16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d170:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d174:	a90c      	add	r1, sp, #48	; 0x30
 800d176:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d17a:	e740      	b.n	800cffe <__kernel_rem_pio2+0x1c2>
 800d17c:	1e7a      	subs	r2, r7, #1
 800d17e:	ab0c      	add	r3, sp, #48	; 0x30
 800d180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d184:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d188:	e7f4      	b.n	800d174 <__kernel_rem_pio2+0x338>
 800d18a:	a90c      	add	r1, sp, #48	; 0x30
 800d18c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d190:	3b01      	subs	r3, #1
 800d192:	430a      	orrs	r2, r1
 800d194:	e791      	b.n	800d0ba <__kernel_rem_pio2+0x27e>
 800d196:	3401      	adds	r4, #1
 800d198:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	d0fa      	beq.n	800d196 <__kernel_rem_pio2+0x35a>
 800d1a0:	9b08      	ldr	r3, [sp, #32]
 800d1a2:	1c7e      	adds	r6, r7, #1
 800d1a4:	18fd      	adds	r5, r7, r3
 800d1a6:	ab20      	add	r3, sp, #128	; 0x80
 800d1a8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d1ac:	443c      	add	r4, r7
 800d1ae:	42b4      	cmp	r4, r6
 800d1b0:	da04      	bge.n	800d1bc <__kernel_rem_pio2+0x380>
 800d1b2:	4627      	mov	r7, r4
 800d1b4:	e6c0      	b.n	800cf38 <__kernel_rem_pio2+0xfc>
 800d1b6:	2401      	movs	r4, #1
 800d1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1ba:	e7ed      	b.n	800d198 <__kernel_rem_pio2+0x35c>
 800d1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1be:	462f      	mov	r7, r5
 800d1c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d1c4:	f7f3 f98a 	bl	80004dc <__aeabi_i2d>
 800d1c8:	f04f 0b00 	mov.w	fp, #0
 800d1cc:	f04f 0800 	mov.w	r8, #0
 800d1d0:	f04f 0900 	mov.w	r9, #0
 800d1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d6:	e8e7 0102 	strd	r0, r1, [r7], #8
 800d1da:	3b08      	subs	r3, #8
 800d1dc:	9302      	str	r3, [sp, #8]
 800d1de:	9b06      	ldr	r3, [sp, #24]
 800d1e0:	459b      	cmp	fp, r3
 800d1e2:	dd07      	ble.n	800d1f4 <__kernel_rem_pio2+0x3b8>
 800d1e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d1e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d1ea:	463d      	mov	r5, r7
 800d1ec:	e9c3 8900 	strd	r8, r9, [r3]
 800d1f0:	3601      	adds	r6, #1
 800d1f2:	e7dc      	b.n	800d1ae <__kernel_rem_pio2+0x372>
 800d1f4:	9902      	ldr	r1, [sp, #8]
 800d1f6:	f10b 0b01 	add.w	fp, fp, #1
 800d1fa:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800d1fe:	9102      	str	r1, [sp, #8]
 800d200:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800d204:	f7f3 f9d4 	bl	80005b0 <__aeabi_dmul>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 f818 	bl	8000244 <__adddf3>
 800d214:	4680      	mov	r8, r0
 800d216:	4689      	mov	r9, r1
 800d218:	e7e1      	b.n	800d1de <__kernel_rem_pio2+0x3a2>
 800d21a:	3c01      	subs	r4, #1
 800d21c:	e752      	b.n	800d0c4 <__kernel_rem_pio2+0x288>
 800d21e:	f1ca 0200 	rsb	r2, sl, #0
 800d222:	4640      	mov	r0, r8
 800d224:	4649      	mov	r1, r9
 800d226:	f000 fb23 	bl	800d870 <scalbn>
 800d22a:	2200      	movs	r2, #0
 800d22c:	4ba5      	ldr	r3, [pc, #660]	; (800d4c4 <__kernel_rem_pio2+0x688>)
 800d22e:	4604      	mov	r4, r0
 800d230:	460d      	mov	r5, r1
 800d232:	f7f3 fc43 	bl	8000abc <__aeabi_dcmpge>
 800d236:	b1f8      	cbz	r0, 800d278 <__kernel_rem_pio2+0x43c>
 800d238:	2200      	movs	r2, #0
 800d23a:	4ba3      	ldr	r3, [pc, #652]	; (800d4c8 <__kernel_rem_pio2+0x68c>)
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f3 f9b6 	bl	80005b0 <__aeabi_dmul>
 800d244:	f7f3 fc64 	bl	8000b10 <__aeabi_d2iz>
 800d248:	4606      	mov	r6, r0
 800d24a:	f7f3 f947 	bl	80004dc <__aeabi_i2d>
 800d24e:	2200      	movs	r2, #0
 800d250:	4b9c      	ldr	r3, [pc, #624]	; (800d4c4 <__kernel_rem_pio2+0x688>)
 800d252:	f7f3 f9ad 	bl	80005b0 <__aeabi_dmul>
 800d256:	460b      	mov	r3, r1
 800d258:	4602      	mov	r2, r0
 800d25a:	4629      	mov	r1, r5
 800d25c:	4620      	mov	r0, r4
 800d25e:	f7f2 ffef 	bl	8000240 <__aeabi_dsub>
 800d262:	f7f3 fc55 	bl	8000b10 <__aeabi_d2iz>
 800d266:	1c7c      	adds	r4, r7, #1
 800d268:	ab0c      	add	r3, sp, #48	; 0x30
 800d26a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d26e:	f10a 0a18 	add.w	sl, sl, #24
 800d272:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d276:	e72d      	b.n	800d0d4 <__kernel_rem_pio2+0x298>
 800d278:	4620      	mov	r0, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f3 fc48 	bl	8000b10 <__aeabi_d2iz>
 800d280:	ab0c      	add	r3, sp, #48	; 0x30
 800d282:	463c      	mov	r4, r7
 800d284:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d288:	e724      	b.n	800d0d4 <__kernel_rem_pio2+0x298>
 800d28a:	ab0c      	add	r3, sp, #48	; 0x30
 800d28c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d290:	f7f3 f924 	bl	80004dc <__aeabi_i2d>
 800d294:	4632      	mov	r2, r6
 800d296:	463b      	mov	r3, r7
 800d298:	f7f3 f98a 	bl	80005b0 <__aeabi_dmul>
 800d29c:	4642      	mov	r2, r8
 800d29e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800d2a2:	464b      	mov	r3, r9
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	f7f3 f982 	bl	80005b0 <__aeabi_dmul>
 800d2ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	460f      	mov	r7, r1
 800d2b4:	e71f      	b.n	800d0f6 <__kernel_rem_pio2+0x2ba>
 800d2b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d2ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d2be:	f7f3 f977 	bl	80005b0 <__aeabi_dmul>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	4650      	mov	r0, sl
 800d2c8:	4659      	mov	r1, fp
 800d2ca:	f7f2 ffbb 	bl	8000244 <__adddf3>
 800d2ce:	4682      	mov	sl, r0
 800d2d0:	468b      	mov	fp, r1
 800d2d2:	3601      	adds	r6, #1
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	429e      	cmp	r6, r3
 800d2d8:	dc01      	bgt.n	800d2de <__kernel_rem_pio2+0x4a2>
 800d2da:	45b0      	cmp	r8, r6
 800d2dc:	daeb      	bge.n	800d2b6 <__kernel_rem_pio2+0x47a>
 800d2de:	ab48      	add	r3, sp, #288	; 0x120
 800d2e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d2e4:	e9c3 ab00 	strd	sl, fp, [r3]
 800d2e8:	3f01      	subs	r7, #1
 800d2ea:	f108 0801 	add.w	r8, r8, #1
 800d2ee:	e709      	b.n	800d104 <__kernel_rem_pio2+0x2c8>
 800d2f0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	dc09      	bgt.n	800d30a <__kernel_rem_pio2+0x4ce>
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	dc34      	bgt.n	800d364 <__kernel_rem_pio2+0x528>
 800d2fa:	d05e      	beq.n	800d3ba <__kernel_rem_pio2+0x57e>
 800d2fc:	9b07      	ldr	r3, [sp, #28]
 800d2fe:	f003 0007 	and.w	r0, r3, #7
 800d302:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d1f5      	bne.n	800d2fc <__kernel_rem_pio2+0x4c0>
 800d310:	9a06      	ldr	r2, [sp, #24]
 800d312:	ab48      	add	r3, sp, #288	; 0x120
 800d314:	441a      	add	r2, r3
 800d316:	4615      	mov	r5, r2
 800d318:	4692      	mov	sl, r2
 800d31a:	46a3      	mov	fp, r4
 800d31c:	f1bb 0f00 	cmp.w	fp, #0
 800d320:	dc7a      	bgt.n	800d418 <__kernel_rem_pio2+0x5dc>
 800d322:	46aa      	mov	sl, r5
 800d324:	46a3      	mov	fp, r4
 800d326:	f1bb 0f01 	cmp.w	fp, #1
 800d32a:	f300 8094 	bgt.w	800d456 <__kernel_rem_pio2+0x61a>
 800d32e:	2700      	movs	r7, #0
 800d330:	463e      	mov	r6, r7
 800d332:	2c01      	cmp	r4, #1
 800d334:	f300 80ae 	bgt.w	800d494 <__kernel_rem_pio2+0x658>
 800d338:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800d33c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f040 80b0 	bne.w	800d4a8 <__kernel_rem_pio2+0x66c>
 800d348:	4603      	mov	r3, r0
 800d34a:	462a      	mov	r2, r5
 800d34c:	9801      	ldr	r0, [sp, #4]
 800d34e:	e9c0 2300 	strd	r2, r3, [r0]
 800d352:	4622      	mov	r2, r4
 800d354:	460b      	mov	r3, r1
 800d356:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d35a:	463a      	mov	r2, r7
 800d35c:	4633      	mov	r3, r6
 800d35e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d362:	e7cb      	b.n	800d2fc <__kernel_rem_pio2+0x4c0>
 800d364:	2000      	movs	r0, #0
 800d366:	9a06      	ldr	r2, [sp, #24]
 800d368:	ab48      	add	r3, sp, #288	; 0x120
 800d36a:	441a      	add	r2, r3
 800d36c:	4615      	mov	r5, r2
 800d36e:	46a0      	mov	r8, r4
 800d370:	4601      	mov	r1, r0
 800d372:	f1b8 0f00 	cmp.w	r8, #0
 800d376:	da3c      	bge.n	800d3f2 <__kernel_rem_pio2+0x5b6>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d040      	beq.n	800d400 <__kernel_rem_pio2+0x5c4>
 800d37e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800d382:	4602      	mov	r2, r0
 800d384:	462b      	mov	r3, r5
 800d386:	9d01      	ldr	r5, [sp, #4]
 800d388:	2601      	movs	r6, #1
 800d38a:	e9c5 2300 	strd	r2, r3, [r5]
 800d38e:	460b      	mov	r3, r1
 800d390:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d394:	f7f2 ff54 	bl	8000240 <__aeabi_dsub>
 800d398:	4684      	mov	ip, r0
 800d39a:	460f      	mov	r7, r1
 800d39c:	ad48      	add	r5, sp, #288	; 0x120
 800d39e:	42b4      	cmp	r4, r6
 800d3a0:	f105 0508 	add.w	r5, r5, #8
 800d3a4:	da2e      	bge.n	800d404 <__kernel_rem_pio2+0x5c8>
 800d3a6:	9b02      	ldr	r3, [sp, #8]
 800d3a8:	b10b      	cbz	r3, 800d3ae <__kernel_rem_pio2+0x572>
 800d3aa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d3ae:	4662      	mov	r2, ip
 800d3b0:	463b      	mov	r3, r7
 800d3b2:	9901      	ldr	r1, [sp, #4]
 800d3b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d3b8:	e7a0      	b.n	800d2fc <__kernel_rem_pio2+0x4c0>
 800d3ba:	9a06      	ldr	r2, [sp, #24]
 800d3bc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800d3be:	ab48      	add	r3, sp, #288	; 0x120
 800d3c0:	441a      	add	r2, r3
 800d3c2:	4615      	mov	r5, r2
 800d3c4:	4637      	mov	r7, r6
 800d3c6:	2c00      	cmp	r4, #0
 800d3c8:	da09      	bge.n	800d3de <__kernel_rem_pio2+0x5a2>
 800d3ca:	9b02      	ldr	r3, [sp, #8]
 800d3cc:	b10b      	cbz	r3, 800d3d2 <__kernel_rem_pio2+0x596>
 800d3ce:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d3d2:	4632      	mov	r2, r6
 800d3d4:	463b      	mov	r3, r7
 800d3d6:	9901      	ldr	r1, [sp, #4]
 800d3d8:	e9c1 2300 	strd	r2, r3, [r1]
 800d3dc:	e78e      	b.n	800d2fc <__kernel_rem_pio2+0x4c0>
 800d3de:	4630      	mov	r0, r6
 800d3e0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	f7f2 ff2d 	bl	8000244 <__adddf3>
 800d3ea:	3c01      	subs	r4, #1
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	e7e9      	b.n	800d3c6 <__kernel_rem_pio2+0x58a>
 800d3f2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d3f6:	f7f2 ff25 	bl	8000244 <__adddf3>
 800d3fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3fe:	e7b8      	b.n	800d372 <__kernel_rem_pio2+0x536>
 800d400:	460d      	mov	r5, r1
 800d402:	e7be      	b.n	800d382 <__kernel_rem_pio2+0x546>
 800d404:	4660      	mov	r0, ip
 800d406:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f2 ff1a 	bl	8000244 <__adddf3>
 800d410:	3601      	adds	r6, #1
 800d412:	4684      	mov	ip, r0
 800d414:	460f      	mov	r7, r1
 800d416:	e7c2      	b.n	800d39e <__kernel_rem_pio2+0x562>
 800d418:	e9da 6700 	ldrd	r6, r7, [sl]
 800d41c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800d420:	4632      	mov	r2, r6
 800d422:	463b      	mov	r3, r7
 800d424:	4640      	mov	r0, r8
 800d426:	4649      	mov	r1, r9
 800d428:	f7f2 ff0c 	bl	8000244 <__adddf3>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d434:	4640      	mov	r0, r8
 800d436:	4649      	mov	r1, r9
 800d438:	f7f2 ff02 	bl	8000240 <__aeabi_dsub>
 800d43c:	4632      	mov	r2, r6
 800d43e:	463b      	mov	r3, r7
 800d440:	f7f2 ff00 	bl	8000244 <__adddf3>
 800d444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d448:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d44c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d450:	e9ca 2300 	strd	r2, r3, [sl]
 800d454:	e762      	b.n	800d31c <__kernel_rem_pio2+0x4e0>
 800d456:	e9da 8900 	ldrd	r8, r9, [sl]
 800d45a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800d45e:	4642      	mov	r2, r8
 800d460:	464b      	mov	r3, r9
 800d462:	4630      	mov	r0, r6
 800d464:	4639      	mov	r1, r7
 800d466:	f7f2 feed 	bl	8000244 <__adddf3>
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d472:	4630      	mov	r0, r6
 800d474:	4639      	mov	r1, r7
 800d476:	f7f2 fee3 	bl	8000240 <__aeabi_dsub>
 800d47a:	4642      	mov	r2, r8
 800d47c:	464b      	mov	r3, r9
 800d47e:	f7f2 fee1 	bl	8000244 <__adddf3>
 800d482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d486:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d48a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d48e:	e9ca 2300 	strd	r2, r3, [sl]
 800d492:	e748      	b.n	800d326 <__kernel_rem_pio2+0x4ea>
 800d494:	4638      	mov	r0, r7
 800d496:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d49a:	4631      	mov	r1, r6
 800d49c:	f7f2 fed2 	bl	8000244 <__adddf3>
 800d4a0:	3c01      	subs	r4, #1
 800d4a2:	4607      	mov	r7, r0
 800d4a4:	460e      	mov	r6, r1
 800d4a6:	e744      	b.n	800d332 <__kernel_rem_pio2+0x4f6>
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d4ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d4b2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d4b6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d4ba:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d4be:	601d      	str	r5, [r3, #0]
 800d4c0:	615e      	str	r6, [r3, #20]
 800d4c2:	e71b      	b.n	800d2fc <__kernel_rem_pio2+0x4c0>
 800d4c4:	41700000 	.word	0x41700000
 800d4c8:	3e700000 	.word	0x3e700000
 800d4cc:	00000000 	.word	0x00000000

0800d4d0 <__kernel_sin>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	b086      	sub	sp, #24
 800d4d6:	e9cd 2300 	strd	r2, r3, [sp]
 800d4da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d4e2:	4682      	mov	sl, r0
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d4e8:	da03      	bge.n	800d4f2 <__kernel_sin+0x22>
 800d4ea:	f7f3 fb11 	bl	8000b10 <__aeabi_d2iz>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d050      	beq.n	800d594 <__kernel_sin+0xc4>
 800d4f2:	4652      	mov	r2, sl
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	f7f3 f859 	bl	80005b0 <__aeabi_dmul>
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4650      	mov	r0, sl
 800d508:	4621      	mov	r1, r4
 800d50a:	f7f3 f851 	bl	80005b0 <__aeabi_dmul>
 800d50e:	a33e      	add	r3, pc, #248	; (adr r3, 800d608 <__kernel_sin+0x138>)
 800d510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d514:	4680      	mov	r8, r0
 800d516:	4689      	mov	r9, r1
 800d518:	4630      	mov	r0, r6
 800d51a:	4639      	mov	r1, r7
 800d51c:	f7f3 f848 	bl	80005b0 <__aeabi_dmul>
 800d520:	a33b      	add	r3, pc, #236	; (adr r3, 800d610 <__kernel_sin+0x140>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f7f2 fe8b 	bl	8000240 <__aeabi_dsub>
 800d52a:	4632      	mov	r2, r6
 800d52c:	463b      	mov	r3, r7
 800d52e:	f7f3 f83f 	bl	80005b0 <__aeabi_dmul>
 800d532:	a339      	add	r3, pc, #228	; (adr r3, 800d618 <__kernel_sin+0x148>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	f7f2 fe84 	bl	8000244 <__adddf3>
 800d53c:	4632      	mov	r2, r6
 800d53e:	463b      	mov	r3, r7
 800d540:	f7f3 f836 	bl	80005b0 <__aeabi_dmul>
 800d544:	a336      	add	r3, pc, #216	; (adr r3, 800d620 <__kernel_sin+0x150>)
 800d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54a:	f7f2 fe79 	bl	8000240 <__aeabi_dsub>
 800d54e:	4632      	mov	r2, r6
 800d550:	463b      	mov	r3, r7
 800d552:	f7f3 f82d 	bl	80005b0 <__aeabi_dmul>
 800d556:	a334      	add	r3, pc, #208	; (adr r3, 800d628 <__kernel_sin+0x158>)
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	f7f2 fe72 	bl	8000244 <__adddf3>
 800d560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d564:	b9dd      	cbnz	r5, 800d59e <__kernel_sin+0xce>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	4630      	mov	r0, r6
 800d56c:	4639      	mov	r1, r7
 800d56e:	f7f3 f81f 	bl	80005b0 <__aeabi_dmul>
 800d572:	a32f      	add	r3, pc, #188	; (adr r3, 800d630 <__kernel_sin+0x160>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f2 fe62 	bl	8000240 <__aeabi_dsub>
 800d57c:	4642      	mov	r2, r8
 800d57e:	464b      	mov	r3, r9
 800d580:	f7f3 f816 	bl	80005b0 <__aeabi_dmul>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4650      	mov	r0, sl
 800d58a:	4621      	mov	r1, r4
 800d58c:	f7f2 fe5a 	bl	8000244 <__adddf3>
 800d590:	4682      	mov	sl, r0
 800d592:	460c      	mov	r4, r1
 800d594:	4650      	mov	r0, sl
 800d596:	4621      	mov	r1, r4
 800d598:	b006      	add	sp, #24
 800d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59e:	2200      	movs	r2, #0
 800d5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5a4:	4b24      	ldr	r3, [pc, #144]	; (800d638 <__kernel_sin+0x168>)
 800d5a6:	f7f3 f803 	bl	80005b0 <__aeabi_dmul>
 800d5aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f2 fffb 	bl	80005b0 <__aeabi_dmul>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5c2:	f7f2 fe3d 	bl	8000240 <__aeabi_dsub>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	f7f2 fff1 	bl	80005b0 <__aeabi_dmul>
 800d5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5d2:	f7f2 fe35 	bl	8000240 <__aeabi_dsub>
 800d5d6:	a316      	add	r3, pc, #88	; (adr r3, 800d630 <__kernel_sin+0x160>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	4606      	mov	r6, r0
 800d5de:	460f      	mov	r7, r1
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	4649      	mov	r1, r9
 800d5e4:	f7f2 ffe4 	bl	80005b0 <__aeabi_dmul>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	f7f2 fe28 	bl	8000244 <__adddf3>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4650      	mov	r0, sl
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	f7f2 fe20 	bl	8000240 <__aeabi_dsub>
 800d600:	e7c6      	b.n	800d590 <__kernel_sin+0xc0>
 800d602:	bf00      	nop
 800d604:	f3af 8000 	nop.w
 800d608:	5acfd57c 	.word	0x5acfd57c
 800d60c:	3de5d93a 	.word	0x3de5d93a
 800d610:	8a2b9ceb 	.word	0x8a2b9ceb
 800d614:	3e5ae5e6 	.word	0x3e5ae5e6
 800d618:	57b1fe7d 	.word	0x57b1fe7d
 800d61c:	3ec71de3 	.word	0x3ec71de3
 800d620:	19c161d5 	.word	0x19c161d5
 800d624:	3f2a01a0 	.word	0x3f2a01a0
 800d628:	1110f8a6 	.word	0x1110f8a6
 800d62c:	3f811111 	.word	0x3f811111
 800d630:	55555549 	.word	0x55555549
 800d634:	3fc55555 	.word	0x3fc55555
 800d638:	3fe00000 	.word	0x3fe00000

0800d63c <fabs>:
 800d63c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d640:	4770      	bx	lr

0800d642 <finite>:
 800d642:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d646:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d64a:	0fc0      	lsrs	r0, r0, #31
 800d64c:	4770      	bx	lr
	...

0800d650 <floor>:
 800d650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d654:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d658:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d65c:	2e13      	cmp	r6, #19
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	4607      	mov	r7, r0
 800d664:	460c      	mov	r4, r1
 800d666:	4605      	mov	r5, r0
 800d668:	dc34      	bgt.n	800d6d4 <floor+0x84>
 800d66a:	2e00      	cmp	r6, #0
 800d66c:	da15      	bge.n	800d69a <floor+0x4a>
 800d66e:	a334      	add	r3, pc, #208	; (adr r3, 800d740 <floor+0xf0>)
 800d670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d674:	f7f2 fde6 	bl	8000244 <__adddf3>
 800d678:	2200      	movs	r2, #0
 800d67a:	2300      	movs	r3, #0
 800d67c:	f7f3 fa28 	bl	8000ad0 <__aeabi_dcmpgt>
 800d680:	b140      	cbz	r0, 800d694 <floor+0x44>
 800d682:	2c00      	cmp	r4, #0
 800d684:	da59      	bge.n	800d73a <floor+0xea>
 800d686:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d68a:	ea57 0503 	orrs.w	r5, r7, r3
 800d68e:	d001      	beq.n	800d694 <floor+0x44>
 800d690:	2500      	movs	r5, #0
 800d692:	4c2d      	ldr	r4, [pc, #180]	; (800d748 <floor+0xf8>)
 800d694:	4623      	mov	r3, r4
 800d696:	462f      	mov	r7, r5
 800d698:	e025      	b.n	800d6e6 <floor+0x96>
 800d69a:	4a2c      	ldr	r2, [pc, #176]	; (800d74c <floor+0xfc>)
 800d69c:	fa42 f806 	asr.w	r8, r2, r6
 800d6a0:	ea01 0208 	and.w	r2, r1, r8
 800d6a4:	4302      	orrs	r2, r0
 800d6a6:	d01e      	beq.n	800d6e6 <floor+0x96>
 800d6a8:	a325      	add	r3, pc, #148	; (adr r3, 800d740 <floor+0xf0>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f2 fdc9 	bl	8000244 <__adddf3>
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f7f3 fa0b 	bl	8000ad0 <__aeabi_dcmpgt>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0ea      	beq.n	800d694 <floor+0x44>
 800d6be:	2c00      	cmp	r4, #0
 800d6c0:	bfbe      	ittt	lt
 800d6c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d6c6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d6ca:	19a4      	addlt	r4, r4, r6
 800d6cc:	2500      	movs	r5, #0
 800d6ce:	ea24 0408 	bic.w	r4, r4, r8
 800d6d2:	e7df      	b.n	800d694 <floor+0x44>
 800d6d4:	2e33      	cmp	r6, #51	; 0x33
 800d6d6:	dd0a      	ble.n	800d6ee <floor+0x9e>
 800d6d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d6dc:	d103      	bne.n	800d6e6 <floor+0x96>
 800d6de:	f7f2 fdb1 	bl	8000244 <__adddf3>
 800d6e2:	4607      	mov	r7, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d6f6:	fa22 f808 	lsr.w	r8, r2, r8
 800d6fa:	ea18 0f00 	tst.w	r8, r0
 800d6fe:	d0f2      	beq.n	800d6e6 <floor+0x96>
 800d700:	a30f      	add	r3, pc, #60	; (adr r3, 800d740 <floor+0xf0>)
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f7f2 fd9d 	bl	8000244 <__adddf3>
 800d70a:	2200      	movs	r2, #0
 800d70c:	2300      	movs	r3, #0
 800d70e:	f7f3 f9df 	bl	8000ad0 <__aeabi_dcmpgt>
 800d712:	2800      	cmp	r0, #0
 800d714:	d0be      	beq.n	800d694 <floor+0x44>
 800d716:	2c00      	cmp	r4, #0
 800d718:	da02      	bge.n	800d720 <floor+0xd0>
 800d71a:	2e14      	cmp	r6, #20
 800d71c:	d103      	bne.n	800d726 <floor+0xd6>
 800d71e:	3401      	adds	r4, #1
 800d720:	ea25 0508 	bic.w	r5, r5, r8
 800d724:	e7b6      	b.n	800d694 <floor+0x44>
 800d726:	2301      	movs	r3, #1
 800d728:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d72c:	fa03 f606 	lsl.w	r6, r3, r6
 800d730:	4435      	add	r5, r6
 800d732:	42bd      	cmp	r5, r7
 800d734:	bf38      	it	cc
 800d736:	18e4      	addcc	r4, r4, r3
 800d738:	e7f2      	b.n	800d720 <floor+0xd0>
 800d73a:	2500      	movs	r5, #0
 800d73c:	462c      	mov	r4, r5
 800d73e:	e7a9      	b.n	800d694 <floor+0x44>
 800d740:	8800759c 	.word	0x8800759c
 800d744:	7e37e43c 	.word	0x7e37e43c
 800d748:	bff00000 	.word	0xbff00000
 800d74c:	000fffff 	.word	0x000fffff

0800d750 <nan>:
 800d750:	2000      	movs	r0, #0
 800d752:	4901      	ldr	r1, [pc, #4]	; (800d758 <nan+0x8>)
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	7ff80000 	.word	0x7ff80000

0800d75c <rint>:
 800d75c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800d760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d762:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800d766:	2f13      	cmp	r7, #19
 800d768:	4602      	mov	r2, r0
 800d76a:	460b      	mov	r3, r1
 800d76c:	460c      	mov	r4, r1
 800d76e:	4605      	mov	r5, r0
 800d770:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800d774:	dc59      	bgt.n	800d82a <rint+0xce>
 800d776:	2f00      	cmp	r7, #0
 800d778:	da2a      	bge.n	800d7d0 <rint+0x74>
 800d77a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d77e:	4301      	orrs	r1, r0
 800d780:	d022      	beq.n	800d7c8 <rint+0x6c>
 800d782:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800d786:	4301      	orrs	r1, r0
 800d788:	424d      	negs	r5, r1
 800d78a:	430d      	orrs	r5, r1
 800d78c:	4936      	ldr	r1, [pc, #216]	; (800d868 <rint+0x10c>)
 800d78e:	0c5c      	lsrs	r4, r3, #17
 800d790:	0b2d      	lsrs	r5, r5, #12
 800d792:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800d796:	0464      	lsls	r4, r4, #17
 800d798:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d79c:	ea45 0304 	orr.w	r3, r5, r4
 800d7a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f2 fd4c 	bl	8000244 <__adddf3>
 800d7ac:	e9cd 0100 	strd	r0, r1, [sp]
 800d7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	f7f2 fd42 	bl	8000240 <__aeabi_dsub>
 800d7bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7c0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4610      	mov	r0, r2
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	b003      	add	sp, #12
 800d7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d0:	4926      	ldr	r1, [pc, #152]	; (800d86c <rint+0x110>)
 800d7d2:	4139      	asrs	r1, r7
 800d7d4:	ea03 0001 	and.w	r0, r3, r1
 800d7d8:	4310      	orrs	r0, r2
 800d7da:	d0f5      	beq.n	800d7c8 <rint+0x6c>
 800d7dc:	084b      	lsrs	r3, r1, #1
 800d7de:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800d7e2:	ea52 0501 	orrs.w	r5, r2, r1
 800d7e6:	d00c      	beq.n	800d802 <rint+0xa6>
 800d7e8:	ea24 0303 	bic.w	r3, r4, r3
 800d7ec:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800d7f0:	2f13      	cmp	r7, #19
 800d7f2:	bf0c      	ite	eq
 800d7f4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800d7f8:	2500      	movne	r5, #0
 800d7fa:	fa44 f707 	asr.w	r7, r4, r7
 800d7fe:	ea43 0407 	orr.w	r4, r3, r7
 800d802:	4919      	ldr	r1, [pc, #100]	; (800d868 <rint+0x10c>)
 800d804:	4623      	mov	r3, r4
 800d806:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800d80a:	462a      	mov	r2, r5
 800d80c:	e9d6 4500 	ldrd	r4, r5, [r6]
 800d810:	4620      	mov	r0, r4
 800d812:	4629      	mov	r1, r5
 800d814:	f7f2 fd16 	bl	8000244 <__adddf3>
 800d818:	e9cd 0100 	strd	r0, r1, [sp]
 800d81c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d820:	4622      	mov	r2, r4
 800d822:	462b      	mov	r3, r5
 800d824:	f7f2 fd0c 	bl	8000240 <__aeabi_dsub>
 800d828:	e7cc      	b.n	800d7c4 <rint+0x68>
 800d82a:	2f33      	cmp	r7, #51	; 0x33
 800d82c:	dd05      	ble.n	800d83a <rint+0xde>
 800d82e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800d832:	d1c9      	bne.n	800d7c8 <rint+0x6c>
 800d834:	f7f2 fd06 	bl	8000244 <__adddf3>
 800d838:	e7c4      	b.n	800d7c4 <rint+0x68>
 800d83a:	f04f 31ff 	mov.w	r1, #4294967295
 800d83e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800d842:	fa21 f10c 	lsr.w	r1, r1, ip
 800d846:	4208      	tst	r0, r1
 800d848:	d0be      	beq.n	800d7c8 <rint+0x6c>
 800d84a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800d84e:	bf18      	it	ne
 800d850:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800d854:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800d858:	bf1e      	ittt	ne
 800d85a:	ea20 0303 	bicne.w	r3, r0, r3
 800d85e:	fa45 fc0c 	asrne.w	ip, r5, ip
 800d862:	ea43 050c 	orrne.w	r5, r3, ip
 800d866:	e7cc      	b.n	800d802 <rint+0xa6>
 800d868:	0800e280 	.word	0x0800e280
 800d86c:	000fffff 	.word	0x000fffff

0800d870 <scalbn>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d876:	4604      	mov	r4, r0
 800d878:	460d      	mov	r5, r1
 800d87a:	4617      	mov	r7, r2
 800d87c:	460b      	mov	r3, r1
 800d87e:	b996      	cbnz	r6, 800d8a6 <scalbn+0x36>
 800d880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d884:	4303      	orrs	r3, r0
 800d886:	d039      	beq.n	800d8fc <scalbn+0x8c>
 800d888:	4b35      	ldr	r3, [pc, #212]	; (800d960 <scalbn+0xf0>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	f7f2 fe90 	bl	80005b0 <__aeabi_dmul>
 800d890:	4b34      	ldr	r3, [pc, #208]	; (800d964 <scalbn+0xf4>)
 800d892:	4604      	mov	r4, r0
 800d894:	429f      	cmp	r7, r3
 800d896:	460d      	mov	r5, r1
 800d898:	da0f      	bge.n	800d8ba <scalbn+0x4a>
 800d89a:	a32d      	add	r3, pc, #180	; (adr r3, 800d950 <scalbn+0xe0>)
 800d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a0:	f7f2 fe86 	bl	80005b0 <__aeabi_dmul>
 800d8a4:	e006      	b.n	800d8b4 <scalbn+0x44>
 800d8a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d8aa:	4296      	cmp	r6, r2
 800d8ac:	d10a      	bne.n	800d8c4 <scalbn+0x54>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	f7f2 fcc8 	bl	8000244 <__adddf3>
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	e020      	b.n	800d8fc <scalbn+0x8c>
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d8c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d8c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d8c8:	19b9      	adds	r1, r7, r6
 800d8ca:	4291      	cmp	r1, r2
 800d8cc:	dd0e      	ble.n	800d8ec <scalbn+0x7c>
 800d8ce:	a322      	add	r3, pc, #136	; (adr r3, 800d958 <scalbn+0xe8>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d8d8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d8dc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d8e0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d8e4:	4820      	ldr	r0, [pc, #128]	; (800d968 <scalbn+0xf8>)
 800d8e6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d8ea:	e7d9      	b.n	800d8a0 <scalbn+0x30>
 800d8ec:	2900      	cmp	r1, #0
 800d8ee:	dd08      	ble.n	800d902 <scalbn+0x92>
 800d8f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	4629      	mov	r1, r5
 800d900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d902:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d906:	da16      	bge.n	800d936 <scalbn+0xc6>
 800d908:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d90c:	429f      	cmp	r7, r3
 800d90e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d912:	dd08      	ble.n	800d926 <scalbn+0xb6>
 800d914:	4c15      	ldr	r4, [pc, #84]	; (800d96c <scalbn+0xfc>)
 800d916:	4814      	ldr	r0, [pc, #80]	; (800d968 <scalbn+0xf8>)
 800d918:	f363 74df 	bfi	r4, r3, #31, #1
 800d91c:	a30e      	add	r3, pc, #56	; (adr r3, 800d958 <scalbn+0xe8>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	4621      	mov	r1, r4
 800d924:	e7bc      	b.n	800d8a0 <scalbn+0x30>
 800d926:	4c12      	ldr	r4, [pc, #72]	; (800d970 <scalbn+0x100>)
 800d928:	4812      	ldr	r0, [pc, #72]	; (800d974 <scalbn+0x104>)
 800d92a:	f363 74df 	bfi	r4, r3, #31, #1
 800d92e:	a308      	add	r3, pc, #32	; (adr r3, 800d950 <scalbn+0xe0>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	e7f5      	b.n	800d922 <scalbn+0xb2>
 800d936:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d93a:	3136      	adds	r1, #54	; 0x36
 800d93c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d940:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d944:	4620      	mov	r0, r4
 800d946:	4629      	mov	r1, r5
 800d948:	2200      	movs	r2, #0
 800d94a:	4b0b      	ldr	r3, [pc, #44]	; (800d978 <scalbn+0x108>)
 800d94c:	e7a8      	b.n	800d8a0 <scalbn+0x30>
 800d94e:	bf00      	nop
 800d950:	c2f8f359 	.word	0xc2f8f359
 800d954:	01a56e1f 	.word	0x01a56e1f
 800d958:	8800759c 	.word	0x8800759c
 800d95c:	7e37e43c 	.word	0x7e37e43c
 800d960:	43500000 	.word	0x43500000
 800d964:	ffff3cb0 	.word	0xffff3cb0
 800d968:	8800759c 	.word	0x8800759c
 800d96c:	7e37e43c 	.word	0x7e37e43c
 800d970:	01a56e1f 	.word	0x01a56e1f
 800d974:	c2f8f359 	.word	0xc2f8f359
 800d978:	3c900000 	.word	0x3c900000

0800d97c <_init>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	bf00      	nop
 800d980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d982:	bc08      	pop	{r3}
 800d984:	469e      	mov	lr, r3
 800d986:	4770      	bx	lr

0800d988 <_fini>:
 800d988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98a:	bf00      	nop
 800d98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d98e:	bc08      	pop	{r3}
 800d990:	469e      	mov	lr, r3
 800d992:	4770      	bx	lr
